/*\r\n\r\n * Licensed to the Hipparchus project under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The Hipparchus project licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n//package org.hipparchus.ode;\r\n\r\n\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n//import org.hipparchus.exception.;\r\n\r\n//import org.hipparchus.exception.Math_Illegal_State_Exception;\r\n\r\n\r\n\r\n/**\r\n\r\n * This interface allows users to add secondary differential equations to a primary\r\n\r\n * set of differential equations.\r\n\r\n * <p>\r\n\r\n * In some cases users may need to integrate some problem-specific equations along\r\n\r\n * with a primary set of differential equations. One example is optimal control where\r\n\r\n * adjoined parameters linked to the minimized Hamiltonian must be integrated.\r\n\r\n * </p>\r\n\r\n * <p>\r\n\r\n * This interface allows users to add such equations to a primary set of {@link\r\n\r\n * FieldOrdinary_Differential_Equation first order differential equations}\r\n\r\n * thanks to the {@link FieldExpandable_ODE#add_secondary_equations(FieldSecondary_ODE)}\r\n\r\n * method.\r\n\r\n * </p>\r\n\r\n * @see FieldOrdinary_Differential_Equation\r\n\r\n * @see FieldExpandable_ODE\r\n\r\n * @param <T> the type of the field elements\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\nclass FieldSecondary_ODE \r\n\r\n{\r\n\r\n\r\n\r\n    /** Get the dimension of the secondary state parameters.\r\n\r\n     * @return dimension of the secondary state parameters\r\n\r\n     */\r\n\r\n    int get_dimension();\r\n\r\n\r\n\r\n    /** Initialize equations at the start of an ODE integration.\r\n\r\n     * <p>\r\n\r\n     * This method is called once at the start of the integration. It\r\n\r\n     * may be used by the equations to initialize some internal data\r\n\r\n     * if needed.\r\n\r\n     * </p>\r\n\r\n     * <p>\r\n\r\n     * The default implementation does nothing.\r\n\r\n     * </p>\r\n\r\n     * @param t0 value of the independent <I>time</I> variable at integration start\r\n\r\n     * @param primary0 array containing the value of the primary state vector at integration start\r\n\r\n     * @param secondary0 array containing the value of the secondary state vector at integration start\r\n\r\n     * @param const_time target time for the integration\r\n\r\n     */\r\n\r\n    default void init(T t0, std::vector<T> primary0, std::vector<T> secondary0, T const_time) \r\n\r\n    {\r\n\r\n        // nothing by default\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Compute the derivatives related to the secondary state parameters.\r\n\r\n     * <p>\r\n\r\n     * In some cases, additional equations can require to change the derivatives\r\n\r\n     * of the primary state (i.e. the content of the {@code primary_dot} array).\r\n\r\n     * One use case is optimal control, when the secondary equations handle co-state, * which changes control, and the control changes the primary state. In this\r\n\r\n     * case, the primary and secondary equations are not really independent from each\r\n\r\n     * other, so if possible it would be better to put state and co-state and their\r\n\r\n     * equations all in the primary equations. As this is not always possible, this\r\n\r\n     * method explicitly <emph>allows</emph> to modify the content of the {@code primary_dot}\r\n\r\n     * array. This array will be used to evolve the primary state only <emph>after</emph>\r\n\r\n     * all secondary equations have computed their derivatives, hence allowing this\r\n\r\n     * side effect.\r\n\r\n     * </p>\r\n\r\n     * @param t current value of the independent <I>time</I> variable\r\n\r\n     * @param primary array containing the current value of the primary state vector\r\n\r\n     * @param primary_dot array containing the derivative of the primary state vector\r\n\r\n     * (the method is allowed to change the derivatives here, when the additional\r\n\r\n     * equations do have an effect on the primary equations)\r\n\r\n     * @param secondary array containing the current value of the secondary state vector\r\n\r\n     * @return derivative of the secondary state vector\r\n\r\n     * @exception Math_Illegal_State_Exception if the number of functions evaluations is exceeded\r\n\r\n     * @exception  if arrays dimensions do not match equations settings\r\n\r\n     */\r\n\r\n    std::vector<T> compute_derivatives(T t, std::vector<T> primary, std::vector<T> primary_dot, std::vector<T> secondary)\r\n\r\n        , Math_Illegal_State_Exception;\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n