/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n\r\n\r\n//package org.hipparchus.ode;\r\n\r\n\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n\r\n\r\n/** This interface represents a first order differential equations set.\r\n\r\n *\r\n\r\n * <p>This interface should be implemented by all real first order\r\n\r\n * differential equation problems before they can be handled by the\r\n\r\n * integrators {@link FieldODE_Integrator#integrate(FieldExpandable_ODE, * FieldODE_State, Calculus_Field_Element)} method.</p>\r\n\r\n *\r\n\r\n * <p>A first order differential equations problem, as seen by an\r\n\r\n * integrator is the time derivative <code>dY/dt</code> of a state\r\n\r\n * vector <code>Y</code>, both being one dimensional arrays. From the\r\n\r\n * integrator point of view, this derivative depends only on the\r\n\r\n * current time <code>t</code> and on the state vector\r\n\r\n * <code>Y</code>.</p>\r\n\r\n *\r\n\r\n * <p>For real problems, the derivative depends also on parameters\r\n\r\n * that do not belong to the state vector (dynamical model constants\r\n\r\n * for example). These constants are completely outside of the scope\r\n\r\n * of this interface, the classes that implement it are allowed to\r\n\r\n * handle them as they want.</p>\r\n\r\n *\r\n\r\n * @see FieldODE_Integrator\r\n\r\n *\r\n\r\n * @param <T> the type of the field elements\r\n\r\n */\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\nclass FieldOrdinary_Differential_Equation \r\n\r\n{\r\n\r\n\r\n\r\n    /** Get the dimension of the problem.\r\n\r\n     * @return dimension of the problem\r\n\r\n     */\r\n\r\n    int get_dimension();\r\n\r\n\r\n\r\n    /** Initialize equations at the start of an ODE integration.\r\n\r\n     * <p>\r\n\r\n     * This method is called once at the start of the integration. It\r\n\r\n     * may be used by the equations to initialize some internal data\r\n\r\n     * if needed.\r\n\r\n     * </p>\r\n\r\n     * <p>\r\n\r\n     * The default implementation does nothing.\r\n\r\n     * </p>\r\n\r\n     * @param t0 value of the independent <I>time</I> variable at integration start\r\n\r\n     * @param y0 array containing the value of the state vector at integration start\r\n\r\n     * @param const_time target time for the integration\r\n\r\n     */\r\n\r\n    default void init(T t0, std::vector<T> y0, T const_time) \r\n\r\n    {\r\n\r\n        // do nothing by default\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get the current time derivative of the state vector.\r\n\r\n     * @param t current value of the independent <I>time</I> variable\r\n\r\n     * @param y array containing the current value of the state vector\r\n\r\n     * @return time derivative of the state vector\r\n\r\n     */\r\n\r\n    std::vector<T> compute_derivatives(T t, std::vector<T> y);\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n