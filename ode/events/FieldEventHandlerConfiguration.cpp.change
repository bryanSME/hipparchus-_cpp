/*\r\n\r\n * Licensed to the Hipparchus project under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The Hipparchus project licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n//package org.hipparchus.ode.events;\r\n\r\n\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n//import org.hipparchus.analysis.solvers.Bracketed_Real_Field_Univariate_Solver;\r\n\r\n\r\n\r\n/** Interface gathering all configuration parameters for setting up an event handler.\r\n\r\n * @param <T> the type of the field elements\r\n\r\n * @since 2.0\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\nclass Field_Event_Handler_Configuration \r\n\r\n{\r\n\r\n\r\n\r\n    /** Get the underlying event handler.\r\n\r\n     * @return underlying event handler\r\n\r\n     */\r\n\r\n    FieldODE_Event_Handler<T> get_event_handler();\r\n\r\n\r\n\r\n    /** Get the maximal time interval between events handler checks.\r\n\r\n     * @return maximal time interval between events handler checks\r\n\r\n     */\r\n\r\n    double get_max_check_interval();\r\n\r\n\r\n\r\n    /** Get the convergence threshold for event localization.\r\n\r\n     * @return convergence threshold for event localization\r\n\r\n     */\r\n\r\n    T get_convergence();\r\n\r\n\r\n\r\n    /** Get the upper limit in the iteration count for event localization.\r\n\r\n     * @return upper limit in the iteration count for event localization\r\n\r\n     */\r\n\r\n    int get_max_iteration_count();\r\n\r\n\r\n\r\n    /** Get the root-finding algorithm to use to detect state events.\r\n\r\n     * @return root-finding algorithm to use to detect state events\r\n\r\n     */\r\n\r\n    Bracketed_Real_Field_Univariate_Solver<T> get_solver();\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n