/*\r\n\r\n * Licensed to the Hipparchus project under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The Hipparchus project licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n//package org.hipparchus.ode.events;\r\n\r\n\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n//import org.hipparchus.ode.FieldODE_State;\r\n\r\n//import org.hipparchus.ode.Field_ODE_State_And_Derivative;\r\n\r\n\r\n\r\n/** This interface represents a handler for discrete events triggered\r\n\r\n * during ODE integration.\r\n\r\n *\r\n\r\n * <p>Some events can be triggered at discrete times as an ODE problem\r\n\r\n * is solved. This occurs for example when the integration process\r\n\r\n * should be stopped as some state is reached (G-stop facility) when the\r\n\r\n * precise date is unknown a priori, or when the derivatives have\r\n\r\n * states boundaries crossings.\r\n\r\n * </p>\r\n\r\n *\r\n\r\n * <p>These events are defined as occurring when a <code>g</code>\r\n\r\n * switching function sign changes.</p>\r\n\r\n *\r\n\r\n * <p>sin_ce events are only problem-dependent and are triggered by the\r\n\r\n * independent <i>time</i> variable and the state vector, they can\r\n\r\n * occur at virtually any time, unknown in advance. The integrators will\r\n\r\n * take care to avoid sign changes inside the steps, they will reduce\r\n\r\n * the step size when such an event is detected in order to put this\r\n\r\n * event exactly at the end of the current step. This guarantees that\r\n\r\n * step interpolation (which always has a one step scope) is relevant\r\n\r\n * even in presence of discontinuities. This is independent from the\r\n\r\n * stepsize control provided by integrators that monitor the local\r\n\r\n * error (this event handling feature is available for all integrators, * including fixed step ones).</p>\r\n\r\n *\r\n\r\n * @param <T> the type of the field elements\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\nclass FieldODE_Event_Handler  \r\n\r\n{\r\n\r\n\r\n\r\n    /** Initialize event handler at the start of an ODE integration.\r\n\r\n     * <p>\r\n\r\n     * This method is called once at the start of the integration. It\r\n\r\n     * may be used by the event handler to initialize some internal data\r\n\r\n     * if needed.\r\n\r\n     * </p>\r\n\r\n     * <p>\r\n\r\n     * The default implementation does nothing\r\n\r\n     * </p>\r\n\r\n     * @param initial_state initial time, state vector and derivative\r\n\r\n     * @param const_time target time for the integration\r\n\r\n     */\r\n\r\n    default void init(Field_ODE_State_And_Derivative<T> initial_state, T const_time) \r\n\r\n    {\r\n\r\n        // nothing by default\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Compute the value of the switching function.\r\n\r\n\r\n\r\n     * <p>The discrete events are generated when the sign of this\r\n\r\n     * switching function changes. The integrator will take care to change\r\n\r\n     * the stepsize in such a way these events occur exactly at step boundaries.\r\n\r\n     * The switching function must be continuous in its roots neighborhood\r\n\r\n     * (but not necessarily smooth), as the integrator will need to find its\r\n\r\n     * roots to locate precisely the events.</p>\r\n\r\n     * <p>Also note that the integrator expect that once an event has occurred, * the sign of the switching function at the start of the next step (i.e.\r\n\r\n     * just after the event) is the opposite of the sign just before the event.\r\n\r\n     * This consistency between the steps <string>must</strong> be preserved, * otherwise {@link org.hipparchus.exception.\r\n\r\n     * exceptions} related to root not being bracketed will occur.</p>\r\n\r\n     * <p>This need for consistency is sometimes tricky to achieve. A typical\r\n\r\n     * example is using an event to model a ball bouncing on the floor. The first\r\n\r\n     * idea to represent this would be to have {@code g(state) = h(state)} where h is the\r\n\r\n     * height above the floor at time {@code state.get_time()}. When {@code g(state)} reaches 0, the\r\n\r\n     * ball is on the floor, so it should bounce and the typical way to do this is\r\n\r\n     * to reverse its vertical velocity. However, this would mean that before the\r\n\r\n     * event {@code g(state)} was decreasing from positive values to 0, and after the\r\n\r\n     * event {@code g(state)} would be increasing from 0 to positive values again.\r\n\r\n     * Consistency is broken here! The solution here is to have {@code g(state) = sign\r\n\r\n     * * h(state)}, where sign is a variable with initial value set to {@code +1}. Each\r\n\r\n     * time {@link #event_occurred(Field_ODE_State_And_Derivative, bool) event_occurred}\r\n\r\n     * method is called, {@code sign} is reset to {@code -sign}. This allows the\r\n\r\n     * {@code g(state)} function to remain continuous (and even smooth) even across events, * despite {@code h(state)} is not. Basically, the event is used to <em>fold</em>\r\n\r\n     * {@code h(state)} at bounce points, and {@code sign} is used to <em>unfold</em> it\r\n\r\n     * back, so the solvers sees a {@code g(state)} function which behaves smoothly even\r\n\r\n     * across events.</p>\r\n\r\n     *\r\n\r\n     * <p>This method is idempotent, that is calling this multiple times with the same\r\n\r\n     * state will result in the same value, with two exceptions. First, the definition of\r\n\r\n     * the g function may change when an {@link #event_occurred(Field_ODE_State_And_Derivative, * bool) event occurs} on this handler, as in the above example. Second, the\r\n\r\n     * definition of the g function may change when the {@link\r\n\r\n     * #event_occurred(Field_ODE_State_And_Derivative, bool) event_occurred} method of any\r\n\r\n     * other event handler in the same integrator returns {@link Action#RESET_EVENTS}, * {@link Action#RESET_DERIVATIVES}, or {@link Action#RESET_STATE}.\r\n\r\n     *\r\n\r\n     * @param state current value of the independent <i>time</i> variable, state vector\r\n\r\n     * and derivative\r\n\r\n     * @return value of the g switching function\r\n\r\n     */\r\n\r\n    T g(Field_ODE_State_And_Derivative<T> state);\r\n\r\n\r\n\r\n    /** Handle an event and choose what to do next.\r\n\r\n\r\n\r\n     * <p>This method is called when the integrator has accepted a step\r\n\r\n     * ending exactly on a sign change of the function, just <em>after</em>\r\n\r\n     * the step handler itself is called (see below for scheduling). It\r\n\r\n     * allows the user to update his internal data to acknowledge the fact\r\n\r\n     * the event has been handled (for example setting a flag in the {@link\r\n\r\n     * org.hipparchus.ode.FieldOrdinary_Differential_Equation\r\n\r\n     * differential equations} to switch the derivatives computation in\r\n\r\n     * case of discontinuity), or to direct the integrator to either stop\r\n\r\n     * or continue integration, possibly with a reset state or derivatives.</p>\r\n\r\n     *\r\n\r\n     * <ul>\r\n\r\n     *   <li>if {@link Action#STOP} is returned, the integration will be stopped,</li>\r\n\r\n     *   <li>if {@link Action#RESET_STATE} is returned, the {@link #reset_state\r\n\r\n     *   reset_state} method will be called once the step handler has\r\n\r\n     *   finished its task, and the integrator will also recompute the\r\n\r\n     *   derivatives,</li>\r\n\r\n     *   <li>if {@link Action#RESET_DERIVATIVES} is returned, the integrator\r\n\r\n     *   will recompute the derivatives, *   <li>if {@link Action#RESET_EVENTS} is returned, the integrator\r\n\r\n     *   will recheck all event handlers, *   <li>if {@link Action#CONTINUE} is returned, no specific action will\r\n\r\n     *   be taken (apart from having called this method) and integration\r\n\r\n     *   will continue.</li>\r\n\r\n     * </ul>\r\n\r\n     *\r\n\r\n     * <p>The scheduling between this method and the {@link\r\n\r\n     * org.hipparchus.ode.sampling.FieldODE_Step_Handler FieldODE_Step_Handler} method {@link\r\n\r\n     * org.hipparchus.ode.sampling.FieldODE_Step_Handler#handle_step\r\n\r\n     * handle_step(interpolator, is_last)} is to call {@code handle_step} first and this method afterwards\r\n\r\n     * (this scheduling changed as of Hipparchus 2.0). This scheduling allows user code\r\n\r\n     * called by this method and user code called by step handlers to get values\r\n\r\n     * of the independent time variable consistent with integration direction.</p>\r\n\r\n     *\r\n\r\n     * @param state current value of the independent <i>time</i> variable, state vector\r\n\r\n     * and derivative\r\n\r\n     * @param increasing if true, the value of the switching function increases\r\n\r\n     * when times increases around event (note that increase is measured with respect\r\n\r\n     * to physical time, not with respect to integration which may go backward in time)\r\n\r\n     * @return indication of what the integrator should do next, this\r\n\r\n     * value must be one of {@link Action#STOP}, {@link Action#RESET_STATE}, * {@link Action#RESET_DERIVATIVES}, {@link Action#RESET_EVENTS}, or\r\n\r\n     * {@link Action#CONTINUE}\r\n\r\n     */\r\n\r\n    Action event_occurred(Field_ODE_State_And_Derivative<T> state, bool increasing);\r\n\r\n\r\n\r\n    /** Reset the state prior to continue the integration.\r\n\r\n\r\n\r\n     * <p>This method is called after the step handler has returned and\r\n\r\n     * before the next step is started, but only when {@link\r\n\r\n     * #event_occurred(Field_ODE_State_And_Derivative, bool) event_occurred} has itself\r\n\r\n     * returned the {@link Action#RESET_STATE} indicator. It allows the user to reset\r\n\r\n     * the state vector for the next step, without perturbing the step handler of the\r\n\r\n     * finishing step.</p>\r\n\r\n     * <p>The default implementation returns its argument.</p>\r\n\r\n     * @param state current value of the independent <i>time</i> variable, state vector\r\n\r\n     * and derivative\r\n\r\n     * @return reset state (note that it does not include the derivatives, they will\r\n\r\n     * be added automatically by the integrator afterwards)\r\n\r\n     */\r\n\r\n    default FieldODE_State<T> reset_state(Field_ODE_State_And_Derivative<T> state) \r\n\r\n    {\r\n\r\n        return state;\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n