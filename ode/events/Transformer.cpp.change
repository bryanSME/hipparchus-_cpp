/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n\r\n\r\n//package org.hipparchus.ode.events;\r\n\r\n\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n//import org.hipparchus.util.FastMath;\r\n\r\n//import org.hipparchus.util.Precision;\r\n\r\n\r\n\r\n\r\n\r\n/** Transformer for {@link ODE_Event_Handler#g(org.hipparchus.ode.ODE_State_And_Derivative) g functions}.\r\n\r\n * @see Event_Filter\r\n\r\n * @see Filter_Type\r\n\r\n */\r\n\r\nenum Transformer \r\n\r\n{\r\n\r\n\r\n\r\n    /** Transformer computing transformed = 0.\r\n\r\n     * <p>\r\n\r\n     * This transformer is used when we initialize the filter, until we get at\r\n\r\n     * least one non-zero value to select the proper transformer.\r\n\r\n     * </p>\r\n\r\n     */\r\n\r\n    UNINITIALIZED \r\n\r\n    {\r\n\r\n\r\n\r\n        /**  {@inherit_doc} */\r\n\r\n        //override\r\n\r\n        protected double transformed(const double g) \r\n\r\n        {\r\n\r\n            return 0;\r\n\r\n        }\r\n\r\n\r\n\r\n        /**  {@inherit_doc} */\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n        protected  T transformed(const T g) \r\n\r\n        {\r\n\r\n            return g.get_field().get_zero();\r\n\r\n        }\r\n\r\n\r\n\r\n    }, \r\n\r\n    /** Transformer computing transformed = g.\r\n\r\n     * <p>\r\n\r\n     * When this transformer is applied, the roots of the original function\r\n\r\n     * are preserved, with the same {@code increasing/decreasing} status.\r\n\r\n     * </p>\r\n\r\n     */\r\n\r\n    PLUS \r\n\r\n    {\r\n\r\n\r\n\r\n        /**  {@inherit_doc} */\r\n\r\n        //override\r\n\r\n        protected double transformed(const double g) \r\n\r\n        {\r\n\r\n            return g;\r\n\r\n        }\r\n\r\n\r\n\r\n        /**  {@inherit_doc} */\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n        protected  T transformed(const T g) \r\n\r\n        {\r\n\r\n            return g;\r\n\r\n        }\r\n\r\n\r\n\r\n    }, \r\n\r\n    /** Transformer computing transformed = -g.\r\n\r\n     * <p>\r\n\r\n     * When this transformer is applied, the roots of the original function\r\n\r\n     * are preserved, with reversed {@code increasing/decreasing} status.\r\n\r\n     * </p>\r\n\r\n     */\r\n\r\n    MINUS \r\n\r\n    {\r\n\r\n\r\n\r\n        /**  {@inherit_doc} */\r\n\r\n        //override\r\n\r\n        protected double transformed(const double g) \r\n\r\n        {\r\n\r\n            return -g;\r\n\r\n        }\r\n\r\n\r\n\r\n        /**  {@inherit_doc} */\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n        protected  T transformed(const T g) \r\n\r\n        {\r\n\r\n            return g.negate();\r\n\r\n        }\r\n\r\n\r\n\r\n    }, \r\n\r\n    /** Transformer computing transformed = min(-{@link Precision#SAFE_MIN}, -g, +g).\r\n\r\n     * <p>\r\n\r\n     * When this transformer is applied, the transformed function is\r\n\r\n     * guaranteed to be always strictly negative (i.e. there are no roots).\r\n\r\n     * </p>\r\n\r\n     */\r\n\r\n    MIN \r\n\r\n    {\r\n\r\n\r\n\r\n        /**  {@inherit_doc} */\r\n\r\n        //override\r\n\r\n        protected double transformed(const double g) \r\n\r\n        {\r\n\r\n            return std::min(std::min(-g, +g), -Precision.SAFE_MIN);\r\n\r\n        }\r\n\r\n\r\n\r\n        /**  {@inherit_doc} */\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n        protected  T transformed(const T g) \r\n\r\n        {\r\n\r\n            return std::min(std::min(g.negate(), g), -Precision.SAFE_MIN);\r\n\r\n        }\r\n\r\n\r\n\r\n    }, \r\n\r\n    /** Transformer computing transformed = max(+{@link Precision#SAFE_MIN}, -g, +g).\r\n\r\n     * <p>\r\n\r\n     * When this transformer is applied, the transformed function is\r\n\r\n     * guaranteed to be always strictly positive (i.e. there are no roots).\r\n\r\n     * </p>\r\n\r\n     */\r\n\r\n    MAX \r\n\r\n    {\r\n\r\n\r\n\r\n        /**  {@inherit_doc} */\r\n\r\n        //override\r\n\r\n        protected double transformed(const double g) \r\n\r\n        {\r\n\r\n            return std::max(std::max(-g, +g), Precision.SAFE_MIN);\r\n\r\n        }\r\n\r\n\r\n\r\n        /**  {@inherit_doc} */\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n        protected  T transformed(const T g) \r\n\r\n        {\r\n\r\n            return std::max(std::max(g.negate(), g), Precision.SAFE_MIN);\r\n\r\n        }\r\n\r\n\r\n\r\n    };\r\n\r\n\r\n\r\n    /** Transform value of function g.\r\n\r\n     * @param g raw value of function g\r\n\r\n     * @return transformed value of function g\r\n\r\n     */\r\n\r\n    protected virtual double transformed(double g);\r\n\r\n\r\n\r\n    /** Transform value of function g.\r\n\r\n     * @param g raw value of function g\r\n\r\n     * @return transformed value of function g\r\n\r\n     * @param <T> the type of the field elements\r\n\r\n     * @since 2.0\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n    protected virtual  T transformed(T g);\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n