/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n\r\n\r\n//package org.hipparchus.ode.nonstiff;\r\n\r\n\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n//import org.hipparchus.Field;\r\n\r\n//import org.hipparchus.ode.FieldEquations_mapper;\r\n\r\n//import org.hipparchus.ode.Field_ODE_State_And_Derivative;\r\n\r\n\r\n\r\n/**\r\n\r\n * This class represents an interpolator over the last step during an\r\n\r\n * ODE integration for the 5(4) Higham and Hall integrator.\r\n\r\n *\r\n\r\n * @see Higham_Hall54_Field_Integrator\r\n\r\n *\r\n\r\n * @param <T> the type of the field elements\r\n\r\n */\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\nclass Higham_Hall54_Field_State_Interpolator\r\n\r\n    extends Runge_Kutta_Field_State_Interpolator<T> \r\n\r\n    {\r\n\r\n\r\n\r\n    /** Simple constructor.\r\n\r\n     * @param field field to which the time and state vector elements belong\r\n\r\n     * @param forward integration direction indicator\r\n\r\n     * @param y_dot_k slopes at the intermediate points\r\n\r\n     * @param global_previous_state start of the global step\r\n\r\n     * @param global_current_state end of the global step\r\n\r\n     * @param soft_previous_state start of the restricted step\r\n\r\n     * @param soft_current_state end of the restricted step\r\n\r\n     * @param mapper equations mapper for the all equations\r\n\r\n     */\r\n\r\n    Higham_Hall54_Field_State_Interpolator(const Field<T> field, const bool forward, const std::vector<std::vector<T>> y_dot_k, const Field_ODE_State_And_Derivative<T> global_previous_state, const Field_ODE_State_And_Derivative<T> global_current_state, const Field_ODE_State_And_Derivative<T> soft_previous_state, const Field_ODE_State_And_Derivative<T> soft_current_state, const FieldEquations_mapper<T> mapper) \r\n\r\n    {\r\n\r\n        super(field, forward, y_dot_k, global_previous_state, global_current_state, soft_previous_state, soft_current_state, mapper);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n    //override\r\n\r\n    protected Higham_Hall54_Field_State_Interpolator<T> create(const Field<T> new_field, const bool new_forward, const std::vector<std::vector<T>> new_y_dot_k, const Field_ODE_State_And_Derivative<T> new_global_previous_state, const Field_ODE_State_And_Derivative<T> new_global_current_state, const Field_ODE_State_And_Derivative<T> new_soft_previous_state, const Field_ODE_State_And_Derivative<T> new_soft_current_state, const FieldEquations_mapper<T> new_mapper) \r\n\r\n    {\r\n\r\n        return Higham_Hall54_Field_State_Interpolator<T>(new_field, new_forward, new_y_dot_k, new_global_previous_state, new_global_current_state, new_soft_previous_state, new_soft_current_state, new_mapper);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n    //@Suppress_Warnings("unchecked")\r\n\r\n    //override\r\n\r\n    protected Field_ODE_State_And_Derivative<T> compute_interpolated_state_and_derivatives(const FieldEquations_mapper<T> mapper, const T time, const T theta, const T theta_h, const T one_minus_theta_h) \r\n\r\n    {\r\n\r\n\r\n\r\n        const T& b_dot0 = theta.multiply(theta.multiply(theta.multiply( -10.0      ).add( 16.0       )).add(-15.0 /  2.0)).add(1);\r\n\r\n        const T& b_dot1 = time.get_field().get_zero();\r\n\r\n        const T& b_dot2 = theta.multiply(theta.multiply(theta.multiply( 135.0 / 2.0).add(-729.0 / 8.0)).add(459.0 / 16.0));\r\n\r\n        const T& b_dot3 = theta.multiply(theta.multiply(theta.multiply(-120.0      ).add( 152.0      )).add(-44.0       ));\r\n\r\n        const T& b_dot4 = theta.multiply(theta.multiply(theta.multiply( 125.0 / 2.0).add(-625.0 / 8.0)).add(375.0 / 16.0));\r\n\r\n        const T& b_dot5 = theta.multiply(  5.0 /  8.0).multiply(theta.multiply(2).subtract(1));\r\n\r\n        const std::vector<T> interpolated_state;\r\n\r\n        const std::vector<T> interpolated_derivatives;\r\n\r\n\r\n\r\n        if (get_global_previous_state() != null && theta.get_real() <= 0.5) \r\n\r\n        {\r\n\r\n            const T& b0 = theta_h.multiply(theta.multiply(theta.multiply(theta.multiply( -5.0 / 2.0).add(  16.0 /  3.0)).add(-15.0 /  4.0)).add(1));\r\n\r\n            const T& b1 = time.get_field().get_zero();\r\n\r\n            const T& b2 = theta_h.multiply(theta.multiply(theta.multiply(theta.multiply(135.0 / 8.0).add(-243.0 /  8.0)).add(459.0 / 32.0)));\r\n\r\n            const T& b3 = theta_h.multiply(theta.multiply(theta.multiply(theta.multiply(-30.0      ).add( 152.0 /  3.0)).add(-22.0       )));\r\n\r\n            const T& b4 = theta_h.multiply(theta.multiply(theta.multiply(theta.multiply(125.0 / 8.0).add(-625.0 / 24.0)).add(375.0 / 32.0)));\r\n\r\n            const T& b5 = theta_h.multiply(theta.multiply(theta.multiply(                                   5.0 / 12.0 ).add( -5.0 / 16.0)));\r\n\r\n            interpolated_state       = previous_state_linear_combination(b0, b1, b2, b3, b4, b5);\r\n\r\n            interpolated_derivatives = derivative_linear_combination(b_dot0, b_dot1, b_dot2, b_dot3, b_dot4, b_dot5);\r\n\r\n        }\r\n\r\nelse \r\n\r\n        {\r\n\r\n            const T theta2 = theta.multiply(theta);\r\n\r\n            const T h      = theta_h.divide(theta);\r\n\r\n            const T& b0 = h.multiply( theta.multiply(theta.multiply(theta.multiply(theta.multiply(-5.0 / 2.0).add( 16.0 / 3.0)).add( -15.0 /  4.0)).add(  1.0       )).add(  -1.0 / 12.0));\r\n\r\n            const T& b1 = time.get_field().get_zero();\r\n\r\n            const T& b2 = h.multiply(theta2.multiply(theta.multiply(theta.multiply(                               135.0 / 8.0 ).add(-243.0 /  8.0)).add(459.0 / 32.0)).add( -27.0 / 32.0));\r\n\r\n            const T& b3 = h.multiply(theta2.multiply(theta.multiply(theta.multiply(                               -30.0       ).add( 152.0 /  3.0)).add(-22.0       )).add(  4.0  /  3.0));\r\n\r\n            const T& b4 = h.multiply(theta2.multiply(theta.multiply(theta.multiply(                               125.0 / 8.0 ).add(-625.0 / 24.0)).add(375.0 / 32.0)).add(-125.0 / 96.0));\r\n\r\n            const T& b5 = h.multiply(theta2.multiply(theta.multiply(                                                                   5.0 / 12.0 ).add(-5.0  / 16.0)).add(  -5.0 / 48.0));\r\n\r\n            interpolated_state       = current_state_linear_combination(b0, b1, b2, b3, b4, b5);\r\n\r\n            interpolated_derivatives = derivative_linear_combination(b_dot0, b_dot1, b_dot2, b_dot3, b_dot4, b_dot5);\r\n\r\n        }\r\n\r\n\r\n\r\n        return mapper.map_state_and_derivative(time, interpolated_state, interpolated_derivatives);\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n