/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n\r\n\r\n//package org.hipparchus.ode.nonstiff;\r\n\r\n\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n//import org.hipparchus.Field;\r\n\r\n//import org.hipparchus.ode.FieldEquations_mapper;\r\n\r\n//import org.hipparchus.ode.Field_ODE_State_And_Derivative;\r\n\r\n//import org.hipparchus.util.Math_Arrays;\r\n\r\n\r\n\r\n/**\r\n\r\n * This class : a second order Runge-Kutta integrator for\r\n\r\n * Ordinary Differential Equations.\r\n\r\n *\r\n\r\n * <p>This method is an explicit Runge-Kutta method, its Butcher-array\r\n\r\n * is the following one :\r\n\r\n * <pre>\r\n\r\n *    0  |  0    0\r\n\r\n *   1/2 | 1/2   0\r\n\r\n *       |----------\r\n\r\n *       |  0    1\r\n\r\n * </pre>\r\n\r\n * </p>\r\n\r\n *\r\n\r\n * @see Euler_fieldIntegrator\r\n\r\n * @see ClassicalRunge_Kutta_Field_Integrator\r\n\r\n * @see Gill_Field_Integrator\r\n\r\n * @see Three_Eighthes_Field_Integrator\r\n\r\n * @see Luther_fieldIntegrator\r\n\r\n *\r\n\r\n * @param <T> the type of the field elements\r\n\r\n */\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\nclass Midpoint_Field_Integrator extends Runge_Kutta_Field_Integrator<T> \r\n\r\n{\r\n\r\n\r\n\r\n    /** Simple constructor.\r\n\r\n     * Build a midpoint integrator with the given step.\r\n\r\n     * @param field field to which the time and state vector elements belong\r\n\r\n     * @param step integration step\r\n\r\n     */\r\n\r\n    public Midpoint_Field_Integrator(const Field<T> field, const T step) \r\n\r\n    {\r\n\r\n        super(field, "midpoint", step);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n    //override\r\n\r\n    public std::vector<T> get_c() \r\n\r\n    {\r\n\r\n        const std::vector<T> c = Math_Arrays::build_array(get_field(), 1);\r\n\r\n        c[0] = get_field().get_one().multiply(0.5);\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n    //override\r\n\r\n    public std::vector<std::vector<T>> get_a() \r\n\r\n    {\r\n\r\n        const std::vector<std::vector<T>> a = Math_Arrays::build_array(get_field(), 1, 1);\r\n\r\n        a[0][0] = fraction(1, 2);\r\n\r\n        return a;\r\n\r\n    }\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n    //override\r\n\r\n    public std::vector<T> get_b() \r\n\r\n    {\r\n\r\n        const std::vector<T> b = Math_Arrays::build_array(get_field(), 2);\r\n\r\n        b[0] = get_field().get_zero();\r\n\r\n        b[1] = get_field().get_one();\r\n\r\n        return b;\r\n\r\n    }\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n    //override\r\n\r\n    protected Midpoint_Field_State_Interpolator<T>\r\n\r\n        create_interpolator(const bool forward, std::vector<std::vector<T>> y_dot_k, const Field_ODE_State_And_Derivative<T> global_previous_state, const Field_ODE_State_And_Derivative<T> global_current_state, const FieldEquations_mapper<T> mapper) \r\n\r\n        {\r\n\r\n        return Midpoint_Field_State_Interpolator<T>(get_field(), forward, y_dot_k, global_previous_state, global_current_state, global_previous_state, global_current_state, mapper);\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n