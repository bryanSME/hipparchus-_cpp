/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n\r\n\r\n//package org.hipparchus.ode.nonstiff;\r\n\r\n\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n//import org.hipparchus.Field;\r\n\r\n//import org.hipparchus.ode.FieldEquations_mapper;\r\n\r\n//import org.hipparchus.ode.Field_ODE_State_And_Derivative;\r\n\r\n//import org.hipparchus.util.Math_Arrays;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n * This class : the Luther sixth order Runge-Kutta\r\n\r\n * integrator for Ordinary Differential Equations.\r\n\r\n\r\n\r\n * <p>\r\n\r\n * This method is described in H. A. Luther 1968 paper <a\r\n\r\n * href="http://www.ams.org/journals/mcom/1968-22-102/S0025-5718-68-99876-1/S0025-5718-68-99876-1.pdf">\r\n\r\n * An explicit Sixth-Order Runge-Kutta Formula</a>.\r\n\r\n * </p>\r\n\r\n\r\n\r\n * <p>This method is an explicit Runge-Kutta method, its Butcher-array\r\n\r\n * is the following one :\r\n\r\n * <pre>\r\n\r\n *        0   |               0                     0                     0                     0                     0                     0\r\n\r\n *        1   |               1                     0                     0                     0                     0                     0\r\n\r\n *       1/2  |              3/8                   1/8                    0                     0                     0                     0\r\n\r\n *       2/3  |              8/27                  2/27                  8/27                   0                     0                     0\r\n\r\n *   (7-q)/14 | (  -21 +   9q)/392    (  -56 +   8q)/392    (  336 -  48q)/392    (  -63 +   3q)/392                  0                     0\r\n\r\n *   (7+q)/14 | (-1155 - 255q)/1960   ( -280 -  40q)/1960   (    0 - 320q)/1960   (   63 + 363q)/1960   ( 2352 + 392q)/1960                 0\r\n\r\n *        1   | (  330 + 105q)/180    (  120 +   0q)/180    ( -200 + 280q)/180    (  126 - 189q)/180    ( -686 - 126q)/180     ( 490 -  70q)/180\r\n\r\n *            |--------------------------------------------------------------------------------------------------------------------------------------------------\r\n\r\n *            |              1/20                   0                   16/45                  0                   49/180                 49/180         1/20\r\n\r\n * </pre>\r\n\r\n * where q = &radic;21</p>\r\n\r\n *\r\n\r\n * @see Euler_fieldIntegrator\r\n\r\n * @see ClassicalRunge_Kutta_Field_Integrator\r\n\r\n * @see Gill_Field_Integrator\r\n\r\n * @see Midpoint_Field_Integrator\r\n\r\n * @see Three_Eighthes_Field_Integrator\r\n\r\n * @param <T> the type of the field elements\r\n\r\n */\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\nclass Luther_fieldIntegrator\r\n\r\n    extends Runge_Kutta_Field_Integrator<T> \r\n\r\n    {\r\n\r\n\r\n\r\n    /** Simple constructor.\r\n\r\n     * Build a fourth-order Luther integrator with the given step.\r\n\r\n     * @param field field to which the time and state vector elements belong\r\n\r\n     * @param step integration step\r\n\r\n     */\r\n\r\n    public Luther_fieldIntegrator(const Field<T> field, const T step) \r\n\r\n    {\r\n\r\n        super(field, "Luther", step);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n    //override\r\n\r\n    public std::vector<T> get_c() \r\n\r\n    {\r\n\r\n        const T q = get_field().get_zero().add(21).sqrt();\r\n\r\n        const std::vector<T> c = Math_Arrays::build_array(get_field(), 6);\r\n\r\n        c[0] = get_field().get_one();\r\n\r\n        c[1] = fraction(1, 2);\r\n\r\n        c[2] = fraction(2, 3);\r\n\r\n        c[3] = q.subtract(7).divide(-14);\r\n\r\n        c[4] = q.add(7).divide(14);\r\n\r\n        c[5] = get_field().get_one();\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n    //override\r\n\r\n    public std::vector<std::vector<T>> get_a() \r\n\r\n    {\r\n\r\n        const T q = get_field().get_zero().add(21).sqrt();\r\n\r\n        const std::vector<std::vector<T>> a = Math_Arrays::build_array(get_field(), 6, -1);\r\n\r\n        for (int i{}; i < a.size(); ++i) \r\n\r\n        {\r\n\r\n            a[i] = Math_Arrays::build_array(get_field(), i + 1);\r\n\r\n        }\r\n\r\n        a[0][0] = get_field().get_one();\r\n\r\n        a[1][0] = fraction(3,  8);\r\n\r\n        a[1][1] = fraction(1,  8);\r\n\r\n        a[2][0] = fraction(8, 27);\r\n\r\n        a[2][1] = fraction(2, 27);\r\n\r\n        a[2][2] = a[2][0];\r\n\r\n        a[3][0] = q.multiply(   9).add(  -21).divide( 392);\r\n\r\n        a[3][1] = q.multiply(   8).add(  -56).divide( 392);\r\n\r\n        a[3][2] = q.multiply( -48).add(  336).divide( 392);\r\n\r\n        a[3][3] = q.multiply(   3).add(  -63).divide( 392);\r\n\r\n        a[4][0] = q.multiply(-255).add(-1155).divide(1960);\r\n\r\n        a[4][1] = q.multiply( -40).add( -280).divide(1960);\r\n\r\n        a[4][2] = q.multiply(-320)           .divide(1960);\r\n\r\n        a[4][3] = q.multiply( 363).add(   63).divide(1960);\r\n\r\n        a[4][4] = q.multiply( 392).add( 2352).divide(1960);\r\n\r\n        a[5][0] = q.multiply( 105).add(  330).divide( 180);\r\n\r\n        a[5][1] = fraction(2, 3);\r\n\r\n        a[5][2] = q.multiply( 280).add( -200).divide( 180);\r\n\r\n        a[5][3] = q.multiply(-189).add(  126).divide( 180);\r\n\r\n        a[5][4] = q.multiply(-126).add( -686).divide( 180);\r\n\r\n        a[5][5] = q.multiply( -70).add(  490).divide( 180);\r\n\r\n        return a;\r\n\r\n    }\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n    //override\r\n\r\n    public std::vector<T> get_b() \r\n\r\n    {\r\n\r\n\r\n\r\n        const std::vector<T> b = Math_Arrays::build_array(get_field(), 7);\r\n\r\n        b[0] = fraction( 1,  20);\r\n\r\n        b[1] = get_field().get_zero();\r\n\r\n        b[2] = fraction(16,  45);\r\n\r\n        b[3] = get_field().get_zero();\r\n\r\n        b[4] = fraction(49, 180);\r\n\r\n        b[5] = b[4];\r\n\r\n        b[6] = b[0];\r\n\r\n\r\n\r\n        return b;\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n    //override\r\n\r\n    protected Luther_fieldStateInterpolator<T>\r\n\r\n        create_interpolator(const bool forward, std::vector<std::vector<T>> y_dot_k, const Field_ODE_State_And_Derivative<T> global_previous_state, const Field_ODE_State_And_Derivative<T> global_current_state, const FieldEquations_mapper<T> mapper) \r\n\r\n        {\r\n\r\n        return Luther_fieldStateInterpolator<T>(get_field(), forward, y_dot_k, global_previous_state, global_current_state, global_previous_state, global_current_state, mapper);\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n