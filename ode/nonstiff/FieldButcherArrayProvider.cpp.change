/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n\r\n\r\n//package org.hipparchus.ode.nonstiff;\r\n\r\n\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n\r\n\r\n/** This interface represents an integrator  based on Butcher arrays.\r\n\r\n * @see Runge_Kutta_Field_Integrator\r\n\r\n * @see EmbeddedRunge_Kutta_Field_Integrator\r\n\r\n * @param <T> the type of the field elements\r\n\r\n */\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\nclass FieldButcher_Array_Provider \r\n\r\n{\r\n\r\n\r\n\r\n    /** Get the time steps from Butcher array (without the first zero).\r\n\r\n     * @return time steps from Butcher array (without the first zero\r\n\r\n     */\r\n\r\n    std::vector<T> get_c();\r\n\r\n\r\n\r\n    /** Get the internal weights from Butcher array (without the first empty row).\r\n\r\n     * @return internal weights from Butcher array (without the first empty row)\r\n\r\n     */\r\n\r\n    std::vector<std::vector<T>> get_a();\r\n\r\n\r\n\r\n    /** Get the external weights for the high order method from Butcher array.\r\n\r\n     * @return external weights for the high order method from Butcher array\r\n\r\n     */\r\n\r\n    std::vector<T> get_b();\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n