/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n\r\n\r\n//package org.hipparchus.ode.nonstiff;\r\n\r\n\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n//import org.hipparchus.Field;\r\n\r\n//import org.hipparchus.exception.;\r\n\r\n//import org.hipparchus.exception.Math_Illegal_State_Exception;\r\n\r\n//import org.hipparchus.ode.Abstract_Field_Integrator;\r\n\r\n//import org.hipparchus.ode.FieldEquations_mapper;\r\n\r\n//import org.hipparchus.ode.FieldODE_State;\r\n\r\n//import org.hipparchus.ode.Field_ODE_State_And_Derivative;\r\n\r\n//import org.hipparchus.util.FastMath;\r\n\r\n//import org.hipparchus.util.Math_Arrays;\r\n\r\n#include <vector>\r\n\r\n#include <cmath>\r\n\r\n#include <algorithm>\r\n\r\n\r\n\r\n/**\r\n\r\n * This virtual class holds the common part of all adaptive\r\n\r\n * stepsize integrators for Ordinary Differential Equations.\r\n\r\n *\r\n\r\n * <p>These algorithms perform integration with stepsize control, which\r\n\r\n * means the user does not specify the integration step but rather a\r\n\r\n * tolerance on error. The error threshold is computed as\r\n\r\n * <pre>\r\n\r\n * threshold_i = abs_tol_i + rel_tol_i * max (abs (ym), abs (ym+1))\r\n\r\n * </pre>\r\n\r\n * where abs_tol_i is the absolute tolerance for component i of the\r\n\r\n * state vector and rel_tol_i is the relative tolerance for the same\r\n\r\n * component. The user can also use only two scalar values abs_tol and\r\n\r\n * rel_tol which will be used for all components.\r\n\r\n * </p>\r\n\r\n * <p>\r\n\r\n * Note that <em>only</em> the {@link FieldODE_State#get_primary_state() main part}\r\n\r\n * of the state vector is used for stepsize control. The {@link\r\n\r\n * FieldODE_State#get_secondary_statestatic_cast<int>( secondary parts} of the state\r\n\r\n * vector are explicitly ignored for stepsize control.\r\n\r\n * </p>\r\n\r\n *\r\n\r\n * <p>If the estimated error for ym+1 is such that\r\n\r\n * <pre>\r\n\r\n * sqrt((sum (err_est_i / threshold_i)^2 ) / n) &lt; 1\r\n\r\n * </pre>\r\n\r\n *\r\n\r\n * (where n is the main set dimension) then the step is accepted, * otherwise the step is rejected and a attempt is made with a new\r\n\r\n * stepsize.</p>\r\n\r\n *\r\n\r\n * @param <T> the type of the field elements\r\n\r\n *\r\n\r\n */\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\nclass Adaptive_Stepsize_Field_Integrator\r\n\r\n    extends Abstract_Field_Integrator<T> \r\n\r\n{\r\n\r\nprivate:\r\n\r\n    /** Helper for step size control. */\r\n\r\n    Stepsize_Helper my_stepsize_helper;\r\n\r\n\r\n\r\nprotected:\r\n\r\n    /** Get the stepsize helper.\r\n\r\n     * @return stepsize helper\r\n\r\n     * @since 2.0\r\n\r\n     */\r\n\r\n    Stepsize_Helper get_step_size_helper()\r\n\r\n    {\r\n\r\n        return my_stepsize_helper;\r\n\r\n    }\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n    //override\r\n\r\n    void sanity_checks(const FieldODE_State<T> initial_state, const T t)\r\n\r\n\r\n\r\n    {\r\n\r\n        super.sanity_checks(initial_state, t);\r\n\r\n        my_stepsize_helper.set_main_set_dimension(initial_state.get_primary_state_dimension());\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Reset internal state to dummy values. */\r\n\r\n    void reset_internal_state()\r\n\r\n    {\r\n\r\n        set_step_start(null);\r\n\r\n        set_step_size(get_field().get_zero().add(stepsize_helper.get_dummy_stepsize()));\r\n\r\n    }\r\n\r\n\r\n\r\npublic:\r\n\r\n\r\n\r\n    /** Build an integrator with the given stepsize bounds.\r\n\r\n     * The default step handler does nothing.\r\n\r\n     * @param field field to which the time and state vector elements belong\r\n\r\n     * @param name name of the method\r\n\r\n     * @param min_step minimal step (sign is irrelevant, regardless of\r\n\r\n     * integration direction, forward or backward), the last step can\r\n\r\n     * be smaller than this\r\n\r\n     * @param max_step maximal step (sign is irrelevant, regardless of\r\n\r\n     * integration direction, forward or backward), the last step can\r\n\r\n     * be smaller than this\r\n\r\n     * @param scal_absolute_tolerance allowed absolute error\r\n\r\n     * @param scal_relative_tolerance allowed relative error\r\n\r\n     */\r\n\r\n    Adaptive_Stepsize_Field_Integrator(const Field<T> field, const std::string name, const double min_step, const double max_step, const double scal_absolute_tolerance, const double scal_relative_tolerance) \r\n\r\n    {\r\n\r\n        super(field, name);\r\n\r\n        my_stepsize_helper = Stepsize_Helper(min_step, max_step, scal_absolute_tolerance, scal_relative_tolerance);\r\n\r\n        reset_internal_state();\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Build an integrator with the given stepsize bounds.\r\n\r\n     * The default step handler does nothing.\r\n\r\n     * @param field field to which the time and state vector elements belong\r\n\r\n     * @param name name of the method\r\n\r\n     * @param min_step minimal step (sign is irrelevant, regardless of\r\n\r\n     * integration direction, forward or backward), the last step can\r\n\r\n     * be smaller than this\r\n\r\n     * @param max_step maximal step (sign is irrelevant, regardless of\r\n\r\n     * integration direction, forward or backward), the last step can\r\n\r\n     * be smaller than this\r\n\r\n     * @param vec_absolute_tolerance allowed absolute error\r\n\r\n     * @param vec_relative_tolerance allowed relative error\r\n\r\n     */\r\n\r\n    Adaptive_Stepsize_Field_Integrator(const Field<T> field, const std::string name, const double min_step, const double max_step, const std::vector<double>& vec_absolute_tolerance, const std::vector<double>& vec_relative_tolerance) \r\n\r\n    {\r\n\r\n        super(field, name);\r\n\r\n        my_stepsize_helper = Stepsize_Helper(min_step, max_step, vec_absolute_tolerance, vec_relative_tolerance);\r\n\r\n        reset_internal_state();\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Set the adaptive step size control parameters.\r\n\r\n     * <p>\r\n\r\n     * A side effect of this method is to also reset the initial\r\n\r\n     * step so it will be automatically computed by the integrator\r\n\r\n     * if {@link #set_initial_step_sizestatic_cast<double>( set_initial_step_size}\r\n\r\n     * is not called by the user.\r\n\r\n     * </p>\r\n\r\n     * @param minimal_step minimal step (must be positive even for backward\r\n\r\n     * integration), the last step can be smaller than this\r\n\r\n     * @param maximal_step maximal step (must be positive even for backward\r\n\r\n     * integration)\r\n\r\n     * @param absolute_tolerance allowed absolute error\r\n\r\n     * @param relative_tolerance allowed relative error\r\n\r\n     */\r\n\r\n    void set_step_size_control(const double minimal_step, const double maximal_step, const double& absolute_tolerance, const double relative_tolerance) \r\n\r\n    {\r\n\r\n        my_stepsize_helper = Stepsize_Helper(minimal_step, maximal_step, absolute_tolerance, relative_tolerance);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Set the adaptive step size control parameters.\r\n\r\n     * <p>\r\n\r\n     * A side effect of this method is to also reset the initial\r\n\r\n     * step so it will be automatically computed by the integrator\r\n\r\n     * if {@link #set_initial_step_sizestatic_cast<double>( set_initial_step_size}\r\n\r\n     * is not called by the user.\r\n\r\n     * </p>\r\n\r\n     * @param minimal_step minimal step (must be positive even for backward\r\n\r\n     * integration), the last step can be smaller than this\r\n\r\n     * @param maximal_step maximal step (must be positive even for backward\r\n\r\n     * integration)\r\n\r\n     * @param absolute_tolerance allowed absolute error\r\n\r\n     * @param relative_tolerance allowed relative error\r\n\r\n     */\r\n\r\n    void set_step_size_control(const double minimal_step, const double maximal_step, const std::vector<double> absolute_tolerance, const std::vector<double> relative_tolerance) \r\n\r\n    {\r\n\r\n        my_stepsize_helper = Stepsize_Helper(minimal_step, maximal_step, absolute_tolerance, relative_tolerance);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Set the initial step size.\r\n\r\n     * <p>This method allows the user to specify an initial positive\r\n\r\n     * step size instead of letting the integrator guess it by\r\n\r\n     * itself. If this method is not called before integration is\r\n\r\n     * started, the initial step size will be estimated by the\r\n\r\n     * integrator.</p>\r\n\r\n     * @param initial_step_size initial step size to use (must be positive even\r\n\r\n     * for backward integration ; providing a negative value or a value\r\n\r\n     * outside of the min/max step interval will lead the integrator to\r\n\r\n     * ignore the value and compute the initial step size by itself)\r\n\r\n     */\r\n\r\n    void set_initial_step_size(const double initial_step_size) \r\n\r\n    {\r\n\r\n        my_stepsize_helper.set_initial_step_size(initial_step_size);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Initialize the integration step.\r\n\r\n     * @param forward forward integration indicator\r\n\r\n     * @param order order of the method\r\n\r\n     * @param scale scaling vector for the state vector (can be shorter than state vector)\r\n\r\n     * @param state0 state at integration start time\r\n\r\n     * @param mapper mapper for all the equations\r\n\r\n     * @return first integration step\r\n\r\n     * @exception Math_Illegal_State_Exception if the number of functions evaluations is exceeded\r\n\r\n     * @exception  if arrays dimensions do not match equations settings\r\n\r\n     */\r\n\r\n    double initialize_step(const bool forward, const int order, const std::vector<T> scale, const Field_ODE_State_And_Derivative<T> state0, const FieldEquations_mapper<T> mapper)\r\n\r\n    {\r\n\r\n        if (my_stepsize_helper.get_initial_step() > 0) \r\n\r\n        {\r\n\r\n            // use the user provided value\r\n\r\n            return forward\r\n\r\n                ? my_stepsize_helper.get_initial_step() \r\n\r\n                : -stepsize_helper.get_initial_step();\r\n\r\n        }\r\n\r\n\r\n\r\n        // very rough first guess : h = 0.01 * ||y/scale|| / ||y'/scale||\r\n\r\n        // this guess will be used to perform an Euler step\r\n\r\n        const std::vector<T> y0    = state0.get_complete_state();\r\n\r\n        const std::vector<T> y_dot_0 = state0.get_complete_derivative();\r\n\r\n        double y_on_scale_2     = 0;\r\n\r\n        double y_dot_on_scale_2  = 0;\r\n\r\n        for (int j{}; j < scale.size(); ++j) \r\n\r\n        {\r\n\r\n            const double ratio    = y0[j].get_real() / scale[j].get_real();\r\n\r\n            y_on_scale_2            += ratio * ratio;\r\n\r\n            const double ratio_dot = y_dot_0[j].get_real() / scale[j].get_real();\r\n\r\n            y_dot_on_scale_2         += ratio_dot * ratio_dot;\r\n\r\n        }\r\n\r\n\r\n\r\n        double h = ((y_on_scale_2 < 1.0e-10) || (y_dot_on_scale_2 < 1.0e-10)) ?\r\n\r\n                   1.0e-6 : (0.01 * std::sqrt(y_on_scale_2 / y_dot_on_scale_2));\r\n\r\n        if (! forward) \r\n\r\n        {\r\n\r\n            h = -h;\r\n\r\n        }\r\n\r\n\r\n\r\n        // perform an Euler step using the preceding rough guess\r\n\r\n        const std::vector<T> y1 = Math_Arrays::build_array(get_field(), y0.size());\r\n\r\n        for (int j{}; j < y0.size(); ++j) \r\n\r\n        {\r\n\r\n            y1[j] = y0[j].add(y_dot_0[j].multiply(h));\r\n\r\n        }\r\n\r\n        const std::vector<T> y_dot1 = compute_derivatives(state0.get_time().add(h), y1);\r\n\r\n\r\n\r\n        // estimate the second derivative of the solution\r\n\r\n        double y_d_dot_on_scale{};\r\n\r\n        for (int j{}; j < scale.size(); ++j) \r\n\r\n        {\r\n\r\n            const double ratio_dot_dot = (y_dot1[j].get_real() - y_dot_0[j].get_real()) / scale[j].get_real();\r\n\r\n            y_d_dot_on_scale += ratio_dot_dot * ratio_dot_dot;\r\n\r\n        }\r\n\r\n        y_d_dot_on_scale = std::sqrt(y_d_dot_on_scale) / h;\r\n\r\n\r\n\r\n        // step size is computed such that\r\n\r\n        // h^order * max (||y'/tol||, ||y''/tol||) = 0.01\r\n\r\n        const double max_inv2 = std::max(std::sqrt(y_dot_on_scale_2), y_d_dot_on_scale);\r\n\r\n        const double h1 = (max_inv2 < 1.0e-15)\r\n\r\n            ? std::max(1.0e-6, 0.001 * std::abs(h))\r\n\r\n            : std::pow(0.01 / max_inv2, 1.0 / order);\r\n\r\n\r\n\r\n        h = std::min(100.0 * std::abs(h), h1);\r\n\r\n        h = std::max(h, 1.0e-12 * std::abs(state0.get_time().get_real()));  // avoids cancellation when computing t1 - t0\r\n\r\n        if (h < get_min_step()) \r\n\r\n        {\r\n\r\n            h = get_min_step();\r\n\r\n        }\r\n\r\n        if (h > get_max_step()) \r\n\r\n        {\r\n\r\n            h = get_max_step();\r\n\r\n        }\r\n\r\n\r\n\r\n        if (! forward) \r\n\r\n        {\r\n\r\n            h = -h;\r\n\r\n        }\r\n\r\n\r\n\r\n        return h;\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get the minimal step.\r\n\r\n     * @return minimal step\r\n\r\n     */\r\n\r\n    double get_min_step() \r\n\r\n    {\r\n\r\n        returnmy_stepsize_helper.get_min_step();\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get the maximal step.\r\n\r\n     * @return maximal step\r\n\r\n     */\r\n\r\n    double get_max_step() \r\n\r\n    {\r\n\r\n        returnmy_stepsize_helper.get_max_step();\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n