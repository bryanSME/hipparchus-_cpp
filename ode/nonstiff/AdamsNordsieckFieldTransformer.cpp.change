/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n\r\n\r\n//package org.hipparchus.ode.nonstiff;\r\n\r\n\r\n\r\n//import java.util.Arrays;\r\n\r\n//import java.util.Hash_Map;\r\n\r\n//import java.util.Map;\r\n\r\n\r\n\r\n//import org.hipparchus.Field;\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n//import org.hipparchus.linear.Array2DRowField_Matrix;\r\n\r\n//import org.hipparchus.linear.ArrayField_Vector;\r\n\r\n//import org.hipparchus.linear.FieldDecomposition_Solver;\r\n\r\n//import org.hipparchus.linear.FieldLU_Decomposition;\r\n\r\n//import org.hipparchus.linear.Field_Matrix;\r\n\r\n//import org.hipparchus.util.Math_Arrays;\r\n\r\n\r\n\r\n/** Transformer to Nordsieck vectors for Adams integrators.\r\n\r\n * <p>This class is used by {@link AdamsBashforth_integrator Adams-Bashforth} and\r\n\r\n * {@link Adams_moultonIntegrator Adams-Moulton} integrators to convert between\r\n\r\n * classical representation with several previous first derivatives and Nordsieck\r\n\r\n * representation with higher order scaled derivatives.</p>\r\n\r\n *\r\n\r\n * <p>We define scaled derivatives s<sub>i</sub>(n) at step n as:\r\n\r\n * <pre>\r\n\r\n * s<sub>1</sub>(n) = h y'<sub>n</sub> for first derivative\r\n\r\n * s<sub>2</sub>(n) = h<sup>2</sup>/2 y''<sub>n</sub> for second derivative\r\n\r\n * s<sub>3</sub>(n) = h<sup>3</sup>/6 y'''<sub>n</sub> for third derivative\r\n\r\n * ...\r\n\r\n * s<sub>k</sub>(n) = h<sup>k</sup>/k! y<sup>(k)</sup><sub>n</sub> for k<sup>th</sup> derivative\r\n\r\n * </pre></p>\r\n\r\n *\r\n\r\n * <p>With the previous definition, the classical representation of multistep methods\r\n\r\n * uses first derivatives only, i.e. it handles y<sub>n</sub>, s<sub>1</sub>(n) and\r\n\r\n * q<sub>n</sub> where q<sub>n</sub> is defined as:\r\n\r\n * <pre>\r\n\r\n *   q<sub>n</sub> = [ s<sub>1</sub>(n-1) s<sub>1</sub>(n-2) ... s<sub>1</sub>(n-(k-1)) ]<sup>T</sup>\r\n\r\n * </pre>\r\n\r\n * (we omit the k index in the notation for clarity).</p>\r\n\r\n *\r\n\r\n * <p>Another possible representation uses the Nordsieck vector with\r\n\r\n * higher degrees scaled derivatives all taken at the same step, i.e it handles y<sub>n</sub>, * s<sub>1</sub>(n) and r<sub>n</sub>) where r<sub>n</sub> is defined as:\r\n\r\n * <pre>\r\n\r\n * r<sub>n</sub> = [ s<sub>2</sub>(n), s<sub>3</sub>(n) ... s<sub>k</sub>(n) ]<sup>T</sup>\r\n\r\n * </pre>\r\n\r\n * (here again we omit the k index in the notation for clarity)\r\n\r\n * </p>\r\n\r\n *\r\n\r\n * <p>Taylor series formulas show that for any index offset i, s<sub>1</sub>(n-i) can be\r\n\r\n * computed from s<sub>1</sub>(n), s<sub>2</sub>(n) ... s<sub>k</sub>(n), the formula being exact\r\n\r\n * for degree k polynomials.\r\n\r\n * <pre>\r\n\r\n * s<sub>1</sub>(n-i) = s<sub>1</sub>(n) + &sum;<sub>j&gt;0</sub> (j+1) (-i)<sup>j</sup> s<sub>j+1</sub>(n)\r\n\r\n * </pre>\r\n\r\n * The previous formula can be used with several values for i to compute the transform between\r\n\r\n * classical representation and Nordsieck vector at step end. The transform between r<sub>n</sub>\r\n\r\n * and q<sub>n</sub> resulting from the Taylor series formulas above is:\r\n\r\n * <pre>\r\n\r\n * q<sub>n</sub> = s<sub>1</sub>(n) u + P r<sub>n</sub>\r\n\r\n * </pre>\r\n\r\n * where u is the [ 1 1 ... 1 ]<sup>T</sup> vector and P is the (k-1)&times;(k-1) matrix built\r\n\r\n * with the (j+1) (-i)<sup>j</sup> terms with i being the row number starting from 1 and j being\r\n\r\n * the column number starting from 1:\r\n\r\n * <pre>\r\n\r\n *        [  -2   3   -4    5  ... ]\r\n\r\n *        [  -4  12  -32   80  ... ]\r\n\r\n *   P =  [  -6  27 -108  405  ... ]\r\n\r\n *        [  -8  48 -256 1280  ... ]\r\n\r\n *        [          ...           ]\r\n\r\n * </pre></p>\r\n\r\n *\r\n\r\n * <p>Changing -i into +i in the formula above can be used to compute a similar transform between\r\n\r\n * classical representation and Nordsieck vector at step start. The resulting matrix is simply\r\n\r\n * the absolute value of matrix P.</p>\r\n\r\n *\r\n\r\n * <p>For {@link AdamsBashforth_integrator Adams-Bashforth} method, the Nordsieck vector\r\n\r\n * at step n+1 is computed from the Nordsieck vector at step n as follows:\r\n\r\n * <ul>\r\n\r\n *   <li>y<sub>n+1</sub> = y<sub>n</sub> + s<sub>1</sub>(n) + u<sup>T</sup> r<sub>n</sub></li>\r\n\r\n *   <li>s<sub>1</sub>(n+1) = h f(t<sub>n+1</sub>, y<sub>n+1</sub>)</li>\r\n\r\n *   <li>r<sub>n+1</sub> = (s<sub>1</sub>(n) - s<sub>1</sub>(n+1)) P<sup>-1</sup> u + P<sup>-1</sup> A P r<sub>n</sub></li>\r\n\r\n * </ul>\r\n\r\n * where A is a rows shifting matrix (the lower left part is an identity matrix):\r\n\r\n * <pre>\r\n\r\n *        [ 0 0   ...  0 0 | 0 ]\r\n\r\n *        [ ---------------+---]\r\n\r\n *        [ 1 0   ...  0 0 | 0 ]\r\n\r\n *    A = [ 0 1   ...  0 0 | 0 ]\r\n\r\n *        [       ...      | 0 ]\r\n\r\n *        [ 0 0   ...  1 0 | 0 ]\r\n\r\n *        [ 0 0   ...  0 1 | 0 ]\r\n\r\n * </pre></p>\r\n\r\n *\r\n\r\n * <p>For {@link Adams_moultonIntegrator Adams-Moulton} method, the predicted Nordsieck vector\r\n\r\n * at step n+1 is computed from the Nordsieck vector at step n as follows:\r\n\r\n * <ul>\r\n\r\n *   <li>Y<sub>n+1</sub> = y<sub>n</sub> + s<sub>1</sub>(n) + u<sup>T</sup> r<sub>n</sub></li>\r\n\r\n *   <li>S<sub>1</sub>(n+1) = h f(t<sub>n+1</sub>, Y<sub>n+1</sub>)</li>\r\n\r\n *   <li>R<sub>n+1</sub> = (s<sub>1</sub>(n) - s<sub>1</sub>(n+1)) P<sup>-1</sup> u + P<sup>-1</sup> A P r<sub>n</sub></li>\r\n\r\n * </ul>\r\n\r\n * From this predicted vector, the corrected vector is computed as follows:\r\n\r\n * <ul>\r\n\r\n *   <li>y<sub>n+1</sub> = y<sub>n</sub> + S<sub>1</sub>(n+1) + [ -1 +1 -1 +1 ... &plusmn;1 ] r<sub>n+1</sub></li>\r\n\r\n *   <li>s<sub>1</sub>(n+1) = h f(t<sub>n+1</sub>, y<sub>n+1</sub>)</li>\r\n\r\n *   <li>r<sub>n+1</sub> = R<sub>n+1</sub> + (s<sub>1</sub>(n+1) - S<sub>1</sub>(n+1)) P<sup>-1</sup> u</li>\r\n\r\n * </ul>\r\n\r\n * where the upper case Y<sub>n+1</sub>, S<sub>1</sub>(n+1) and R<sub>n+1</sub> represent the\r\n\r\n * predicted states whereas the lower case y<sub>n+1</sub>, s<sub>n+1</sub> and r<sub>n+1</sub>\r\n\r\n * represent the corrected states.</p>\r\n\r\n *\r\n\r\n * <p>We observe that both methods use similar update formulas. In both cases a P<sup>-1</sup>u\r\n\r\n * vector and a P<sup>-1</sup> A P matrix are used that do not depend on the state, * they only depend on k. This class handles these transformations.</p>\r\n\r\n *\r\n\r\n * @param <T> the type of the field elements\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\nclass Adams_Nordsieck_Field_Transformer \r\n\r\n{\r\n\r\n\r\n\r\n    /** Cache for already computed coefficients. */\r\n\r\n    private static const Map<Integer, Map<Field<? extends Calculus_Field_Element<?>>, Adams_Nordsieck_Field_Transformer<? extends Calculus_Field_Element<?>>>> CACHE = Hash_Map<>();\r\n\r\n\r\n\r\n    /** Field to which the time and state vector elements belong. */\r\n\r\n    private const Field<T> field;\r\n\r\n\r\n\r\n    /** Update matrix for the higher order derivatives h<sup>2</sup>/2 y'', h<sup>3</sup>/6 y''' ... */\r\n\r\n    private const Array2DRowField_Matrix<T> update;\r\n\r\n\r\n\r\n    /** Update coefficients of the higher order derivatives wrt y'. */\r\n\r\n    private const std::vector<T> c1;\r\n\r\n\r\n\r\n    /** Simple constructor.\r\n\r\n     * @param field field to which the time and state vector elements belong\r\n\r\n     * @param n number of steps of the multistep method\r\n\r\n     * (excluding the one being computed)\r\n\r\n     */\r\n\r\n    private Adams_Nordsieck_Field_Transformer(const Field<T> field, const int& n) \r\n\r\n    {\r\n\r\n\r\n\r\n        this.field = field;\r\n\r\n        const int rows = n - 1;\r\n\r\n\r\n\r\n        // compute coefficients\r\n\r\n        Field_Matrix<T> big_p = build_p(rows);\r\n\r\n        FieldDecomposition_Solver<T> p_solver =\r\n\r\n            FieldLU_Decomposition<T>(big_p).get_solver();\r\n\r\n\r\n\r\n        std::vector<T> u = Math_Arrays::build_array(field, rows);\r\n\r\n        Arrays.fill(u, field.get_one());\r\n\r\n        c1 = p_solver.solve(new ArrayField_Vector<T>(u, false)).to_array();\r\n\r\n\r\n\r\n        // update coefficients are computed by combining transform from\r\n\r\n        // Nordsieck to multistep, then shifting rows to represent step advance\r\n\r\n        // then applying inverse transform\r\n\r\n        std::vector<std::vector<T>> shifted_p = big_p.get_data();\r\n\r\n        for (int i = shifted_p.size() - 1; i > 0; --i) \r\n\r\n        {\r\n\r\n            // shift rows\r\n\r\n            shifted_p[i] = shifted_p[i - 1];\r\n\r\n        }\r\n\r\n        shifted_p[0] = Math_Arrays::build_array(field, rows);\r\n\r\n        Arrays.fill(shifted_p[0], field.get_zero());\r\n\r\n        update = Array2DRowField_Matrix<>(p_solver.solve(new Array2DRowField_Matrix<T>(shifted_p, false)).get_data());\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get the Nordsieck transformer for a given field and number of steps.\r\n\r\n     * @param field field to which the time and state vector elements belong\r\n\r\n     * @param n_steps number of steps of the multistep method\r\n\r\n     * (excluding the one being computed)\r\n\r\n     * @return Nordsieck transformer for the specified field and number of steps\r\n\r\n     * @param <T> the type of the field elements\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n    public static  Adams_Nordsieck_Field_Transformer<T> // NOPMD - PMD false positive\r\n\r\n    get_instance(const Field<T> field, const int& n_steps) \r\n\r\n    {\r\n\r\n        synchronized(CACHE) \r\n\r\n        {\r\n\r\n            Map<Field<? extends Calculus_Field_Element<?>>, Adams_Nordsieck_Field_Transformer<? extends Calculus_Field_Element<?>>> map = CACHE.get(n_steps);\r\n\r\n            if (map == null) \r\n\r\n            {\r\n\r\n                map = Hash_Map<>();\r\n\r\n                CACHE.put(n_steps, map);\r\n\r\n            }\r\n\r\n            //@Suppress_Warnings("unchecked")\r\n\r\n            Adams_Nordsieck_Field_Transformer<T> t = (Adams_Nordsieck_Field_Transformer<T>) map.get(field);\r\n\r\n            if (t == null) \r\n\r\n            {\r\n\r\n                t = Adams_Nordsieck_Field_Transformer<>(field, n_steps);\r\n\r\n                map.put(field, t);\r\n\r\n            }\r\n\r\n            return t;\r\n\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Build the P matrix.\r\n\r\n     * <p>The P matrix general terms are shifted (j+1) (-i)<sup>j</sup> terms\r\n\r\n     * with i being the row number starting from 1 and j being the column\r\n\r\n     * number starting from 1:\r\n\r\n     * <pre>\r\n\r\n     *        [  -2   3   -4    5  ... ]\r\n\r\n     *        [  -4  12  -32   80  ... ]\r\n\r\n     *   P =  [  -6  27 -108  405  ... ]\r\n\r\n     *        [  -8  48 -256 1280  ... ]\r\n\r\n     *        [          ...           ]\r\n\r\n     * </pre></p>\r\n\r\n     * @param rows number of rows of the matrix\r\n\r\n     * @return P matrix\r\n\r\n     */\r\n\r\n    private Field_Matrix<T> build_p(const int rows) \r\n\r\n    {\r\n\r\n\r\n\r\n        const std::vector<std::vector<T>> p_data = Math_Arrays::build_array(field, rows, rows);\r\n\r\n\r\n\r\n        for (int i{ 1 }; i <= p_data.size(); ++i) \r\n\r\n        {\r\n\r\n            // build the P matrix elements from Taylor series formulas\r\n\r\n            const std::vector<T> pI = p_data[i - 1];\r\n\r\n            const int factor = -i;\r\n\r\n            T aj = field.get_zero().add(factor);\r\n\r\n            for (int j{ 1 }; j <= pI.size(); ++j) \r\n\r\n            {\r\n\r\n                pI[j - 1] = aj.multiply(j + 1);\r\n\r\n                aj = aj.multiply(factor);\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        return Array2DRowField_Matrix<T>(p_data, false);\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Initialize the high order scaled derivatives at step start.\r\n\r\n     * @param h step size to use for scaling\r\n\r\n     * @param t first steps times\r\n\r\n     * @param y first steps states\r\n\r\n     * @param y_dot first steps derivatives\r\n\r\n     * @return Nordieck vector at start of first step (h<sup>2</sup>/2 y''<sub>n</sub>, * h<sup>3</sup>/6 y'''<sub>n</sub> ... h<sup>k</sup>/k! y<sup>(k)</sup><sub>n</sub>)\r\n\r\n     */\r\n\r\n\r\n\r\n    public Array2DRowField_Matrix<T> initialize_high_order_derivatives(const T h, const std::vector<T> t, const std::vector<std::vector<T>> y, const std::vector<std::vector<T>> y_dot) \r\n\r\n    {\r\n\r\n\r\n\r\n        // using Taylor series with di = ti - t0, we get:\r\n\r\n        //  y(ti)  - y(t0)  - di y'(t0) =   di^2 / h^2 s2 + ... +   di^k     / h^k sk + O(h^k)\r\n\r\n        //  y'(ti) - y'(t0)             = 2 di   / h^2 s2 + ... + k di^(k-1) / h^k sk + O(h^(k-1))\r\n\r\n        // we write these relations for i = 1 to i= 1+n/2 as a set of n + 2 linear\r\n\r\n        // equations depending on the Nordsieck vector [s2 ... sk rk], so s2 to sk correspond\r\n\r\n        // to the appropriately truncated Taylor expansion, and rk is the Taylor remainder.\r\n\r\n        // The goal is to have s2 to sk as accurate as possible considering the fact the sum is\r\n\r\n        // truncated and we don't want the error terms to be included in s2 ... sk, so we need\r\n\r\n        // to solve also for the remainder\r\n\r\n        const std::vector<std::vector<T>> a     = Math_Arrays::build_array(field, c1.size() + 1, c1.size() + 1);\r\n\r\n        const std::vector<std::vector<T>> b     = Math_Arrays::build_array(field, c1.size() + 1, y[0].size());\r\n\r\n        const std::vector<T>   y0    = y[0];\r\n\r\n        const std::vector<T>   y_dot_0 = y_dot[0];\r\n\r\n        for (int i{ 1 }; i < y.size(); ++i) \r\n\r\n        {\r\n\r\n\r\n\r\n            const T di    = t[i].subtract(t[0]);\r\n\r\n            const T ratio = di.divide(h);\r\n\r\n            T dik_m1_ohk    = h.reciprocal();\r\n\r\n\r\n\r\n            // linear coefficients of equations\r\n\r\n            // y(ti) - y(t0) - di y'(t0) and y'(ti) - y'(t0)\r\n\r\n            const std::vector<T> aI    = a[2 * i - 2];\r\n\r\n            const std::vector<T> a_dot_i = (2 * i - 1) < a.size() ? a[2 * i - 1] : null;\r\n\r\n            for (int j{}; j < aI.size(); ++j) \r\n\r\n            {\r\n\r\n                dik_m1_ohk = dik_m1_ohk.multiply(ratio);\r\n\r\n                aI[j]    = di.multiply(dik_m1_ohk);\r\n\r\n                if (a_dot_i != null) \r\n\r\n                {\r\n\r\n                    a_dot_i[j]  = dik_m1_ohk.multiply(j + 2);\r\n\r\n                }\r\n\r\n            }\r\n\r\n\r\n\r\n            // expected value of the previous equations\r\n\r\n            const std::vector<T> y_i    = y[i];\r\n\r\n            const std::vector<T> y_dot_i = y_dot[i];\r\n\r\n            const std::vector<T> bI    = b[2 * i - 2];\r\n\r\n            const std::vector<T> b_dot_i = (2 * i - 1) < b.size() ? b[2 * i - 1] : null;\r\n\r\n            for (int j{}; j < y_i.size(); ++j) \r\n\r\n            {\r\n\r\n                bI[j]    = y_i[j].subtract(y0[j]).subtract(di.multiply(y_dot_0[j]));\r\n\r\n                if (b_dot_i != null) \r\n\r\n                {\r\n\r\n                    b_dot_i[j] = y_dot_i[j].subtract(y_dot_0[j]);\r\n\r\n                }\r\n\r\n            }\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n        // solve the linear system to get the best estimate of the Nordsieck vector [s2 ... sk], // with the additional terms s(k+1) and c grabbing the parts after the truncated Taylor expansion\r\n\r\n        const FieldLU_Decomposition<T> decomposition = FieldLU_Decomposition<>(new Array2DRowField_Matrix<T>(a, false));\r\n\r\n        const Field_Matrix<T> x = decomposition.get_solver().solve(new Array2DRowField_Matrix<T>(b, false));\r\n\r\n\r\n\r\n        // extract just the Nordsieck vector [s2 ... sk]\r\n\r\n        const Array2DRowField_Matrix<T> truncated_x =\r\n\r\n                        Array2DRowField_Matrix<>(field, x.get_row_dimension() - 1, x.get_column_dimension());\r\n\r\n        for (int i{}; i < truncated_x.get_row_dimension(); ++i) \r\n\r\n        {\r\n\r\n            for (int j{}; j < truncated_x.get_column_dimension(); ++j) \r\n\r\n            {\r\n\r\n                truncated_x.set_entry(i, j, x.get_entry(i, j));\r\n\r\n            }\r\n\r\n        }\r\n\r\n        return truncated_x;\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Update the high order scaled derivatives for Adams integrators (phase 1).\r\n\r\n     * <p>The complete update of high order derivatives has a form similar to:\r\n\r\n     * <pre>\r\n\r\n     * r<sub>n+1</sub> = (s<sub>1</sub>(n) - s<sub>1</sub>(n+1)) P<sup>-1</sup> u + P<sup>-1</sup> A P r<sub>n</sub>\r\n\r\n     * </pre>\r\n\r\n     * this method computes the P<sup>-1</sup> A P r<sub>n</sub> part.</p>\r\n\r\n     * @param high_order high order scaled derivatives\r\n\r\n     * (h<sup>2</sup>/2 y'', ... h<sup>k</sup>/k! y(k))\r\n\r\n     * @return updated high order derivatives\r\n\r\n     * @see #update_high_order_derivatives_phase_2(Calculus_Field_Element[], Calculus_Field_Element[], Array2DRowField_Matrix)\r\n\r\n     */\r\n\r\n    public Array2DRowField_Matrix<T> update_high_order_derivatives_phase_1(const Array2DRowField_Matrix<T> high_order) \r\n\r\n    {\r\n\r\n        return update.multiply(high_order);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Update the high order scaled derivatives Adams integrators (phase 2).\r\n\r\n     * <p>The complete update of high order derivatives has a form similar to:\r\n\r\n     * <pre>\r\n\r\n     * r<sub>n+1</sub> = (s<sub>1</sub>(n) - s<sub>1</sub>(n+1)) P<sup>-1</sup> u + P<sup>-1</sup> A P r<sub>n</sub>\r\n\r\n     * </pre>\r\n\r\n     * this method computes the (s<sub>1</sub>(n) - s<sub>1</sub>(n+1)) P<sup>-1</sup> u part.</p>\r\n\r\n     * <p>Phase 1 of the update must already have been performed.</p>\r\n\r\n     * @param start first order scaled derivatives at step start\r\n\r\n     * @param end first order scaled derivatives at step end\r\n\r\n     * @param high_order high order scaled derivatives, will be modified\r\n\r\n     * (h<sup>2</sup>/2 y'', ... h<sup>k</sup>/k! y(k))\r\n\r\n     * @see #update_high_order_derivatives_phase_1(Array2DRowField_Matrix)\r\n\r\n     */\r\n\r\n    public void update_high_order_derivatives_phase_2(const std::vector<T> start, const std::vector<T> end, const Array2DRowField_Matrix<T> high_order) \r\n\r\n    {\r\n\r\n        const std::vector<std::vector<T>> data = high_order.get_data_ref();\r\n\r\n        for (int i{}; i < data.size(); ++i) \r\n\r\n        {\r\n\r\n            const std::vector<T> data_i = data[i];\r\n\r\n            const T c1I = c1[i];\r\n\r\n            for (int j{}; j < data_i.size(); ++j) \r\n\r\n            {\r\n\r\n                data_i[j] = data_i[j].add(c1I.multiply(start[j].subtract(end[j])));\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n