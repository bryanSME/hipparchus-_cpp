/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n\r\n\r\n//package org.hipparchus.ode.nonstiff;\r\n\r\n\r\n\r\n//import java.util.Arrays;\r\n\r\n\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n//import org.hipparchus.linear.Array2DRowField_Matrix;\r\n\r\n//import org.hipparchus.ode.FieldEquations_mapper;\r\n\r\n//import org.hipparchus.ode.Field_ODE_State_And_Derivative;\r\n\r\n//import org.hipparchus.ode.sampling.AbstractFieldODE_StateInterpolator;\r\n\r\n//import org.hipparchus.util.Math_Arrays;\r\n\r\n\r\n\r\n/**\r\n\r\n * This class : an interpolator for Adams integrators using Nordsieck representation.\r\n\r\n *\r\n\r\n * <p>This interpolator computes dense output around the current point.\r\n\r\n * The interpolation equation is based on Taylor series formulas.\r\n\r\n *\r\n\r\n * @see Adams_Bashforth_Field_Integrator\r\n\r\n * @see Adams_moultonFieldIntegrator\r\n\r\n * @param <T> the type of the field elements\r\n\r\n */\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\nclass Adams_Field_State_Interpolator extends AbstractFieldODE_StateInterpolator<T> \r\n\r\n{\r\n\r\n\r\n\r\n    /** Step size used in the first scaled derivative and Nordsieck vector. */\r\n\r\n    private T scaling_h;\r\n\r\n\r\n\r\n    /** Reference state.\r\n\r\n     * <p>Sometimes, the reference state is the same as global_previous_state, * sometimes it is the same as global_current_state, so we use a separate\r\n\r\n     * field to avoid any confusion.\r\n\r\n     * </p>\r\n\r\n     */\r\n\r\n    private const Field_ODE_State_And_Derivative<T> reference;\r\n\r\n\r\n\r\n    /** First scaled derivative. */\r\n\r\n    private const std::vector<T> scaled;\r\n\r\n\r\n\r\n    /** Nordsieck vector. */\r\n\r\n    private const Array2DRowField_Matrix<T> nordsieck;\r\n\r\n\r\n\r\n    /** Simple constructor.\r\n\r\n     * @param step_size step size used in the scaled and Nordsieck arrays\r\n\r\n     * @param reference reference state from which Taylor expansion are estimated\r\n\r\n     * @param scaled first scaled derivative\r\n\r\n     * @param nordsieck Nordsieck vector\r\n\r\n     * @param is_forward integration direction indicator\r\n\r\n     * @param global_previous_state start of the global step\r\n\r\n     * @param global_current_state end of the global step\r\n\r\n     * @param equations_mapper mapper for ODE equations primary and secondary components\r\n\r\n     */\r\n\r\n    Adams_Field_State_Interpolator(const T step_size, const Field_ODE_State_And_Derivative<T> reference, const std::vector<T> scaled, const Array2DRowField_Matrix<T> nordsieck, const bool is_forward, const Field_ODE_State_And_Derivative<T> global_previous_state, const Field_ODE_State_And_Derivative<T> global_current_state, const FieldEquations_mapper<T> equations_mapper) \r\n\r\n    {\r\n\r\n        this(step_size, reference, scaled, nordsieck, is_forward, global_previous_state, global_current_state, global_previous_state, global_current_state, equations_mapper);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Simple constructor.\r\n\r\n     * @param step_size step size used in the scaled and Nordsieck arrays\r\n\r\n     * @param reference reference state from which Taylor expansion are estimated\r\n\r\n     * @param scaled first scaled derivative\r\n\r\n     * @param nordsieck Nordsieck vector\r\n\r\n     * @param is_forward integration direction indicator\r\n\r\n     * @param global_previous_state start of the global step\r\n\r\n     * @param global_current_state end of the global step\r\n\r\n     * @param soft_previous_state start of the restricted step\r\n\r\n     * @param soft_current_state end of the restricted step\r\n\r\n     * @param equations_mapper mapper for ODE equations primary and secondary components\r\n\r\n     */\r\n\r\n    private Adams_Field_State_Interpolator(const T step_size, const Field_ODE_State_And_Derivative<T> reference, const std::vector<T> scaled, const Array2DRowField_Matrix<T> nordsieck, const bool is_forward, const Field_ODE_State_And_Derivative<T> global_previous_state, const Field_ODE_State_And_Derivative<T> global_current_state, const Field_ODE_State_And_Derivative<T> soft_previous_state, const Field_ODE_State_And_Derivative<T> soft_current_state, const FieldEquations_mapper<T> equations_mapper) \r\n\r\n    {\r\n\r\n        super(is_forward, global_previous_state, global_current_state, soft_previous_state, soft_current_state, equations_mapper);\r\n\r\n        this.scaling_h  = step_size;\r\n\r\n        this.reference = reference;\r\n\r\n        this.scaled    = scaled.clone();\r\n\r\n        this.nordsieck = Array2DRowField_Matrix<>(nordsieck.get_data(), false);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Create a instance.\r\n\r\n     * @param new_forward integration direction indicator\r\n\r\n     * @param new_global_previous_state start of the global step\r\n\r\n     * @param new_global_current_state end of the global step\r\n\r\n     * @param new_soft_previous_state start of the restricted step\r\n\r\n     * @param new_soft_current_state end of the restricted step\r\n\r\n     * @param new_mapper equations mapper for the all equations\r\n\r\n     * @return a instance\r\n\r\n     */\r\n\r\n    //override\r\n\r\n    protected Adams_Field_State_Interpolator<T> create(bool new_forward, Field_ODE_State_And_Derivative<T> new_global_previous_state, Field_ODE_State_And_Derivative<T> new_global_current_state, Field_ODE_State_And_Derivative<T> new_soft_previous_state, Field_ODE_State_And_Derivative<T> new_soft_current_state, FieldEquations_mapper<T> new_mapper) \r\n\r\n    {\r\n\r\n        return Adams_Field_State_Interpolator<T>(scaling_h, reference, scaled, nordsieck, new_forward, new_global_previous_state, new_global_current_state, new_soft_previous_state, new_soft_current_state, new_mapper);\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get the first scaled derivative.\r\n\r\n     * @return first scaled derivative\r\n\r\n     */\r\n\r\n    public std::vector<T> get_scaled() \r\n\r\n    {\r\n\r\n        return scaled.clone();\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get the Nordsieck vector.\r\n\r\n     * @return Nordsieck vector\r\n\r\n     */\r\n\r\n    public Array2DRowField_Matrix<T> get_nordsieck() \r\n\r\n    {\r\n\r\n        return nordsieck;\r\n\r\n    }\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n    //override\r\n\r\n    protected Field_ODE_State_And_Derivative<T> compute_interpolated_state_and_derivatives(const FieldEquations_mapper<T> equations_mapper, const T time, const T theta, const T theta_h, const T one_minus_theta_h) \r\n\r\n    {\r\n\r\n        return taylor(equations_mapper, reference, time, scaling_h, scaled, nordsieck);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Estimate state by applying Taylor formula.\r\n\r\n     * @param equations_mapper mapper for ODE equations primary and secondary components\r\n\r\n     * @param reference reference state\r\n\r\n     * @param time time at which state must be estimated\r\n\r\n     * @param step_size step size used in the scaled and Nordsieck arrays\r\n\r\n     * @param scaled first scaled derivative\r\n\r\n     * @param nordsieck Nordsieck vector\r\n\r\n     * @return estimated state\r\n\r\n     * @param <S> the type of the field elements\r\n\r\n     */\r\n\r\n    public static <S extends Calculus_Field_Element<S>> Field_ODE_State_And_Derivative<S> taylor(const FieldEquations_mapper<S> equations_mapper, const Field_ODE_State_And_Derivative<S> reference, const S time, const S step_size, const S[] scaled, const Array2DRowField_Matrix<S> nordsieck) \r\n\r\n    {\r\n\r\n\r\n\r\n        const S x = time.subtract(reference.get_time());\r\n\r\n        const S normalized_abscissa = x.divide(step_size);\r\n\r\n\r\n\r\n        S[] state_variation = Math_Arrays::build_array(time.get_field(), scaled.size());\r\n\r\n        Arrays.fill(state_variation, time.get_field().get_zero());\r\n\r\n        S[] estimated_derivatives = Math_Arrays::build_array(time.get_field(), scaled.size());\r\n\r\n        Arrays.fill(estimated_derivatives, time.get_field().get_zero());\r\n\r\n\r\n\r\n        // apply Taylor formula from high order to low order, // for the sake of numerical accuracy\r\n\r\n        const S[][] n_data = nordsieck.get_data_ref();\r\n\r\n        for (int i = n_data.size() - 1; i >= 0; --i) \r\n\r\n        {\r\n\r\n            const int order = i + 2;\r\n\r\n            const S[] n_data_i = n_data[i];\r\n\r\n            const S power = normalized_abscissa.pow(order);\r\n\r\n            for (int j{}; j < n_data_i.size(); ++j) \r\n\r\n            {\r\n\r\n                const S d = n_data_i[j].multiply(power);\r\n\r\n                state_variation[j]          = state_variation[j].add(d);\r\n\r\n                estimated_derivatives[j] = estimated_derivatives[j].add(d.multiply(order));\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        S[] estimated_state = reference.get_complete_state();\r\n\r\n        for (int j{}; j < state_variation.size(); ++j) \r\n\r\n        {\r\n\r\n            state_variation[j] = state_variation[j].add(scaled[j].multiply(normalized_abscissa));\r\n\r\n            estimated_state[j] = estimated_state[j].add(state_variation[j]);\r\n\r\n            estimated_derivatives[j] =\r\n\r\n                estimated_derivatives[j].add(scaled[j].multiply(normalized_abscissa)).divide(x);\r\n\r\n        }\r\n\r\n\r\n\r\n        return equations_mapper.map_state_and_derivative(time, estimated_state, estimated_derivatives);\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n