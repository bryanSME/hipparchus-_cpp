/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n\r\n\r\n//package org.hipparchus.ode.nonstiff;\r\n\r\n\r\n\r\n//import org.hipparchus.Field;\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n//import org.hipparchus.exception.;\r\n\r\n//import org.hipparchus.exception.Math_Illegal_State_Exception;\r\n\r\n//import org.hipparchus.linear.Array2DRowField_Matrix;\r\n\r\n//import org.hipparchus.linear.Field_Matrix;\r\n\r\n//import org.hipparchus.ode.FieldEquations_mapper;\r\n\r\n//import org.hipparchus.ode.FieldExpandable_ODE;\r\n\r\n//import org.hipparchus.ode.FieldODE_State;\r\n\r\n//import org.hipparchus.ode.Field_ODE_State_And_Derivative;\r\n\r\n//import org.hipparchus.ode.Localized_ODE_Formats;\r\n\r\n//import org.hipparchus.ode.Multistep_Field_Integrator;\r\n\r\n//import org.hipparchus.util.Math_Arrays;\r\n\r\n\r\n\r\n\r\n\r\n/** Base class for {@link Adams_Bashforth_Field_Integrator Adams-Bashforth} and\r\n\r\n * {@link Adams_moultonFieldIntegrator Adams-Moulton} integrators.\r\n\r\n * @param <T> the type of the field elements\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\npublic virtual class Adams_Field_Integrator extends Multistep_Field_Integrator<T> \r\n\r\n{\r\n\r\n\r\n\r\n    /** Transformer. */\r\n\r\n    private const Adams_Nordsieck_Field_Transformer<T> transformer;\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Build an Adams integrator with the given order and step control parameters.\r\n\r\n     * @param field field to which the time and state vector elements belong\r\n\r\n     * @param name name of the method\r\n\r\n     * @param n_steps number of steps of the method excluding the one being computed\r\n\r\n     * @param order order of the method\r\n\r\n     * @param min_step minimal step (sign is irrelevant, regardless of\r\n\r\n     * integration direction, forward or backward), the last step can\r\n\r\n     * be smaller than this\r\n\r\n     * @param max_step maximal step (sign is irrelevant, regardless of\r\n\r\n     * integration direction, forward or backward), the last step can\r\n\r\n     * be smaller than this\r\n\r\n     * @param scal_absolute_tolerance allowed absolute error\r\n\r\n     * @param scal_relative_tolerance allowed relative error\r\n\r\n     * @exception  if order is 1 or less\r\n\r\n     */\r\n\r\n    public Adams_Field_Integrator(const Field<T> field, const std::string name, const int& n_steps, const int order, const double min_step, const double max_step, const double scal_absolute_tolerance, const double scal_relative_tolerance)\r\n\r\n         \r\n\r\n        {\r\n\r\n        super(field, name, n_steps, order, min_step, max_step, scal_absolute_tolerance, scal_relative_tolerance);\r\n\r\n        transformer = Adams_Nordsieck_Field_Transformer.get_instance(field, n_steps);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Build an Adams integrator with the given order and step control parameters.\r\n\r\n     * @param field field to which the time and state vector elements belong\r\n\r\n     * @param name name of the method\r\n\r\n     * @param n_steps number of steps of the method excluding the one being computed\r\n\r\n     * @param order order of the method\r\n\r\n     * @param min_step minimal step (sign is irrelevant, regardless of\r\n\r\n     * integration direction, forward or backward), the last step can\r\n\r\n     * be smaller than this\r\n\r\n     * @param max_step maximal step (sign is irrelevant, regardless of\r\n\r\n     * integration direction, forward or backward), the last step can\r\n\r\n     * be smaller than this\r\n\r\n     * @param vec_absolute_tolerance allowed absolute error\r\n\r\n     * @param vec_relative_tolerance allowed relative error\r\n\r\n     * @exception Illegal_Argument_Exception if order is 1 or less\r\n\r\n     */\r\n\r\n    public Adams_Field_Integrator(const Field<T> field, const std::string name, const int& n_steps, const int order, const double min_step, const double max_step, const std::vector<double>& vec_absolute_tolerance, const std::vector<double>& vec_relative_tolerance)\r\n\r\n        Illegal_Argument_Exception \r\n\r\n        {\r\n\r\n        super(field, name, n_steps, order, min_step, max_step, vec_absolute_tolerance, vec_relative_tolerance);\r\n\r\n        transformer = Adams_Nordsieck_Field_Transformer.get_instance(field, n_steps);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n    //override\r\n\r\n    public Field_ODE_State_And_Derivative<T> integrate(const FieldExpandable_ODE<T> equations, const FieldODE_State<T> initial_state, const T const_time)\r\n\r\n        , Math_Illegal_State_Exception \r\n\r\n        {\r\n\r\n\r\n\r\n        sanity_checks(initial_state, const_time);\r\n\r\n        set_step_start(init_integration(equations, initial_state, const_time));\r\n\r\n        const bool forward = const_time.subtract(initial_state.get_time()).get_real() > 0;\r\n\r\n\r\n\r\n        // compute the initial Nordsieck vector using the configured starter integrator\r\n\r\n        start(equations, get_step_start(), const_time);\r\n\r\n\r\n\r\n        // reuse the step that was chosen by the starter integrator\r\n\r\n        Field_ODE_State_And_Derivative<T> step_start = get_step_start();\r\n\r\n        Field_ODE_State_And_Derivative<T> step_end   =\r\n\r\n                        Adams_Field_State_Interpolator.taylor(equations.get_mapper(), step_start, step_start.get_time().add(get_step_size()), get_step_size(), scaled, nordsieck);\r\n\r\n\r\n\r\n        // main integration loop\r\n\r\n        set_is_last_step(false);\r\n\r\n        const std::vector<T> y = step_start.get_complete_state();\r\n\r\n        do \r\n\r\n        {\r\n\r\n\r\n\r\n            std::vector<T> predicted_y = null;\r\n\r\n            const std::vector<T> predicted_scaled = Math_Arrays::build_array(get_field(), y.size());\r\n\r\n            Array2DRowField_Matrix<T> predicted_nordsieck = null;\r\n\r\n            double error = 10;\r\n\r\n            while (error >= 1.0) \r\n\r\n            {\r\n\r\n\r\n\r\n                // predict a first estimate of the state at step end\r\n\r\n                predicted_y = step_end.get_complete_state();\r\n\r\n\r\n\r\n                // evaluate the derivative\r\n\r\n                const std::vector<T> y_dot = compute_derivatives(step_end.get_time(), predicted_y);\r\n\r\n\r\n\r\n                // predict Nordsieck vector at step end\r\n\r\n                for (int j{}; j < predicted_scaled.size(); ++j) \r\n\r\n                {\r\n\r\n                    predicted_scaled[j] = get_step_size().multiply(y_dot[j]);\r\n\r\n                }\r\n\r\n                predicted_nordsieck = update_high_order_derivatives_phase_1(nordsieck);\r\n\r\n                update_high_order_derivatives_phase_2(scaled, predicted_scaled, predicted_nordsieck);\r\n\r\n\r\n\r\n                // evaluate error\r\n\r\n                error = error_estimation(y, step_end.get_time(), predicted_y, predicted_scaled, predicted_nordsieck);\r\n\r\n                if (std::isnan(error)) \r\n\r\n                {\r\n\r\n                    throw Math_Illegal_State_Exception(Localized_ODE_Formats.NAN_APPEARING_DURING_INTEGRATION, step_end.get_time().get_real());\r\n\r\n                }\r\n\r\n\r\n\r\n                if (error >= 1.0) \r\n\r\n                {\r\n\r\n                    // reject the step and attempt to reduce error by stepsize control\r\n\r\n                    const double factor = compute_step_grow_shrink_factor(error);\r\n\r\n                    rescale(get_step_size_helper().filter_step(get_step_size().multiply(factor), forward, false));\r\n\r\n                    step_end = Adams_Field_State_Interpolator.taylor(equations.get_mapper(), get_step_start(), get_step_start().get_time().add(get_step_size()), get_step_size(), scaled, nordsieck);\r\n\r\n\r\n\r\n                }\r\n\r\n            }\r\n\r\n\r\n\r\n            const Adams_Field_State_Interpolator<T> interpolator =\r\n\r\n                            constize_step(get_step_size(), predicted_y, predicted_scaled, predicted_nordsieck, forward, get_step_start(), step_end, equations.get_mapper());\r\n\r\n\r\n\r\n            // discrete events handling\r\n\r\n            set_step_start(accept_step(interpolator, const_time));\r\n\r\n            scaled    = interpolator.get_scaled();\r\n\r\n            nordsieck = interpolator.get_nordsieck();\r\n\r\n\r\n\r\n            if (!is_last_step()) \r\n\r\n            {\r\n\r\n\r\n\r\n                if (reset_occurred()) \r\n\r\n                {\r\n\r\n\r\n\r\n                    // some events handler has triggered changes that\r\n\r\n                    // invalidate the derivatives, we need to restart from scratch\r\n\r\n                    start(equations, get_step_start(), const_time);\r\n\r\n\r\n\r\n                    const T  next_t      = get_step_start().get_time().add(get_step_size());\r\n\r\n                    const bool next_is_last = forward ?\r\n\r\n                                               next_t.subtract(const_time).get_real() >= 0 :\r\n\r\n                                               next_t.subtract(const_time).get_real() <= 0;\r\n\r\n                    const T h_new = next_is_last ? const_time.subtract(get_step_start().get_time()) : get_step_size();\r\n\r\n\r\n\r\n                    rescale(h_new);\r\n\r\n                    System.arraycopy(get_step_start().get_complete_state(), 0, y, 0, y.size());\r\n\r\n\r\n\r\n                }\r\n\r\nelse \r\n\r\n                {\r\n\r\n\r\n\r\n                    // stepsize control for next step\r\n\r\n                    const double  factor     = compute_step_grow_shrink_factor(error);\r\n\r\n                    const T       scaled_h    = get_step_size().multiply(factor);\r\n\r\n                    const T       next_t      = get_step_start().get_time().add(scaled_h);\r\n\r\n                    const bool next_is_last = forward ?\r\n\r\n                                               next_t.subtract(const_time).get_real() >= 0 :\r\n\r\n                                               next_t.subtract(const_time).get_real() <= 0;\r\n\r\n                    T h_new = get_step_size_helper().filter_step(scaled_h, forward, next_is_last);\r\n\r\n\r\n\r\n                    const T       filtered_next_t      = get_step_start().get_time().add(h_new);\r\n\r\n                    const bool filtered_next_is_last = forward ?\r\n\r\n                                                       filtered_next_t.subtract(const_time).get_real() >= 0 :\r\n\r\n                                                       filtered_next_t.subtract(const_time).get_real() <= 0;\r\n\r\n                    if (filtered_next_is_last) \r\n\r\n                    {\r\n\r\n                        h_new = const_time.subtract(get_step_start().get_time());\r\n\r\n                    }\r\n\r\n\r\n\r\n                    rescale(h_new);\r\n\r\n                    System.arraycopy(predicted_y, 0, y, 0, y.size());\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n                step_end = Adams_Field_State_Interpolator.taylor(equations.get_mapper(), get_step_start(), get_step_start().get_time().add(get_step_size()), get_step_size(), scaled, nordsieck);\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n        } while (!is_last_step());\r\n\r\n\r\n\r\n        const Field_ODE_State_And_Derivative<T> const_state = get_step_start();\r\n\r\n        set_step_start(null);\r\n\r\n        set_step_size(null);\r\n\r\n        return const_state;\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n    //override\r\n\r\n    protected Array2DRowField_Matrix<T> initialize_high_order_derivatives(const T h, const std::vector<T> t, const std::vector<std::vector<T>> y, const std::vector<std::vector<T>> y_dot) \r\n\r\n    {\r\n\r\n        return transformer.initialize_high_order_derivatives(h, t, y, y_dot);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Update the high order scaled derivatives for Adams integrators (phase 1).\r\n\r\n     * <p>The complete update of high order derivatives has a form similar to:\r\n\r\n     * <pre>\r\n\r\n     * r<sub>n+1</sub> = (s<sub>1</sub>(n) - s<sub>1</sub>(n+1)) P<sup>-1</sup> u + P<sup>-1</sup> A P r<sub>n</sub>\r\n\r\n     * </pre>\r\n\r\n     * this method computes the P<sup>-1</sup> A P r<sub>n</sub> part.</p>\r\n\r\n     * @param high_order high order scaled derivatives\r\n\r\n     * (h<sup>2</sup>/2 y'', ... h<sup>k</sup>/k! y(k))\r\n\r\n     * @return updated high order derivatives\r\n\r\n     * @see #update_high_order_derivatives_phase_2(Calculus_Field_Element[], Calculus_Field_Element[], Array2DRowField_Matrix)\r\n\r\n     */\r\n\r\n    public Array2DRowField_Matrix<T> update_high_order_derivatives_phase_1(const Array2DRowField_Matrix<T> high_order) \r\n\r\n    {\r\n\r\n        return transformer.update_high_order_derivatives_phase_1(high_order);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Update the high order scaled derivatives Adams integrators (phase 2).\r\n\r\n     * <p>The complete update of high order derivatives has a form similar to:\r\n\r\n     * <pre>\r\n\r\n     * r<sub>n+1</sub> = (s<sub>1</sub>(n) - s<sub>1</sub>(n+1)) P<sup>-1</sup> u + P<sup>-1</sup> A P r<sub>n</sub>\r\n\r\n     * </pre>\r\n\r\n     * this method computes the (s<sub>1</sub>(n) - s<sub>1</sub>(n+1)) P<sup>-1</sup> u part.</p>\r\n\r\n     * <p>Phase 1 of the update must already have been performed.</p>\r\n\r\n     * @param start first order scaled derivatives at step start\r\n\r\n     * @param end first order scaled derivatives at step end\r\n\r\n     * @param high_order high order scaled derivatives, will be modified\r\n\r\n     * (h<sup>2</sup>/2 y'', ... h<sup>k</sup>/k! y(k))\r\n\r\n     * @see #update_high_order_derivatives_phase_1(Array2DRowField_Matrix)\r\n\r\n     */\r\n\r\n    public void update_high_order_derivatives_phase_2(const std::vector<T> start, const std::vector<T> end, const Array2DRowField_Matrix<T> high_order) \r\n\r\n    {\r\n\r\n        transformer.update_high_order_derivatives_phase_2(start, end, high_order);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Estimate error.\r\n\r\n     * @param previous_state state vector at step start\r\n\r\n     * @param predicted_time time at step end\r\n\r\n     * @param predicted_state predicted state vector at step end\r\n\r\n     * @param predicted_scaled predicted value of the scaled derivatives at step end\r\n\r\n     * @param predicted_nordsieck predicted value of the Nordsieck vector at step end\r\n\r\n     * @return estimated normalized local discretization error\r\n\r\n     * @since 2.0\r\n\r\n     */\r\n\r\n    protected virtual double error_estimation(std::vector<T> previous_state, T predicted_time, std::vector<T> predicted_state, std::vector<T> predicted_scaled, Field_Matrix<T> predicted_nordsieck);\r\n\r\n\r\n\r\n    /** Finalize the step.\r\n\r\n     * @param step_size step size used in the scaled and Nordsieck arrays\r\n\r\n     * @param predicted_state predicted state at end of step\r\n\r\n     * @param predicted_scaled predicted first scaled derivative\r\n\r\n     * @param predicted_nordsieck predicted Nordsieck vector\r\n\r\n     * @param is_forward integration direction indicator\r\n\r\n     * @param global_previous_state start of the global step\r\n\r\n     * @param global_current_state end of the global step\r\n\r\n     * @param equations_mapper mapper for ODE equations primary and secondary components\r\n\r\n     * @return step interpolator\r\n\r\n     * @since 2.0\r\n\r\n     */\r\n\r\n    protected virtual Adams_Field_State_Interpolator<T> constize_step(T step_size, std::vector<T> predicted_state, std::vector<T> predicted_scaled, Array2DRowField_Matrix<T> predicted_nordsieck, bool is_forward, Field_ODE_State_And_Derivative<T> global_previous_state, Field_ODE_State_And_Derivative<T> global_current_state, FieldEquations_mapper<T> equations_mapper);\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n