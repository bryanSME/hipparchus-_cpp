/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n\r\n\r\n//package org.hipparchus.ode.nonstiff;\r\n\r\n\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n//import org.hipparchus.Field;\r\n\r\n//import org.hipparchus.ode.FieldEquations_mapper;\r\n\r\n//import org.hipparchus.ode.Field_ODE_State_And_Derivative;\r\n\r\n\r\n\r\n/**\r\n\r\n * This class : a step interpolator for the Gill fourth\r\n\r\n * order Runge-Kutta integrator.\r\n\r\n *\r\n\r\n * <p>This interpolator allows to compute dense output inside the last\r\n\r\n * step computed. The interpolation equation is consistent with the\r\n\r\n * integration scheme :\r\n\r\n * <ul>\r\n\r\n *   <li>Using reference point at step start:<br>\r\n\r\n *   y(t<sub>n</sub> + &theta; h) = y (t<sub>n</sub>)\r\n\r\n *                    + &theta; (h/6) [ (6 - 9 &theta; + 4 &theta;<sup>2</sup>) y'<sub>1</sub>\r\n\r\n *                                    + (    6 &theta; - 4 &theta;<sup>2</sup>) ((1-1/&radic;2) y'<sub>2</sub> + (1+1/&radic;2)) y'<sub>3</sub>)\r\n\r\n *                                    + (  - 3 &theta; + 4 &theta;<sup>2</sup>) y'<sub>4</sub>\r\n\r\n *                                    ]\r\n\r\n *   </li>\r\n\r\n *   <li>Using reference point at step start:<br>\r\n\r\n *   y(t<sub>n</sub> + &theta; h) = y (t<sub>n</sub> + h)\r\n\r\n *                    - (1 - &theta;) (h/6) [ (1 - 5 &theta; + 4 &theta;<sup>2</sup>) y'<sub>1</sub>\r\n\r\n *                                          + (2 + 2 &theta; - 4 &theta;<sup>2</sup>) ((1-1/&radic;2) y'<sub>2</sub> + (1+1/&radic;2)) y'<sub>3</sub>)\r\n\r\n *                                          + (1 +   &theta; + 4 &theta;<sup>2</sup>) y'<sub>4</sub>\r\n\r\n *                                          ]\r\n\r\n *   </li>\r\n\r\n * </ul>\r\n\r\n * </p>\r\n\r\n * where &theta; belongs to [0 ; 1] and where y'<sub>1</sub> to y'<sub>4</sub>\r\n\r\n * are the four evaluations of the derivatives already computed during\r\n\r\n * the step.</p>\r\n\r\n *\r\n\r\n * @see Gill_Field_Integrator\r\n\r\n * @param <T> the type of the field elements\r\n\r\n */\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\nclass Gill_Field_State_Interpolator\r\n\r\n    extends Runge_Kutta_Field_State_Interpolator<T> \r\n\r\n    {\r\n\r\n\r\n\r\n    /** First Gill coefficient. */\r\n\r\n    private const T one_minus_inv_sqrt_2;\r\n\r\n\r\n\r\n    /** Second Gill coefficient. */\r\n\r\n    private const T one_plus_inv_sqrt_2;\r\n\r\n\r\n\r\n    /** Simple constructor.\r\n\r\n     * @param field field to which the time and state vector elements belong\r\n\r\n     * @param forward integration direction indicator\r\n\r\n     * @param y_dot_k slopes at the intermediate points\r\n\r\n     * @param global_previous_state start of the global step\r\n\r\n     * @param global_current_state end of the global step\r\n\r\n     * @param soft_previous_state start of the restricted step\r\n\r\n     * @param soft_current_state end of the restricted step\r\n\r\n     * @param mapper equations mapper for the all equations\r\n\r\n     */\r\n\r\n    Gill_Field_State_Interpolator(const Field<T> field, const bool forward, const std::vector<std::vector<T>> y_dot_k, const Field_ODE_State_And_Derivative<T> global_previous_state, const Field_ODE_State_And_Derivative<T> global_current_state, const Field_ODE_State_And_Derivative<T> soft_previous_state, const Field_ODE_State_And_Derivative<T> soft_current_state, const FieldEquations_mapper<T> mapper) \r\n\r\n    {\r\n\r\n        super(field, forward, y_dot_k, global_previous_state, global_current_state, soft_previous_state, soft_current_state, mapper);\r\n\r\n        const T sqrt = field.get_zero().add(0.5).sqrt();\r\n\r\n        one_minus_inv_sqrt_2 = field.get_one().subtract(sqrt);\r\n\r\n        one_plus_inv_sqrt_2  = field.get_one().add(sqrt);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n    //override\r\n\r\n    protected Gill_Field_State_Interpolator<T> create(const Field<T> new_field, const bool new_forward, const std::vector<std::vector<T>> new_y_dot_k, const Field_ODE_State_And_Derivative<T> new_global_previous_state, const Field_ODE_State_And_Derivative<T> new_global_current_state, const Field_ODE_State_And_Derivative<T> new_soft_previous_state, const Field_ODE_State_And_Derivative<T> new_soft_current_state, const FieldEquations_mapper<T> new_mapper) \r\n\r\n    {\r\n\r\n        return Gill_Field_State_Interpolator<T>(new_field, new_forward, new_y_dot_k, new_global_previous_state, new_global_current_state, new_soft_previous_state, new_soft_current_state, new_mapper);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n    //@Suppress_Warnings("unchecked")\r\n\r\n    //override\r\n\r\n    protected Field_ODE_State_And_Derivative<T> compute_interpolated_state_and_derivatives(const FieldEquations_mapper<T> mapper, const T time, const T theta, const T theta_h, const T one_minus_theta_h) \r\n\r\n    {\r\n\r\n\r\n\r\n        const T one        = time.get_field().get_one();\r\n\r\n        const T two_theta   = theta.multiply(2);\r\n\r\n        const T four_theta_2 = two_theta.multiply(two_theta);\r\n\r\n        const T coeff_dot_1  = theta.multiply(two_theta.subtract(3)).add(1);\r\n\r\n        const T c_dot23     = two_theta.multiply(one.subtract(theta));\r\n\r\n        const T coeff_dot_2  = c_dot23.multiply(one_minus_inv_sqrt_2);\r\n\r\n        const T coeff_dot_3  = c_dot23.multiply(one_plus_inv_sqrt_2);\r\n\r\n        const T coeff_dot_4  = theta.multiply(two_theta.subtract(1));\r\n\r\n        const std::vector<T> interpolated_state;\r\n\r\n        const std::vector<T> interpolated_derivatives;\r\n\r\n\r\n\r\n        if (get_global_previous_state() != null && theta.get_real() <= 0.5) \r\n\r\n        {\r\n\r\n            const T s               = theta_h.divide(6.0);\r\n\r\n            const T c23             = s.multiply(theta.multiply(6).subtract(four_theta_2));\r\n\r\n            const T coeff1          = s.multiply(four_theta_2.subtract(theta.multiply(9)).add(6));\r\n\r\n            const T coeff2          = c23.multiply(one_minus_inv_sqrt_2);\r\n\r\n            const T coeff3          = c23.multiply(one_plus_inv_sqrt_2);\r\n\r\n            const T coeff4          = s.multiply(four_theta_2.subtract(theta.multiply(3)));\r\n\r\n            interpolated_state       = previous_state_linear_combination(coeff1, coeff2, coeff3, coeff4);\r\n\r\n            interpolated_derivatives = derivative_linear_combination(coeff_dot_1, coeff_dot_2, coeff_dot_3, coeff_dot_4);\r\n\r\n        }\r\n\r\nelse \r\n\r\n        {\r\n\r\n            const T s      = one_minus_theta_h.divide(-6.0);\r\n\r\n            const T c23    = s.multiply(two_theta.add(2).subtract(four_theta_2));\r\n\r\n            const T coeff1 = s.multiply(four_theta_2.subtract(theta.multiply(5)).add(1));\r\n\r\n            const T coeff2 = c23.multiply(one_minus_inv_sqrt_2);\r\n\r\n            const T coeff3 = c23.multiply(one_plus_inv_sqrt_2);\r\n\r\n            const T coeff4 = s.multiply(four_theta_2.add(theta).add(1));\r\n\r\n            interpolated_state       = current_state_linear_combination(coeff1, coeff2, coeff3, coeff4);\r\n\r\n            interpolated_derivatives = derivative_linear_combination(coeff_dot_1, coeff_dot_2, coeff_dot_3, coeff_dot_4);\r\n\r\n        }\r\n\r\n\r\n\r\n        return mapper.map_state_and_derivative(time, interpolated_state, interpolated_derivatives);\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n