/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n\r\n\r\n//package org.hipparchus.ode.nonstiff;\r\n\r\n\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n//import org.hipparchus.Field;\r\n\r\n//import org.hipparchus.ode.FieldEquations_mapper;\r\n\r\n//import org.hipparchus.ode.Field_ODE_State_And_Derivative;\r\n\r\n\r\n\r\n/**\r\n\r\n * This class represents an interpolator over the last step during an\r\n\r\n * ODE integration for the 5(4) Dormand-Prince integrator.\r\n\r\n *\r\n\r\n * @see Dormand_Prince54_Integrator\r\n\r\n *\r\n\r\n * @param <T> the type of the field elements\r\n\r\n */\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\nclass Dormand_Prince54_Field_State_Interpolator\r\n\r\n    extends Runge_Kutta_Field_State_Interpolator<T> \r\n\r\n    {\r\n\r\n\r\n\r\n    /** Last row of the Butcher-array internal weights, element 0. */\r\n\r\n    private const T a70;\r\n\r\n\r\n\r\n    // element 1 is zero, so it is neither stored nor used\r\n\r\n\r\n\r\n    /** Last row of the Butcher-array internal weights, element 2. */\r\n\r\n    private const T a72;\r\n\r\n\r\n\r\n    /** Last row of the Butcher-array internal weights, element 3. */\r\n\r\n    private const T a73;\r\n\r\n\r\n\r\n    /** Last row of the Butcher-array internal weights, element 4. */\r\n\r\n    private const T a74;\r\n\r\n\r\n\r\n    /** Last row of the Butcher-array internal weights, element 5. */\r\n\r\n    private const T a75;\r\n\r\n\r\n\r\n    /** Shampine (1986) Dense output, element 0. */\r\n\r\n    private const T d0;\r\n\r\n\r\n\r\n    // element 1 is zero, so it is neither stored nor used\r\n\r\n\r\n\r\n    /** Shampine (1986) Dense output, element 2. */\r\n\r\n    private const T d2;\r\n\r\n\r\n\r\n    /** Shampine (1986) Dense output, element 3. */\r\n\r\n    private const T d3;\r\n\r\n\r\n\r\n    /** Shampine (1986) Dense output, element 4. */\r\n\r\n    private const T d4;\r\n\r\n\r\n\r\n    /** Shampine (1986) Dense output, element 5. */\r\n\r\n    private const T d5;\r\n\r\n\r\n\r\n    /** Shampine (1986) Dense output, element 6. */\r\n\r\n    private const T d6;\r\n\r\n\r\n\r\n    /** Simple constructor.\r\n\r\n     * @param field field to which the time and state vector elements belong\r\n\r\n     * @param forward integration direction indicator\r\n\r\n     * @param y_dot_k slopes at the intermediate points\r\n\r\n     * @param global_previous_state start of the global step\r\n\r\n     * @param global_current_state end of the global step\r\n\r\n     * @param soft_previous_state start of the restricted step\r\n\r\n     * @param soft_current_state end of the restricted step\r\n\r\n     * @param mapper equations mapper for the all equations\r\n\r\n     */\r\n\r\n    Dormand_Prince54_Field_State_Interpolator(const Field<T> field, const bool forward, const std::vector<std::vector<T>> y_dot_k, const Field_ODE_State_And_Derivative<T> global_previous_state, const Field_ODE_State_And_Derivative<T> global_current_state, const Field_ODE_State_And_Derivative<T> soft_previous_state, const Field_ODE_State_And_Derivative<T> soft_current_state, const FieldEquations_mapper<T> mapper) \r\n\r\n    {\r\n\r\n        super(field, forward, y_dot_k, global_previous_state, global_current_state, soft_previous_state, soft_current_state, mapper);\r\n\r\n        const T one = field.get_one();\r\n\r\n        a70 = one.multiply(   35.0).divide( 384.0);\r\n\r\n        a72 = one.multiply(  500.0).divide(1113.0);\r\n\r\n        a73 = one.multiply(  125.0).divide( 192.0);\r\n\r\n        a74 = one.multiply(-2187.0).divide(6784.0);\r\n\r\n        a75 = one.multiply(   11.0).divide(  84.0);\r\n\r\n        d0  = one.multiply(-12715105075.0).divide( 11282082432.0);\r\n\r\n        d2  = one.multiply( 87487479700.0).divide( 32700410799.0);\r\n\r\n        d3  = one.multiply(-10690763975.0).divide(  1880347072.0);\r\n\r\n        d4  = one.multiply(701980252875.0).divide(199316789632.0);\r\n\r\n        d5  = one.multiply( -1453857185.0).divide(   822651844.0);\r\n\r\n        d6  = one.multiply(    69997945.0).divide(    29380423.0);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n    //override\r\n\r\n    protected Dormand_Prince54_Field_State_Interpolator<T> create(const Field<T> new_field, const bool new_forward, const std::vector<std::vector<T>> new_y_dot_k, const Field_ODE_State_And_Derivative<T> new_global_previous_state, const Field_ODE_State_And_Derivative<T> new_global_current_state, const Field_ODE_State_And_Derivative<T> new_soft_previous_state, const Field_ODE_State_And_Derivative<T> new_soft_current_state, const FieldEquations_mapper<T> new_mapper) \r\n\r\n    {\r\n\r\n        return Dormand_Prince54_Field_State_Interpolator<T>(new_field, new_forward, new_y_dot_k, new_global_previous_state, new_global_current_state, new_soft_previous_state, new_soft_current_state, new_mapper);\r\n\r\n    }\r\n\r\n    /** {@inherit_doc} */\r\n\r\n    //@Suppress_Warnings("unchecked")\r\n\r\n    //override\r\n\r\n    protected Field_ODE_State_And_Derivative<T> compute_interpolated_state_and_derivatives(const FieldEquations_mapper<T> mapper, const T time, const T theta, const T theta_h, const T one_minus_theta_h) \r\n\r\n    {\r\n\r\n\r\n\r\n        // interpolate\r\n\r\n        const T one      = time.get_field().get_one();\r\n\r\n        const T eta      = one.subtract(theta);\r\n\r\n        const T two_theta = theta.multiply(2);\r\n\r\n        const T dot2     = one.subtract(two_theta);\r\n\r\n        const T dot3     = theta.multiply(theta.multiply(-3).add(2));\r\n\r\n        const T dot4     = two_theta.multiply(theta.multiply(two_theta.subtract(3)).add(1));\r\n\r\n        const std::vector<T> interpolated_state;\r\n\r\n        const std::vector<T> interpolated_derivatives;\r\n\r\n        if (get_global_previous_state() != null && theta.get_real() <= 0.5) \r\n\r\n        {\r\n\r\n            const T f1        = theta_h;\r\n\r\n            const T f2        = f1.multiply(eta);\r\n\r\n            const T f3        = f2.multiply(theta);\r\n\r\n            const T f4        = f3.multiply(eta);\r\n\r\n            const T coeff0    = f1.multiply(a70).\r\n\r\n                                subtract(f2.multiply(a70.subtract(1))).\r\n\r\n                                add(f3.multiply(a70.multiply(2).subtract(1))).\r\n\r\n                                add(f4.multiply(d0));\r\n\r\n            const T coeff1    = time.get_field().get_zero();\r\n\r\n            const T coeff2    = f1.multiply(a72).\r\n\r\n                                subtract(f2.multiply(a72)).\r\n\r\n                                add(f3.multiply(a72.multiply(2))).\r\n\r\n                                add(f4.multiply(d2));\r\n\r\n            const T coeff3    = f1.multiply(a73).\r\n\r\n                                subtract(f2.multiply(a73)).\r\n\r\n                                add(f3.multiply(a73.multiply(2))).\r\n\r\n                                add(f4.multiply(d3));\r\n\r\n            const T coeff4    = f1.multiply(a74).\r\n\r\n                                subtract(f2.multiply(a74)).\r\n\r\n                                add(f3.multiply(a74.multiply(2))).\r\n\r\n                                add(f4.multiply(d4));\r\n\r\n            const T coeff5    = f1.multiply(a75).\r\n\r\n                                subtract(f2.multiply(a75)).\r\n\r\n                                add(f3.multiply(a75.multiply(2))).\r\n\r\n                                add(f4.multiply(d5));\r\n\r\n            const T coeff6    = f4.multiply(d6).subtract(f3);\r\n\r\n            const T coeff_dot0 = a70.\r\n\r\n                                subtract(dot2.multiply(a70.subtract(1))).\r\n\r\n                                add(dot3.multiply(a70.multiply(2).subtract(1))).\r\n\r\n                                add(dot4.multiply(d0));\r\n\r\n            const T coeff_dot_1 = time.get_field().get_zero();\r\n\r\n            const T coeff_dot_2 = a72.\r\n\r\n                                subtract(dot2.multiply(a72)).\r\n\r\n                                add(dot3.multiply(a72.multiply(2))).\r\n\r\n                                add(dot4.multiply(d2));\r\n\r\n            const T coeff_dot_3 = a73.\r\n\r\n                                subtract(dot2.multiply(a73)).\r\n\r\n                                add(dot3.multiply(a73.multiply(2))).\r\n\r\n                                add(dot4.multiply(d3));\r\n\r\n            const T coeff_dot_4 = a74.\r\n\r\n                                subtract(dot2.multiply(a74)).\r\n\r\n                                add(dot3.multiply(a74.multiply(2))).\r\n\r\n                                add(dot4.multiply(d4));\r\n\r\n            const T coeff_dot5 = a75.\r\n\r\n                                subtract(dot2.multiply(a75)).\r\n\r\n                                add(dot3.multiply(a75.multiply(2))).\r\n\r\n                                add(dot4.multiply(d5));\r\n\r\n            const T coeff_dot6 = dot4.multiply(d6).subtract(dot3);\r\n\r\n            interpolated_state       = previous_state_linear_combination(coeff0, coeff1, coeff2, coeff3, coeff4, coeff5, coeff6);\r\n\r\n            interpolated_derivatives = derivative_linear_combination(coeff_dot0, coeff_dot_1, coeff_dot_2, coeff_dot_3, coeff_dot_4, coeff_dot5, coeff_dot6);\r\n\r\n        }\r\n\r\nelse \r\n\r\n        {\r\n\r\n            const T f1        = one_minus_theta_h.negate();\r\n\r\n            const T f2        = one_minus_theta_h.multiply(theta);\r\n\r\n            const T f3        = f2.multiply(theta);\r\n\r\n            const T f4        = f3.multiply(eta);\r\n\r\n            const T coeff0    = f1.multiply(a70).\r\n\r\n                                subtract(f2.multiply(a70.subtract(1))).\r\n\r\n                                add(f3.multiply(a70.multiply(2).subtract(1))).\r\n\r\n                                add(f4.multiply(d0));\r\n\r\n            const T coeff1    = time.get_field().get_zero();\r\n\r\n            const T coeff2    = f1.multiply(a72).\r\n\r\n                                subtract(f2.multiply(a72)).\r\n\r\n                                add(f3.multiply(a72.multiply(2))).\r\n\r\n                                add(f4.multiply(d2));\r\n\r\n            const T coeff3    = f1.multiply(a73).\r\n\r\n                                subtract(f2.multiply(a73)).\r\n\r\n                                add(f3.multiply(a73.multiply(2))).\r\n\r\n                                add(f4.multiply(d3));\r\n\r\n            const T coeff4    = f1.multiply(a74).\r\n\r\n                                subtract(f2.multiply(a74)).\r\n\r\n                                add(f3.multiply(a74.multiply(2))).\r\n\r\n                                add(f4.multiply(d4));\r\n\r\n            const T coeff5    = f1.multiply(a75).\r\n\r\n                                subtract(f2.multiply(a75)).\r\n\r\n                                add(f3.multiply(a75.multiply(2))).\r\n\r\n                                add(f4.multiply(d5));\r\n\r\n            const T coeff6    = f4.multiply(d6).subtract(f3);\r\n\r\n            const T coeff_dot0 = a70.\r\n\r\n                                subtract(dot2.multiply(a70.subtract(1))).\r\n\r\n                                add(dot3.multiply(a70.multiply(2).subtract(1))).\r\n\r\n                                add(dot4.multiply(d0));\r\n\r\n            const T coeff_dot_1 = time.get_field().get_zero();\r\n\r\n            const T coeff_dot_2 = a72.\r\n\r\n                                subtract(dot2.multiply(a72)).\r\n\r\n                                add(dot3.multiply(a72.multiply(2))).\r\n\r\n                                add(dot4.multiply(d2));\r\n\r\n            const T coeff_dot_3 = a73.\r\n\r\n                                subtract(dot2.multiply(a73)).\r\n\r\n                                add(dot3.multiply(a73.multiply(2))).\r\n\r\n                                add(dot4.multiply(d3));\r\n\r\n            const T coeff_dot_4 = a74.\r\n\r\n                                subtract(dot2.multiply(a74)).\r\n\r\n                                add(dot3.multiply(a74.multiply(2))).\r\n\r\n                                add(dot4.multiply(d4));\r\n\r\n            const T coeff_dot5 = a75.\r\n\r\n                                subtract(dot2.multiply(a75)).\r\n\r\n                                add(dot3.multiply(a75.multiply(2))).\r\n\r\n                                add(dot4.multiply(d5));\r\n\r\n            const T coeff_dot6 = dot4.multiply(d6).subtract(dot3);\r\n\r\n            interpolated_state       = current_state_linear_combination(coeff0, coeff1, coeff2, coeff3, coeff4, coeff5, coeff6);\r\n\r\n            interpolated_derivatives = derivative_linear_combination(coeff_dot0, coeff_dot_1, coeff_dot_2, coeff_dot_3, coeff_dot_4, coeff_dot5, coeff_dot6);\r\n\r\n        }\r\n\r\n        return mapper.map_state_and_derivative(time, interpolated_state, interpolated_derivatives);\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n