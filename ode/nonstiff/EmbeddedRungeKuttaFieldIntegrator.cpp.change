/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n\r\n\r\n//package org.hipparchus.ode.nonstiff;\r\n\r\n\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n//import org.hipparchus.Field;\r\n\r\n//import org.hipparchus.exception.;\r\n\r\n//import org.hipparchus.exception.Math_Illegal_State_Exception;\r\n\r\n//import org.hipparchus.ode.FieldEquations_mapper;\r\n\r\n//import org.hipparchus.ode.FieldExpandable_ODE;\r\n\r\n//import org.hipparchus.ode.FieldODE_State;\r\n\r\n//import org.hipparchus.ode.Field_ODE_State_And_Derivative;\r\n\r\n//import org.hipparchus.util.FastMath;\r\n\r\n//import org.hipparchus.util.Math_Arrays;\r\n\r\n//import org.hipparchus.util.Math_Utils;\r\n\r\n\r\n\r\n/**\r\n\r\n * This class : the common part of all embedded Runge-Kutta\r\n\r\n * integrators for Ordinary Differential Equations.\r\n\r\n *\r\n\r\n * <p>These methods are embedded explicit Runge-Kutta methods with two\r\n\r\n * sets of coefficients allowing to estimate the error, their Butcher\r\n\r\n * arrays are as follows :\r\n\r\n * <pre>\r\n\r\n *    0  |\r\n\r\n *   c2  | a21\r\n\r\n *   c3  | a31  a32\r\n\r\n *   ... |        ...\r\n\r\n *   cs  | as1  as2  ...  ass-1\r\n\r\n *       |--------------------------\r\n\r\n *       |  b1   b2  ...   bs-1  bs\r\n\r\n *       |  b'1  b'2 ...   b's-1 b's\r\n\r\n * </pre>\r\n\r\n * </p>\r\n\r\n *\r\n\r\n * <p>In fact, we rather use the array defined by ej = bj - b'j to\r\n\r\n * compute directly the error rather than computing two estimates and\r\n\r\n * then comparing them.</p>\r\n\r\n *\r\n\r\n * <p>Some methods are qualified as <i>fsal</i> (first same as last)\r\n\r\n * methods. This means the last evaluation of the derivatives in one\r\n\r\n * step is the same as the first in the next step. Then, this\r\n\r\n * evaluation can be reused from one step to the next one and the cost\r\n\r\n * of such a method is really s-1 evaluations despite the method still\r\n\r\n * has s stages. This behaviour is true only for successful steps, if\r\n\r\n * the step is rejected after the error estimation phase, no\r\n\r\n * evaluation is saved. For an <i>fsal</i> method, we have cs = 1 and\r\n\r\n * asi = bi for all i.</p>\r\n\r\n *\r\n\r\n * @param <T> the type of the field elements\r\n\r\n */\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\npublic virtual class EmbeddedRunge_Kutta_Field_Integrator\r\n\r\n    extends Adaptive_Stepsize_Field_Integrator<T>\r\n\r\n    : FieldButcher_Array_Provider<T> \r\n\r\n    {\r\n\r\n\r\n\r\n    /** Index of the pre-computed derivative for <i>fsal</i> methods. */\r\n\r\n    private const int fsal;\r\n\r\n\r\n\r\n    /** Time steps from Butcher array (without the first zero). */\r\n\r\n    private const std::vector<T> c;\r\n\r\n\r\n\r\n    /** Internal weights from Butcher array (without the first empty row). */\r\n\r\n    private const std::vector<std::vector<T>> a;\r\n\r\n\r\n\r\n    /** External weights for the high order method from Butcher array. */\r\n\r\n    private const std::vector<T> b;\r\n\r\n\r\n\r\n    /** Stepsize control exponent. */\r\n\r\n    private const double exp;\r\n\r\n\r\n\r\n    /** Safety factor for stepsize control. */\r\n\r\n    private T safety;\r\n\r\n\r\n\r\n    /** Minimal reduction factor for stepsize control. */\r\n\r\n    private T min_reduction;\r\n\r\n\r\n\r\n    /** Maximal growth factor for stepsize control. */\r\n\r\n    private T max_growth;\r\n\r\n\r\n\r\n    /** Build a Runge-Kutta integrator with the given Butcher array.\r\n\r\n     * @param field field to which the time and state vector elements belong\r\n\r\n     * @param name name of the method\r\n\r\n     * @param fsal index of the pre-computed derivative for <i>fsal</i> methods\r\n\r\n     * or -1 if method is not <i>fsal</i>\r\n\r\n     * @param min_step minimal step (sign is irrelevant, regardless of\r\n\r\n     * integration direction, forward or backward), the last step can\r\n\r\n     * be smaller than this\r\n\r\n     * @param max_step maximal step (sign is irrelevant, regardless of\r\n\r\n     * integration direction, forward or backward), the last step can\r\n\r\n     * be smaller than this\r\n\r\n     * @param scal_absolute_tolerance allowed absolute error\r\n\r\n     * @param scal_relative_tolerance allowed relative error\r\n\r\n     */\r\n\r\n    protected EmbeddedRunge_Kutta_Field_Integrator(const Field<T> field, const std::string name, const int fsal, const double min_step, const double max_step, const double scal_absolute_tolerance, const double scal_relative_tolerance) \r\n\r\n    {\r\n\r\n\r\n\r\n        super(field, name, min_step, max_step, scal_absolute_tolerance, scal_relative_tolerance);\r\n\r\n\r\n\r\n        this.fsal = fsal;\r\n\r\n        this.c    = get_c();\r\n\r\n        this.a    = get_a();\r\n\r\n        this.b    = get_b();\r\n\r\n\r\n\r\n        exp = -1.0 / get_order();\r\n\r\n\r\n\r\n        // set the default values of the algorithm control parameters\r\n\r\n        set_safety(field.get_zero().add(0.9));\r\n\r\n        set_min_reduction(field.get_zero().add(0.2));\r\n\r\n        set_max_growth(field.get_zero().add(10.0));\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Build a Runge-Kutta integrator with the given Butcher array.\r\n\r\n     * @param field field to which the time and state vector elements belong\r\n\r\n     * @param name name of the method\r\n\r\n     * @param fsal index of the pre-computed derivative for <i>fsal</i> methods\r\n\r\n     * or -1 if method is not <i>fsal</i>\r\n\r\n     * @param min_step minimal step (must be positive even for backward\r\n\r\n     * integration), the last step can be smaller than this\r\n\r\n     * @param max_step maximal step (must be positive even for backward\r\n\r\n     * integration)\r\n\r\n     * @param vec_absolute_tolerance allowed absolute error\r\n\r\n     * @param vec_relative_tolerance allowed relative error\r\n\r\n     */\r\n\r\n    protected EmbeddedRunge_Kutta_Field_Integrator(const Field<T> field, const std::string name, const int fsal, const double   min_step, const double max_step, const std::vector<double>& vec_absolute_tolerance, const std::vector<double>& vec_relative_tolerance) \r\n\r\n    {\r\n\r\n\r\n\r\n        super(field, name, min_step, max_step, vec_absolute_tolerance, vec_relative_tolerance);\r\n\r\n\r\n\r\n        this.fsal = fsal;\r\n\r\n        this.c    = get_c();\r\n\r\n        this.a    = get_a();\r\n\r\n        this.b    = get_b();\r\n\r\n\r\n\r\n        exp = -1.0 / get_order();\r\n\r\n\r\n\r\n        // set the default values of the algorithm control parameters\r\n\r\n        set_safety(field.get_zero().add(0.9));\r\n\r\n        set_min_reduction(field.get_zero().add(0.2));\r\n\r\n        set_max_growth(field.get_zero().add(10.0));\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Create a fraction.\r\n\r\n     * @param p numerator\r\n\r\n     * @param q denominator\r\n\r\n     * @return p/q computed in the instance field\r\n\r\n     */\r\n\r\n    protected T fraction(const int p, const int q) \r\n\r\n    {\r\n\r\n        return get_field().get_one().multiply(p).divide(q);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Create a fraction.\r\n\r\n     * @param p numerator\r\n\r\n     * @param q denominator\r\n\r\n     * @return p/q computed in the instance field\r\n\r\n     */\r\n\r\n    protected T fraction(const double p, const double q) \r\n\r\n    {\r\n\r\n        return get_field().get_one().multiply(p).divide(q);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Create an interpolator.\r\n\r\n     * @param forward integration direction indicator\r\n\r\n     * @param y_dot_k slopes at the intermediate points\r\n\r\n     * @param global_previous_state start of the global step\r\n\r\n     * @param global_current_state end of the global step\r\n\r\n     * @param mapper equations mapper for the all equations\r\n\r\n     * @return external weights for the high order method from Butcher array\r\n\r\n     */\r\n\r\n    protected virtual Runge_Kutta_Field_State_Interpolator<T> create_interpolator(bool forward, std::vector<std::vector<T>> y_dot_k, Field_ODE_State_And_Derivative<T> global_previous_state, Field_ODE_State_And_Derivative<T> global_current_state, FieldEquations_mapper<T> mapper);\r\n\r\n    /** Get the order of the method.\r\n\r\n     * @return order of the method\r\n\r\n     */\r\n\r\n    public virtual int get_order();\r\n\r\n\r\n\r\n    /** Get the safety factor for stepsize control.\r\n\r\n     * @return safety factor\r\n\r\n     */\r\n\r\n    public T get_safety() \r\n\r\n    {\r\n\r\n        return safety;\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Set the safety factor for stepsize control.\r\n\r\n     * @param safety safety factor\r\n\r\n     */\r\n\r\n    public void set_safety(const T safety) \r\n\r\n    {\r\n\r\n        this.safety = safety;\r\n\r\n    }\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n    //override\r\n\r\n    public Field_ODE_State_And_Derivative<T> integrate(const FieldExpandable_ODE<T> equations, const FieldODE_State<T> initial_state, const T const_time)\r\n\r\n        , Math_Illegal_State_Exception \r\n\r\n        {\r\n\r\n\r\n\r\n        sanity_checks(initial_state, const_time);\r\n\r\n        set_step_start(init_integration(equations, initial_state, const_time));\r\n\r\n        const bool forward = const_time.subtract(initial_state.get_time()).get_real() > 0;\r\n\r\n\r\n\r\n        // create some internal working arrays\r\n\r\n        const int   stages = c.size() + 1;\r\n\r\n        const std::vector<std::vector<T>> y_dot_k  = Math_Arrays::build_array(get_field(), stages, -1);\r\n\r\n        const std::vector<T>   y_tmp   = Math_Arrays::build_array(get_field(), equations.get_mapper().get_total_dimension());\r\n\r\n\r\n\r\n        // set up integration control objects\r\n\r\n        T  h_new           = get_field().get_zero();\r\n\r\n        bool first_time = true;\r\n\r\n\r\n\r\n        // main integration loop\r\n\r\n        set_is_last_step(false);\r\n\r\n        do \r\n\r\n        {\r\n\r\n\r\n\r\n            // iterate over step size, ensuring local normalized error is smaller than 1\r\n\r\n            double error = 10.0;\r\n\r\n            while (error >= 1.0) \r\n\r\n            {\r\n\r\n\r\n\r\n                // first stage\r\n\r\n                const std::vector<T> y = get_step_start().get_complete_state();\r\n\r\n                y_dot_k[0] = get_step_start().get_complete_derivative();\r\n\r\n\r\n\r\n                if (first_time) \r\n\r\n                {\r\n\r\n                    const Stepsize_Helper helper = get_step_size_helper();\r\n\r\n                    const std::vector<T> scale = Math_Arrays::build_array(get_field(), helper.get_main_set_dimension());\r\n\r\n                    for (int i{}; i < scale.size(); ++i) \r\n\r\n                    {\r\n\r\n                        scale[i] = helper.get_tolerance(i, y[i].abs());\r\n\r\n                    }\r\n\r\n                    h_new = get_field().get_zero().add(initialize_step(forward, get_order(), scale, get_step_start(), equations.get_mapper()));\r\n\r\n                    first_time = false;\r\n\r\n                }\r\n\r\n\r\n\r\n                set_step_size(h_new);\r\n\r\n                if (forward) \r\n\r\n                {\r\n\r\n                    if (get_step_start().get_time().add(get_step_size()).subtract(const_time).get_real() >= 0) \r\n\r\n                    {\r\n\r\n                        set_step_size(const_time.subtract(get_step_start().get_time()));\r\n\r\n                    }\r\n\r\n                }\r\n\r\nelse \r\n\r\n                {\r\n\r\n                    if (get_step_start().get_time().add(get_step_size()).subtract(const_time).get_real() <= 0) \r\n\r\n                    {\r\n\r\n                        set_step_size(const_time.subtract(get_step_start().get_time()));\r\n\r\n                    }\r\n\r\n                }\r\n\r\n\r\n\r\n                // next stages\r\n\r\n                for (int k{ 1 }; k < stages; ++k) \r\n\r\n                {\r\n\r\n\r\n\r\n                    for (int j{}; j < y.size(); ++j) \r\n\r\n                    {\r\n\r\n                        T sum = y_dot_k[0][j].multiply(a[k-1][0]);\r\n\r\n                        for (const int& l = 1; l < k; ++l) \r\n\r\n                        {\r\n\r\n                            sum = sum.add(y_dot_k[l][j].multiply(a[k-1][l]));\r\n\r\n                        }\r\n\r\n                        y_tmp[j] = y[j].add(get_step_size().multiply(sum));\r\n\r\n                    }\r\n\r\n\r\n\r\n                    y_dot_k[k] = compute_derivatives(get_step_start().get_time().add(get_step_size().multiply(c[k-1])), y_tmp);\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n                // estimate the state at the end of the step\r\n\r\n                for (int j{}; j < y.size(); ++j) \r\n\r\n                {\r\n\r\n                    T sum    = y_dot_k[0][j].multiply(b[0]);\r\n\r\n                    for (const int& l = 1; l < stages; ++l) \r\n\r\n                    {\r\n\r\n                        sum = sum.add(y_dot_k[l][j].multiply(b[l]));\r\n\r\n                    }\r\n\r\n                    y_tmp[j] = y[j].add(get_step_size().multiply(sum));\r\n\r\n                }\r\n\r\n\r\n\r\n                // estimate the error at the end of the step\r\n\r\n                error = estimate_error(y_dot_k, y, y_tmp, get_step_size());\r\n\r\n                if (error >= 1.0) \r\n\r\n                {\r\n\r\n                    // reject the step and attempt to reduce error by stepsize control\r\n\r\n                    const T factor = Math_Utils::min(max_growth, Math_Utils::max(min_reduction, safety.multiply(std::pow(error, exp))));\r\n\r\n                    h_new = get_step_size_helper().filter_step(get_step_size().multiply(factor), forward, false);\r\n\r\n                }\r\n\r\n\r\n\r\n            }\r\n\r\n            const T   step_end = get_step_start().get_time().add(get_step_size());\r\n\r\n            const std::vector<T> y_dot_tmp = (fsal >= 0) ? y_dot_k[fsal] : compute_derivatives(step_end, y_tmp);\r\n\r\n            const Field_ODE_State_And_Derivative<T> state_tmp = equations.get_mapper().map_state_and_derivative(step_end, y_tmp, y_dot_tmp);\r\n\r\n\r\n\r\n            // local error is small enough: accept the step, trigger events and step handlers\r\n\r\n            set_step_start(accept_step(create_interpolator(forward, y_dot_k, get_step_start(), state_tmp, equations.get_mapper()), const_time));\r\n\r\n\r\n\r\n            if (!is_last_step()) \r\n\r\n            {\r\n\r\n\r\n\r\n                // stepsize control for next step\r\n\r\n                const T factor = Math_Utils::min(max_growth, Math_Utils::max(min_reduction, safety.multiply(std::pow(error, exp))));\r\n\r\n                const T  scaled_h    = get_step_size().multiply(factor);\r\n\r\n                const T  next_t      = get_step_start().get_time().add(scaled_h);\r\n\r\n                const bool next_is_last = forward ?\r\n\r\n                                           next_t.subtract(const_time).get_real() >= 0 :\r\n\r\n                                           next_t.subtract(const_time).get_real() <= 0;\r\n\r\n                h_new = get_step_size_helper().filter_step(scaled_h, forward, next_is_last);\r\n\r\n\r\n\r\n                const T  filtered_next_t      = get_step_start().get_time().add(h_new);\r\n\r\n                const bool filtered_next_is_last = forward ?\r\n\r\n                                                   filtered_next_t.subtract(const_time).get_real() >= 0 :\r\n\r\n                                                   filtered_next_t.subtract(const_time).get_real() <= 0;\r\n\r\n                if (filtered_next_is_last) \r\n\r\n                {\r\n\r\n                    h_new = const_time.subtract(get_step_start().get_time());\r\n\r\n                }\r\n\r\n\r\n\r\n            }\r\n\r\n\r\n\r\n        } while (!is_last_step());\r\n\r\n\r\n\r\n        const Field_ODE_State_And_Derivative<T> const_state = get_step_start();\r\n\r\n        reset_internal_state();\r\n\r\n        return const_state;\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get the minimal reduction factor for stepsize control.\r\n\r\n     * @return minimal reduction factor\r\n\r\n     */\r\n\r\n    public T get_min_reduction() \r\n\r\n    {\r\n\r\n        return min_reduction;\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Set the minimal reduction factor for stepsize control.\r\n\r\n     * @param min_reduction minimal reduction factor\r\n\r\n     */\r\n\r\n    public void set_min_reduction(const T min_reduction) \r\n\r\n    {\r\n\r\n        this.min_reduction = min_reduction;\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get the maximal growth factor for stepsize control.\r\n\r\n     * @return maximal growth factor\r\n\r\n     */\r\n\r\n    public T get_max_growth() \r\n\r\n    {\r\n\r\n        return max_growth;\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Set the maximal growth factor for stepsize control.\r\n\r\n     * @param max_growth maximal growth factor\r\n\r\n     */\r\n\r\n    public void set_max_growth(const T max_growth) \r\n\r\n    {\r\n\r\n        this.max_growth = max_growth;\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Compute the error ratio.\r\n\r\n     * @param y_dot_k derivatives computed during the first stages\r\n\r\n     * @param y0 estimate of the step at the start of the step\r\n\r\n     * @param y1 estimate of the step at the end of the step\r\n\r\n     * @param h  current step\r\n\r\n     * @return error ratio, greater than 1 if step should be rejected\r\n\r\n     */\r\n\r\n    protected virtual double estimate_error(std::vector<std::vector<T>> y_dot_k, std::vector<T> y0, std::vector<T> y1, T h);\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n