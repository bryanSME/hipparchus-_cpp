/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n\r\n\r\n//package org.hipparchus.ode.sampling;\r\n\r\n\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n//import org.hipparchus.ode.Field_ODE_State_And_Derivative;\r\n\r\n//import org.hipparchus.util.FastMath;\r\n\r\n//import org.hipparchus.util.Precision;\r\n\r\n\r\n\r\n/**\r\n\r\n * This class wraps an object implementing {@link FieldODE_Fixed_Step_Handler}\r\n\r\n * into a {@link FieldODE_Step_Handler}.\r\n\r\n\r\n\r\n * <p>This wrapper allows to use fixed step handlers with general\r\n\r\n * integrators which cannot guaranty their integration steps will\r\n\r\n * remain constant and therefore only accept general step\r\n\r\n * handlers.</p>\r\n\r\n *\r\n\r\n * <p>The stepsize used is selected at construction time. The {@link\r\n\r\n * FieldODE_Fixed_Step_Handler#handle_step handle_step} method of the underlying\r\n\r\n * {@link FieldODE_Fixed_Step_Handler} object is called at normalized times. The\r\n\r\n * normalized times can be influenced by the {@link _step_normalizer_mode} and\r\n\r\n * {@link Step_Normalizer_Bounds}.</p>\r\n\r\n *\r\n\r\n * <p>There is no constraint on the integrator, it can use any time step\r\n\r\n * it needs (time steps longer or shorter than the fixed time step and\r\n\r\n * non-integer ratios are all allowed).</p>\r\n\r\n *\r\n\r\n * <p>\r\n\r\n * <table border="1" align="center">\r\n\r\n * <tr BGCOLOR="#CCCCFF"><td colspan=6><font size="+2">Examples (step size = 0.5)</font></td></tr>\r\n\r\n * <tr BGCOLOR="#EEEEFF"><font size="+1"><td>Start time</td><td>End time</td>\r\n\r\n *  <td>Direction</td><td>{@link _step_normalizer_mode Mode}</td>\r\n\r\n *  <td>{@link Step_Normalizer_Bounds Bounds}</td><td>Output</td></font></tr>\r\n\r\n * <tr><td>0.3</td><td>3.1</td><td>forward</td><td>{@link _step_normalizer_mode#INCREMENT INCREMENT}</td><td>{@link Step_Normalizer_Bounds#NEITHER NEITHER}</td><td>0.8, 1.3, 1.8, 2.3, 2.8</td></tr>\r\n\r\n * <tr><td>0.3</td><td>3.1</td><td>forward</td><td>{@link _step_normalizer_mode#INCREMENT INCREMENT}</td><td>{@link Step_Normalizer_Bounds#FIRST FIRST}</td><td>0.3, 0.8, 1.3, 1.8, 2.3, 2.8</td></tr>\r\n\r\n * <tr><td>0.3</td><td>3.1</td><td>forward</td><td>{@link _step_normalizer_mode#INCREMENT INCREMENT}</td><td>{@link Step_Normalizer_Bounds#LAST LAST}</td><td>0.8, 1.3, 1.8, 2.3, 2.8, 3.1</td></tr>\r\n\r\n * <tr><td>0.3</td><td>3.1</td><td>forward</td><td>{@link _step_normalizer_mode#INCREMENT INCREMENT}</td><td>{@link Step_Normalizer_Bounds#BOTH BOTH}</td><td>0.3, 0.8, 1.3, 1.8, 2.3, 2.8, 3.1</td></tr>\r\n\r\n * <tr><td>0.3</td><td>3.1</td><td>forward</td><td>{@link _step_normalizer_mode#MULTIPLES MULTIPLES}</td><td>{@link Step_Normalizer_Bounds#NEITHER NEITHER}</td><td>0.5, 1.0, 1.5, 2.0, 2.5, 3.0</td></tr>\r\n\r\n * <tr><td>0.3</td><td>3.1</td><td>forward</td><td>{@link _step_normalizer_mode#MULTIPLES MULTIPLES}</td><td>{@link Step_Normalizer_Bounds#FIRST FIRST}</td><td>0.3, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0</td></tr>\r\n\r\n * <tr><td>0.3</td><td>3.1</td><td>forward</td><td>{@link _step_normalizer_mode#MULTIPLES MULTIPLES}</td><td>{@link Step_Normalizer_Bounds#LAST LAST}</td><td>0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.1</td></tr>\r\n\r\n * <tr><td>0.3</td><td>3.1</td><td>forward</td><td>{@link _step_normalizer_mode#MULTIPLES MULTIPLES}</td><td>{@link Step_Normalizer_Bounds#BOTH BOTH}</td><td>0.3, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.1</td></tr>\r\n\r\n * <tr><td>0.0</td><td>3.0</td><td>forward</td><td>{@link _step_normalizer_mode#INCREMENT INCREMENT}</td><td>{@link Step_Normalizer_Bounds#NEITHER NEITHER}</td><td>0.5, 1.0, 1.5, 2.0, 2.5, 3.0</td></tr>\r\n\r\n * <tr><td>0.0</td><td>3.0</td><td>forward</td><td>{@link _step_normalizer_mode#INCREMENT INCREMENT}</td><td>{@link Step_Normalizer_Bounds#FIRST FIRST}</td><td>0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0</td></tr>\r\n\r\n * <tr><td>0.0</td><td>3.0</td><td>forward</td><td>{@link _step_normalizer_mode#INCREMENT INCREMENT}</td><td>{@link Step_Normalizer_Bounds#LAST LAST}</td><td>0.5, 1.0, 1.5, 2.0, 2.5, 3.0</td></tr>\r\n\r\n * <tr><td>0.0</td><td>3.0</td><td>forward</td><td>{@link _step_normalizer_mode#INCREMENT INCREMENT}</td><td>{@link Step_Normalizer_Bounds#BOTH BOTH}</td><td>0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0</td></tr>\r\n\r\n * <tr><td>0.0</td><td>3.0</td><td>forward</td><td>{@link _step_normalizer_mode#MULTIPLES MULTIPLES}</td><td>{@link Step_Normalizer_Bounds#NEITHER NEITHER}</td><td>0.5, 1.0, 1.5, 2.0, 2.5, 3.0</td></tr>\r\n\r\n * <tr><td>0.0</td><td>3.0</td><td>forward</td><td>{@link _step_normalizer_mode#MULTIPLES MULTIPLES}</td><td>{@link Step_Normalizer_Bounds#FIRST FIRST}</td><td>0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0</td></tr>\r\n\r\n * <tr><td>0.0</td><td>3.0</td><td>forward</td><td>{@link _step_normalizer_mode#MULTIPLES MULTIPLES}</td><td>{@link Step_Normalizer_Bounds#LAST LAST}</td><td>0.5, 1.0, 1.5, 2.0, 2.5, 3.0</td></tr>\r\n\r\n * <tr><td>0.0</td><td>3.0</td><td>forward</td><td>{@link _step_normalizer_mode#MULTIPLES MULTIPLES}</td><td>{@link Step_Normalizer_Bounds#BOTH BOTH}</td><td>0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0</td></tr>\r\n\r\n * <tr><td>3.1</td><td>0.3</td><td>backward</td><td>{@link _step_normalizer_mode#INCREMENT INCREMENT}</td><td>{@link Step_Normalizer_Bounds#NEITHER NEITHER}</td><td>2.6, 2.1, 1.6, 1.1, 0.6</td></tr>\r\n\r\n * <tr><td>3.1</td><td>0.3</td><td>backward</td><td>{@link _step_normalizer_mode#INCREMENT INCREMENT}</td><td>{@link Step_Normalizer_Bounds#FIRST FIRST}</td><td>3.1, 2.6, 2.1, 1.6, 1.1, 0.6</td></tr>\r\n\r\n * <tr><td>3.1</td><td>0.3</td><td>backward</td><td>{@link _step_normalizer_mode#INCREMENT INCREMENT}</td><td>{@link Step_Normalizer_Bounds#LAST LAST}</td><td>2.6, 2.1, 1.6, 1.1, 0.6, 0.3</td></tr>\r\n\r\n * <tr><td>3.1</td><td>0.3</td><td>backward</td><td>{@link _step_normalizer_mode#INCREMENT INCREMENT}</td><td>{@link Step_Normalizer_Bounds#BOTH BOTH}</td><td>3.1, 2.6, 2.1, 1.6, 1.1, 0.6, 0.3</td></tr>\r\n\r\n * <tr><td>3.1</td><td>0.3</td><td>backward</td><td>{@link _step_normalizer_mode#MULTIPLES MULTIPLES}</td><td>{@link Step_Normalizer_Bounds#NEITHER NEITHER}</td><td>3.0, 2.5, 2.0, 1.5, 1.0, 0.5</td></tr>\r\n\r\n * <tr><td>3.1</td><td>0.3</td><td>backward</td><td>{@link _step_normalizer_mode#MULTIPLES MULTIPLES}</td><td>{@link Step_Normalizer_Bounds#FIRST FIRST}</td><td>3.1, 3.0, 2.5, 2.0, 1.5, 1.0, 0.5</td></tr>\r\n\r\n * <tr><td>3.1</td><td>0.3</td><td>backward</td><td>{@link _step_normalizer_mode#MULTIPLES MULTIPLES}</td><td>{@link Step_Normalizer_Bounds#LAST LAST}</td><td>3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.3</td></tr>\r\n\r\n * <tr><td>3.1</td><td>0.3</td><td>backward</td><td>{@link _step_normalizer_mode#MULTIPLES MULTIPLES}</td><td>{@link Step_Normalizer_Bounds#BOTH BOTH}</td><td>3.1, 3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.3</td></tr>\r\n\r\n * <tr><td>3.0</td><td>0.0</td><td>backward</td><td>{@link _step_normalizer_mode#INCREMENT INCREMENT}</td><td>{@link Step_Normalizer_Bounds#NEITHER NEITHER}</td><td>2.5, 2.0, 1.5, 1.0, 0.5, 0.0</td></tr>\r\n\r\n * <tr><td>3.0</td><td>0.0</td><td>backward</td><td>{@link _step_normalizer_mode#INCREMENT INCREMENT}</td><td>{@link Step_Normalizer_Bounds#FIRST FIRST}</td><td>3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0</td></tr>\r\n\r\n * <tr><td>3.0</td><td>0.0</td><td>backward</td><td>{@link _step_normalizer_mode#INCREMENT INCREMENT}</td><td>{@link Step_Normalizer_Bounds#LAST LAST}</td><td>2.5, 2.0, 1.5, 1.0, 0.5, 0.0</td></tr>\r\n\r\n * <tr><td>3.0</td><td>0.0</td><td>backward</td><td>{@link _step_normalizer_mode#INCREMENT INCREMENT}</td><td>{@link Step_Normalizer_Bounds#BOTH BOTH}</td><td>3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0</td></tr>\r\n\r\n * <tr><td>3.0</td><td>0.0</td><td>backward</td><td>{@link _step_normalizer_mode#MULTIPLES MULTIPLES}</td><td>{@link Step_Normalizer_Bounds#NEITHER NEITHER}</td><td>2.5, 2.0, 1.5, 1.0, 0.5, 0.0</td></tr>\r\n\r\n * <tr><td>3.0</td><td>0.0</td><td>backward</td><td>{@link _step_normalizer_mode#MULTIPLES MULTIPLES}</td><td>{@link Step_Normalizer_Bounds#FIRST FIRST}</td><td>3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0</td></tr>\r\n\r\n * <tr><td>3.0</td><td>0.0</td><td>backward</td><td>{@link _step_normalizer_mode#MULTIPLES MULTIPLES}</td><td>{@link Step_Normalizer_Bounds#LAST LAST}</td><td>2.5, 2.0, 1.5, 1.0, 0.5, 0.0</td></tr>\r\n\r\n * <tr><td>3.0</td><td>0.0</td><td>backward</td><td>{@link _step_normalizer_mode#MULTIPLES MULTIPLES}</td><td>{@link Step_Normalizer_Bounds#BOTH BOTH}</td><td>3.0, 2.5, 2.0, 1.5, 1.0, 0.5, 0.0</td></tr>\r\n\r\n * </table>\r\n\r\n * </p>\r\n\r\n *\r\n\r\n * @param <T> the type of the field elements\r\n\r\n * @see FieldODE_Step_Handler\r\n\r\n * @see FieldODE_Fixed_Step_Handler\r\n\r\n * @see _step_normalizer_mode\r\n\r\n * @see Step_Normalizer_Bounds\r\n\r\n */\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\nclass FieldStep_Normalizer : FieldODE_Step_Handler<T> \r\n\r\n{\r\n\r\n\r\n\r\n    /** Fixed time step. */\r\n\r\n    private double h;\r\n\r\n\r\n\r\n    /** Underlying step handler. */\r\n\r\n    private const FieldODE_Fixed_Step_Handler<T> handler;\r\n\r\n\r\n\r\n    /** First step state. */\r\n\r\n    private Field_ODE_State_And_Derivative<T> first;\r\n\r\n\r\n\r\n    /** Last step step. */\r\n\r\n    private Field_ODE_State_And_Derivative<T> last;\r\n\r\n\r\n\r\n    /** Integration direction indicator. */\r\n\r\n    private bool forward;\r\n\r\n\r\n\r\n    /** The step normalizer bounds settings to use. */\r\n\r\n    private const Step_Normalizer_Bounds bounds;\r\n\r\n\r\n\r\n    /** The step normalizer mode to use. */\r\n\r\n    private const _step_normalizer_mode mode;\r\n\r\n\r\n\r\n    /** Simple constructor. Uses {@link _step_normalizer_mode#INCREMENT INCREMENT}\r\n\r\n     * mode, and {@link Step_Normalizer_Bounds#FIRST FIRST} bounds setting, for\r\n\r\n     * backwards compatibility.\r\n\r\n     * @param h fixed time step (sign is not used)\r\n\r\n     * @param handler fixed time step handler to wrap\r\n\r\n     */\r\n\r\n    public FieldStep_Normalizer(const double h, const FieldODE_Fixed_Step_Handler<T> handler) \r\n\r\n    {\r\n\r\n        this(h, handler, _step_normalizer_mode.INCREMENT, Step_Normalizer_Bounds.FIRST);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Simple constructor. Uses {@link Step_Normalizer_Bounds#FIRST FIRST}\r\n\r\n     * bounds setting.\r\n\r\n     * @param h fixed time step (sign is not used)\r\n\r\n     * @param handler fixed time step handler to wrap\r\n\r\n     * @param mode step normalizer mode to use\r\n\r\n     */\r\n\r\n    public FieldStep_Normalizer(const double h, const FieldODE_Fixed_Step_Handler<T> handler, const _step_normalizer_mode mode) \r\n\r\n    {\r\n\r\n        this(h, handler, mode, Step_Normalizer_Bounds.FIRST);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Simple constructor. Uses {@link _step_normalizer_mode#INCREMENT INCREMENT}\r\n\r\n     * mode.\r\n\r\n     * @param h fixed time step (sign is not used)\r\n\r\n     * @param handler fixed time step handler to wrap\r\n\r\n     * @param bounds step normalizer bounds setting to use\r\n\r\n     */\r\n\r\n    public FieldStep_Normalizer(const double h, const FieldODE_Fixed_Step_Handler<T> handler, const Step_Normalizer_Bounds bounds) \r\n\r\n    {\r\n\r\n        this(h, handler, _step_normalizer_mode.INCREMENT, bounds);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Simple constructor.\r\n\r\n     * @param h fixed time step (sign is not used)\r\n\r\n     * @param handler fixed time step handler to wrap\r\n\r\n     * @param mode step normalizer mode to use\r\n\r\n     * @param bounds step normalizer bounds setting to use\r\n\r\n     */\r\n\r\n    public FieldStep_Normalizer(const double h, const FieldODE_Fixed_Step_Handler<T> handler, const _step_normalizer_mode mode, const Step_Normalizer_Bounds bounds) \r\n\r\n    {\r\n\r\n        this.h       = std::abs(h);\r\n\r\n        this.handler = handler;\r\n\r\n        this.mode    = mode;\r\n\r\n        this.bounds  = bounds;\r\n\r\n        first        = null;\r\n\r\n        last         = null;\r\n\r\n        forward      = true;\r\n\r\n    }\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n    //override\r\n\r\n    public void init(const Field_ODE_State_And_Derivative<T> initial_state, const T const_time) \r\n\r\n    {\r\n\r\n\r\n\r\n        first   = null;\r\n\r\n        last    = null;\r\n\r\n        forward = true;\r\n\r\n\r\n\r\n        // initialize the underlying handler\r\n\r\n        handler.init(initial_state, const_time);\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n    //override\r\n\r\n    public void handle_step(const FieldODE_StateInterpolator<T> interpolator) \r\n\r\n    {\r\n\r\n        // The first time, update the last state with the start information.\r\n\r\n        if (last == null) \r\n\r\n        {\r\n\r\n\r\n\r\n            first   = interpolator.get_previous_state();\r\n\r\n            last    = first;\r\n\r\n\r\n\r\n            // Take the integration direction into account.\r\n\r\n            forward = interpolator.is_forward();\r\n\r\n            if (!forward) \r\n\r\n            {\r\n\r\n                h = -h;\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        // Calculate next normalized step time.\r\n\r\n        T next_time = (mode == _step_normalizer_mode.INCREMENT) ?\r\n\r\n                     last.get_time().add(h) :\r\n\r\n                     last.get_time().get_field().get_zero().add((std::floor(last.get_time().get_real() / h) + 1) * h);\r\n\r\n        if (mode == _step_normalizer_mode.MULTIPLES &&\r\n\r\n            Precision.equals(next_time.get_real(), last.get_time().get_real(), 1)) \r\n\r\n            {\r\n\r\n            next_time = next_time.add(h);\r\n\r\n        }\r\n\r\n\r\n\r\n        // Process normalized steps as long as they are in the current step.\r\n\r\n        bool next_in_step = is_next_in_step(next_time, interpolator);\r\n\r\n        while (next_in_step) \r\n\r\n        {\r\n\r\n            // Output the stored previous step.\r\n\r\n            do_normalized_step(false);\r\n\r\n\r\n\r\n            // Store the next step as last step.\r\n\r\n            last = interpolator.get_interpolated_state(next_time);\r\n\r\n\r\n\r\n            // Move on to the next step.\r\n\r\n            next_time = next_time.add(h);\r\n\r\n            next_in_step = is_next_in_step(next_time, interpolator);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n    //override\r\n\r\n    public void finish(const Field_ODE_State_And_Derivative<T> const_state) \r\n\r\n    {\r\n\r\n        // There will be no more steps. The stored one should be given to\r\n\r\n        // the handler. We may have to output one more step. Only the last\r\n\r\n        // one of those should be flagged as being the last.\r\n\r\n        const bool add_last = bounds.last_included() && last.get_time().get_real() != const_state.get_time().get_real();\r\n\r\n        do_normalized_step(!add_last);\r\n\r\n        if (add_last) \r\n\r\n        {\r\n\r\n            last = const_state;\r\n\r\n            do_normalized_step(true);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Returns a value indicating whether the next normalized time is in the\r\n\r\n     * current step.\r\n\r\n     * @param next_time the next normalized time\r\n\r\n     * @param interpolator interpolator for the last accepted step, to use to\r\n\r\n     * get the end time of the current step\r\n\r\n     * @return value indicating whether the next normalized time is in the\r\n\r\n     * current step\r\n\r\n     */\r\n\r\n    private bool is_next_in_step(const T next_time, const FieldODE_StateInterpolator<T> interpolator) \r\n\r\n    {\r\n\r\n        return forward ?\r\n\r\n               next_time.get_real() <= interpolator.get_current_state().get_time().get_real() :\r\n\r\n               next_time.get_real() >= interpolator.get_current_state().get_time().get_real();\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Invokes the underlying step handler for the current normalized step.\r\n\r\n     * @param is_last true if the step is the last one\r\n\r\n     */\r\n\r\n    private void do_normalized_step(const bool is_last) \r\n\r\n    {\r\n\r\n        if (!bounds.first_included() && first.get_time().get_real() == last.get_time().get_real()) \r\n\r\n        {\r\n\r\n            return;\r\n\r\n        }\r\n\r\n        handler.handle_step(last, is_last);\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n