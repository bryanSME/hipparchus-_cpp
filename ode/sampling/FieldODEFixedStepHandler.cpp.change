/*\r\n\r\n * Licensed to the Hipparchus project under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The Hipparchus project licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n//package org.hipparchus.ode.sampling;\r\n\r\n\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n//import org.hipparchus.ode.Field_ODE_State_And_Derivative;\r\n\r\n\r\n\r\n/**\r\n\r\n * This interface represents a handler that should be called after\r\n\r\n * each successful fixed step.\r\n\r\n\r\n\r\n * <p>This interface should be implemented by anyone who is interested\r\n\r\n * in getting the solution of an ordinary differential equation at\r\n\r\n * fixed time steps. Objects implementing this interface should be\r\n\r\n * wrapped within an instance of {@link FieldStep_Normalizer} that itself\r\n\r\n * is used as the general {@link FieldODE_Step_Handler} by the integrator. The\r\n\r\n * {@link FieldStep_Normalizer} object is called according to the integrator\r\n\r\n * internal algorithms and it calls objects implementing this\r\n\r\n * interface as necessary at fixed time steps.</p>\r\n\r\n *\r\n\r\n * @see FieldODE_Step_Handler\r\n\r\n * @see FieldStep_Normalizer\r\n\r\n * @see FieldODE_StateInterpolator\r\n\r\n * @param <T> the type of the field elements\r\n\r\n */\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\nclass FieldODE_Fixed_Step_Handler \r\n\r\n{\r\n\r\n\r\n\r\n    /** Initialize step handler at the start of an ODE integration.\r\n\r\n     * <p>\r\n\r\n     * This method is called once at the start of the integration. It\r\n\r\n     * may be used by the step handler to initialize some internal data\r\n\r\n     * if needed.\r\n\r\n     * </p>\r\n\r\n     * <p>\r\n\r\n     * The default implementation does nothing.\r\n\r\n     * </p>\r\n\r\n     * @param initial_state initial time, state vector and derivative\r\n\r\n     * @param const_time target time for the integration\r\n\r\n     */\r\n\r\n    default void init(Field_ODE_State_And_Derivative<T> initial_state, T const_time) \r\n\r\n    {\r\n\r\n        // nothing by default\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Handle the last accepted step\r\n\r\n     * @param state current value of the independent <i>time</i> variable, * state vector and derivative\r\n\r\n     * For efficiency purposes, the {@link FieldStep_Normalizer} class reuses\r\n\r\n     * the same array on each call, so if\r\n\r\n     * the instance wants to keep it across all calls (for example to\r\n\r\n     * provide at the end of the integration a complete array of all\r\n\r\n     * steps), it should build a local copy store this copy.\r\n\r\n     * @param is_last true if the step is the last one\r\n\r\n     */\r\n\r\n    void handle_step(Field_ODE_State_And_Derivative<T> state, bool is_last);\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n