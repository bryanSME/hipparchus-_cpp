/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n\r\n\r\n//package org.hipparchus.linear;\r\n\r\n\r\n\r\n//import org.hipparchus.Field_Element;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n * Interface handling decomposition algorithms that can solve A &times; X = B.\r\n\r\n * <p>\r\n\r\n * Decomposition algorithms decompose an A matrix has a product of several specific\r\n\r\n * matrices from which they can solve A &times; X = B in least squares sense: they find X\r\n\r\n * such that ||A &times; X - B|| is minimal.\r\n\r\n * <p>\r\n\r\n * Some solvers like {@link FieldLU_Decomposition} can only find the solution for\r\n\r\n * square matrices and when the solution is an exact linear solution, i.e. when\r\n\r\n * ||A &times; X - B|| is exactly 0. Other solvers can also find solutions\r\n\r\n * with non-square matrix A and with non-null minimal norm. If an exact linear\r\n\r\n * solution exists it is also the minimal norm solution.\r\n\r\n *\r\n\r\n * @param <T> the type of the field elements\r\n\r\n */\r\n\r\nclass FieldDecomposition_Solver<T extends Field_Element<T>> \r\n\r\n{\r\n\r\n\r\n\r\n    /** Solve the linear equation A &times; X = B for matrices A.\r\n\r\n     * <p>The A matrix is implicit, it is provided by the underlying\r\n\r\n     * decomposition algorithm.</p>\r\n\r\n     * @param b right-hand side of the equation A &times; X = B\r\n\r\n     * @return a vector X that minimizes the two norm of A &times; X - B\r\n\r\n     * @org.hipparchus.exception.\r\n\r\n     * if the matrices dimensions do not match or the decomposed matrix\r\n\r\n     * is singular.\r\n\r\n     */\r\n\r\n    Field_Vector<T> solve(Field_Vector<T> b);\r\n\r\n\r\n\r\n    /** Solve the linear equation A &times; X = B for matrices A.\r\n\r\n     * <p>The A matrix is implicit, it is provided by the underlying\r\n\r\n     * decomposition algorithm.</p>\r\n\r\n     * @param b right-hand side of the equation A &times; X = B\r\n\r\n     * @return a matrix X that minimizes the two norm of A &times; X - B\r\n\r\n     * @org.hipparchus.exception.\r\n\r\n     * if the matrices dimensions do not match or the decomposed matrix\r\n\r\n     * is singular.\r\n\r\n     */\r\n\r\n    Field_Matrix<T> solve(Field_Matrix<T> b);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Check if the decomposed matrix is non-singular.\r\n\r\n     * @return true if the decomposed matrix is non-singular\r\n\r\n     */\r\n\r\n    bool is_non_singular();\r\n\r\n\r\n\r\n    /** Get the inverse (or pseudo-inverse) of the decomposed matrix.\r\n\r\n     * @return inverse matrix\r\n\r\n     * @org.hipparchus.exception.\r\n\r\n     * if the decomposed matrix is singular.\r\n\r\n     */\r\n\r\n    Field_Matrix<T> get_inverse();\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Returns the number of rows in the matrix.\r\n\r\n     *\r\n\r\n     * @return row_dimension\r\n\r\n     * @since 2.0\r\n\r\n     */\r\n\r\n    int get_row_dimension();\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Returns the number of columns in the matrix.\r\n\r\n     *\r\n\r\n     * @return column_dimension\r\n\r\n     * @since 2.0\r\n\r\n     */\r\n\r\n    int get_column_dimension();\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n