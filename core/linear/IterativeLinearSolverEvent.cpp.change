/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n//package org.hipparchus.linear;\r\n\r\n\r\n\r\n//import org.hipparchus.exception.Localized_Core_Formats;\r\n\r\n//import org.hipparchus.exception.Math_Runtime_Exception;\r\n\r\n//import org.hipparchus.util.Iteration_Event;\r\n\r\n\r\n\r\n/**\r\n\r\n * This is the base class for all events occurring during the iterations of a\r\n\r\n * {@link Iterative_Linear_Solver}.\r\n\r\n *\r\n\r\n */\r\n\r\npublic virtual class Iterative_Linear_SolverEvent\r\n\r\n    extends Iteration_Event \r\n\r\n    {\r\n\r\n    /** Serialization identifier. */\r\n\r\n    private static const long serial_version_uid = 20120129L;\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Creates a instance of this class.\r\n\r\n     *\r\n\r\n     * @param source the iterative algorithm on which the event initially\r\n\r\n     * occurred\r\n\r\n     * @param iterations the number of iterations performed at the time\r\n\r\n     * {@code this} event is created\r\n\r\n     */\r\n\r\n    public Iterative_Linear_SolverEvent(const Object source, const int iterations) \r\n\r\n    {\r\n\r\n        super(source, iterations);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Returns the current right-hand side of the linear system to be solved.\r\n\r\n     * This method should return an unmodifiable view, or a deep copy of the\r\n\r\n     * actual right-hand side vector, in order not to compromise subsequent\r\n\r\n     * iterations of the source {@link Iterative_Linear_Solver}.\r\n\r\n     *\r\n\r\n     * @return the right-hand side vector, b\r\n\r\n     */\r\n\r\n    public virtual Real_Vector get_right_hand_side_vector();\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Returns the norm of the residual. The returned value is not required to\r\n\r\n     * be <em>exact</em>. Instead, the norm of the so-called <em>updated</em>\r\n\r\n     * residual (if available) should be returned. For example, the\r\n\r\n     * {@link Conjugate_Gradient conjugate gradient} method computes a sequence\r\n\r\n     * of residuals, the norm of which is cheap to compute. However, due to\r\n\r\n     * accumulation of round-off errors, this residual might differ from the\r\n\r\n     * true residual after some iterations. See e.g. A. Greenbaum and\r\n\r\n     * Z. Strakos, <em>Predicting the Behavior of Finite Precision Lanzos and\r\n\r\n     * Conjugate Gradient Computations</em>, Technical Report 538, Department of\r\n\r\n     * Computer Science, New York University, 1991 (available\r\n\r\n     * <a href="http://www.archive.org/details/predictingbehavi00gree">here</a>).\r\n\r\n     *\r\n\r\n     * @return the norm of the residual, ||r||\r\n\r\n     */\r\n\r\n    public virtual double get_norm_of_residual();\r\n\r\n\r\n\r\n    /**\r\n\r\n     * <p>\r\n\r\n     * Returns the residual. This is an optional operation, as all iterative\r\n\r\n     * linear solvers do not provide cheap estimate of the updated residual\r\n\r\n     * vector, in which case\r\n\r\n     * </p>\r\n\r\n     * <ul>\r\n\r\n     * <li>this method should throw a\r\n\r\n     * {@link Math_Runtime_Exception},</li>\r\n\r\n     * <li>{@link #provides_residual()} returns {@code false}.</li>\r\n\r\n     * </ul>\r\n\r\n     * <p>\r\n\r\n     * The default implementation a\r\n\r\n     * {@link Math_Runtime_Exception}. If this method is overriden, * then {@link #provides_residual()} should be overriden as well.\r\n\r\n     * </p>\r\n\r\n     *\r\n\r\n     * @return the updated residual, r\r\n\r\n     */\r\n\r\n    public Real_Vector get_residual() \r\n\r\n    {\r\n\r\n        throw Math_Runtime_Exception(Localized_Core_Formats.UNSUPPORTED_OPERATION);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Returns the current estimate of the solution to the linear system to be\r\n\r\n     * solved. This method should return an unmodifiable view, or a deep copy of\r\n\r\n     * the actual current solution, in order not to compromise subsequent\r\n\r\n     * iterations of the source {@link Iterative_Linear_Solver}.\r\n\r\n     *\r\n\r\n     * @return the solution, x\r\n\r\n     */\r\n\r\n    public virtual Real_Vector get_solution();\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Returns {@code true} if {@link #get_residual()} is supported. The default\r\n\r\n     * implementation returns {@code false}.\r\n\r\n     *\r\n\r\n     * @return {@code false} if {@link #get_residual()} a\r\n\r\n     * {@link Math_Runtime_Exception}\r\n\r\n     */\r\n\r\n    public bool provides_residual() \r\n\r\n    {\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n