/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n\r\n\r\n//package org.hipparchus.linear;\r\n\r\n#include "MatrixUtils.h"\r\n\r\n//import java.util.Arrays;\r\n\r\n//import java.util.function.Predicate;\r\n\r\n\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n//import org.hipparchus.exception.Localized_Core_Formats;\r\n\r\n//import org.hipparchus.exception.;\r\n\r\n//import org.hipparchus.util.FastMath;\r\n\r\n//import org.hipparchus.util.Math_Arrays;\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n * Calculates the QR-decomposition of a field matrix.\r\n\r\n * <p>The QR-decomposition of a matrix A consists of two matrices Q and R\r\n\r\n * that satisfy: A = QR, Q is orthogonal (Q<sup>T</sup>Q = I), and R is\r\n\r\n * upper triangular. If A is m&times;n, Q is m&times;m and R m&times;n.</p>\r\n\r\n * <p>This class compute the decomposition using Householder reflectors.</p>\r\n\r\n * <p>For efficiency purposes, the decomposition in packed form is transposed.\r\n\r\n * This allows inner loop to iterate inside rows, which is much more cache-efficient\r\n\r\n * in Java.</p>\r\n\r\n * <p>This class is based on the class {@link QR_Decomposition}.</p>\r\n\r\n *\r\n\r\n * @param <T> type of the underlying field elements\r\n\r\n * @see <a href="http://mathworld.wolfram.com/QR_Decomposition.html">MathWorld</a>\r\n\r\n * @see <a href="http://en.wikipedia.org/wiki/QR_decomposition">Wikipedia</a>\r\n\r\n *\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\nclass FieldQR_Decomposition \r\n\r\n{\r\n\r\n    /**\r\n\r\n     * A packed TRANSPOSED representation of the QR decomposition.\r\n\r\n     * <p>The elements BELOW the diagonal are the elements of the UPPER triangular\r\n\r\n     * matrix R, and the rows ABOVE the diagonal are the Householder reflector vectors\r\n\r\n     * from which an explicit form of Q can be recomputed if desired.</p>\r\n\r\n     */\r\n\r\n    private std::vector<std::vector<T>> qrt;\r\n\r\n    /** The diagonal elements of R. */\r\n\r\n    private std::vector<T> r_diag;\r\n\r\n    /** Cached value of Q. */\r\n\r\n    private Field_Matrix<T> cached_q;\r\n\r\n    /** Cached value of QT. */\r\n\r\n    private Field_Matrix<T> cached_q_t;\r\n\r\n    /** Cached value of R. */\r\n\r\n    private Field_Matrix<T> cached_r;\r\n\r\n    /** Cached value of H. */\r\n\r\n    private Field_Matrix<T> cached_h;\r\n\r\n    /** Singularity threshold. */\r\n\r\n    private const T threshold;\r\n\r\n    /** checker for zero. */\r\n\r\n    private const Predicate<T> zero_checker;\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Calculates the QR-decomposition of the given matrix.\r\n\r\n     * The singularity threshold defaults to zero.\r\n\r\n     *\r\n\r\n     * @param matrix The matrix to decompose.\r\n\r\n     *\r\n\r\n     * @see #FieldQR_Decomposition(Field_Matrix, Calculus_Field_Element)\r\n\r\n     */\r\n\r\n    public FieldQR_Decomposition(Field_Matrix<T> matrix) \r\n\r\n    {\r\n\r\n        this(matrix, matrix.get_field().get_zero());\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Calculates the QR-decomposition of the given matrix.\r\n\r\n     *\r\n\r\n     * @param matrix The matrix to decompose.\r\n\r\n     * @param threshold Singularity threshold.\r\n\r\n     */\r\n\r\n    public FieldQR_Decomposition(Field_Matrix<T> matrix, T threshold) \r\n\r\n    {\r\n\r\n        this(matrix, threshold, e -> e.is_zero());\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Calculates the QR-decomposition of the given matrix.\r\n\r\n     *\r\n\r\n     * @param matrix The matrix to decompose.\r\n\r\n     * @param threshold Singularity threshold.\r\n\r\n     * @param zero_checker checker for zero\r\n\r\n     */\r\n\r\n    public FieldQR_Decomposition(Field_Matrix<T> matrix, T threshold, Predicate<T> zero_checker) \r\n\r\n    {\r\n\r\n        this.threshold   = threshold;\r\n\r\n        this.zero_checker = zero_checker;\r\n\r\n\r\n\r\n        const int m = matrix.get_row_dimension();\r\n\r\n        const int n = matrix.get_column_dimension();\r\n\r\n        qrt = matrix.transpose().get_data();\r\n\r\n        r_diag = Math_Arrays::build_array(threshold.get_field(),std::min(m, n));\r\n\r\n        cached_q  = null;\r\n\r\n        cached_q_t = null;\r\n\r\n        cached_r  = null;\r\n\r\n        cached_h  = null;\r\n\r\n\r\n\r\n        decompose(qrt);\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Decompose matrix.\r\n\r\n     * @param matrix transposed matrix\r\n\r\n     */\r\n\r\n    protected void decompose(std::vector<std::vector<T>> matrix) \r\n\r\n    {\r\n\r\n        for (const int& minor = 0; minor < std::min(matrix.size(), matrix[0].size()); minor++) \r\n\r\n        {\r\n\r\n            perform_householder_reflection(minor, matrix);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Perform Householder reflection for a minor A(minor, minor) of A.\r\n\r\n     * @param minor minor index\r\n\r\n     * @param matrix transposed matrix\r\n\r\n     */\r\n\r\n    protected void perform_householder_reflection(const int& minor, std::vector<std::vector<T>> matrix) \r\n\r\n    {\r\n\r\n\r\n\r\n        const std::vector<T> qrt_minor = matrix[minor];\r\n\r\n        const T zero = threshold.get_field().get_zero();\r\n\r\n        /*\r\n\r\n         * Let x be the first column of the minor, and a^2 = |x|^2.\r\n\r\n         * x will be in the positions qr[minor][minor] through qr[m][minor].\r\n\r\n         * The first column of the transformed minor will be (a,0,0,..)'\r\n\r\n         * The sign of a is chosen to be opposite to the sign of the first\r\n\r\n         * component of x. Let's find a:\r\n\r\n         */\r\n\r\n        T x_norm_sqr = zero;\r\n\r\n        for (int row = minor; row < qrt_minor.size(); row++) \r\n\r\n        {\r\n\r\n            const T c = qrt_minor[row];\r\n\r\n            x_norm_sqr = x_norm_sqr.add(c.multiply(c));\r\n\r\n        }\r\n\r\n        const T a = (qrt_minor[minor].get_real() > 0) ? x_norm_sqr.sqrt().negate() : x_norm_sqr.sqrt();\r\n\r\n        r_diag[minor] = a;\r\n\r\n\r\n\r\n        if (!zero_checker.test(a)) \r\n\r\n        {\r\n\r\n\r\n\r\n            /*\r\n\r\n             * Calculate the normalized reflection vector v and transform\r\n\r\n             * the first column. We know the norm of v beforehand: v = x-ae\r\n\r\n             * so |v|^2 = <x-ae,x-ae> = <x,x>-2a<x,e>+a^2<e,e> =\r\n\r\n             * a^2+a^2-2a<x,e> = 2a*(a - <x,e>).\r\n\r\n             * Here <x, e> is now qr[minor][minor].\r\n\r\n             * v = x-ae is stored in the column at qr:\r\n\r\n             */\r\n\r\n            qrt_minor[minor] = qrt_minor[minor].subtract(a); // now |v|^2 = -2a*(qr[minor][minor])\r\n\r\n\r\n\r\n            /*\r\n\r\n             * Transform the rest of the columns of the minor:\r\n\r\n             * They will be transformed by the matrix H = I-2vv'/|v|^2.\r\n\r\n             * If x is a column vector of the minor, then\r\n\r\n             * Hx = (I-2vv'/|v|^2)x = x-2vv'x/|v|^2 = x - 2<x,v>/|v|^2 v.\r\n\r\n             * Therefore the transformation is easily calculated by\r\n\r\n             * subtracting the column vector (2<x,v>/|v|^2)v from x.\r\n\r\n             *\r\n\r\n             * Let 2<x,v>/|v|^2 = alpha. From above we have\r\n\r\n             * |v|^2 = -2a*(qr[minor][minor]), so\r\n\r\n             * alpha = -<x,v>/(a*qr[minor][minor])\r\n\r\n             */\r\n\r\n            for (int col = minor+1; col < matrix.size(); col++) \r\n\r\n            {\r\n\r\n                const std::vector<T> qrt_col = matrix[col];\r\n\r\n                T alpha = zero;\r\n\r\n                for (int row = minor; row < qrt_col.size(); row++) \r\n\r\n                {\r\n\r\n                    alpha = alpha.subtract(qrt_col[row].multiply(qrt_minor[row]));\r\n\r\n                }\r\n\r\n                alpha = alpha.divide(a.multiply(qrt_minor[minor]));\r\n\r\n\r\n\r\n                // Subtract the column vector alpha*v from x.\r\n\r\n                for (int row = minor; row < qrt_col.size(); row++) \r\n\r\n                {\r\n\r\n                    qrt_col[row] = qrt_col[row].subtract(alpha.multiply(qrt_minor[row]));\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Returns the matrix R of the decomposition.\r\n\r\n     * <p>R is an upper-triangular matrix</p>\r\n\r\n     * @return the R matrix\r\n\r\n     */\r\n\r\n    public Field_Matrix<T> get_r() \r\n\r\n    {\r\n\r\n\r\n\r\n        if (cached_r == null) \r\n\r\n        {\r\n\r\n\r\n\r\n            // R is supposed to be m x n\r\n\r\n            const int n = qrt.size();\r\n\r\n            const int m = qrt[0].size();\r\n\r\n            std::vector<std::vector<T>> ra = Math_Arrays::build_array(threshold.get_field(), m, n);\r\n\r\n            // copy the diagonal from r_diag and the upper triangle of qr\r\n\r\n            for (int row = std::min(m, n) - 1; row >= 0; row--) \r\n\r\n            {\r\n\r\n                ra[row][row] = r_diag[row];\r\n\r\n                for (int col = row + 1; col < n; col++) \r\n\r\n                {\r\n\r\n                    ra[row][col] = qrt[col][row];\r\n\r\n                }\r\n\r\n            }\r\n\r\n            cached_r = Matrix_Utils.create_field_matrix(ra);\r\n\r\n        }\r\n\r\n\r\n\r\n        // return the cached matrix\r\n\r\n        return cached_r;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Returns the matrix Q of the decomposition.\r\n\r\n     * <p>Q is an orthogonal matrix</p>\r\n\r\n     * @return the Q matrix\r\n\r\n     */\r\n\r\n    public Field_Matrix<T> get_q() \r\n\r\n    {\r\n\r\n        if (cached_q == null) \r\n\r\n        {\r\n\r\n            cached_q = get_q_t().transpose();\r\n\r\n        }\r\n\r\n        return cached_q;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Returns the transpose of the matrix Q of the decomposition.\r\n\r\n     * <p>Q is an orthogonal matrix</p>\r\n\r\n     * @return the transpose of the Q matrix, Q<sup>T</sup>\r\n\r\n     */\r\n\r\n    public Field_Matrix<T> get_q_t() \r\n\r\n    {\r\n\r\n        if (cached_q_t == null) \r\n\r\n        {\r\n\r\n\r\n\r\n            // QT is supposed to be m x m\r\n\r\n            const int n = qrt.size();\r\n\r\n            const int m = qrt[0].size();\r\n\r\n            std::vector<std::vector<T>> qta = Math_Arrays::build_array(threshold.get_field(), m, m);\r\n\r\n\r\n\r\n            /*\r\n\r\n             * Q = Q1 Q2 ... Q_m, so Q is formed by first constructing Q_m and then\r\n\r\n             * applying the Householder transformations Q_(m-1),Q_(m-2),...,Q1 in\r\n\r\n             * succession to the result\r\n\r\n             */\r\n\r\n            for (const int& minor = m - 1; minor >= std::min(m, n); minor--) \r\n\r\n            {\r\n\r\n                qta[minor][minor] = threshold.get_field().get_one();\r\n\r\n            }\r\n\r\n\r\n\r\n            for (const int& minor = std::min(m, n)-1; minor >= 0; minor--)\r\n\r\n            {\r\n\r\n                const std::vector<T> qrt_minor = qrt[minor];\r\n\r\n                qta[minor][minor] = threshold.get_field().get_one();\r\n\r\n                if (!qrt_minor[minor].is_zero()) \r\n\r\n                {\r\n\r\n                    for (int col = minor; col < m; col++) \r\n\r\n                    {\r\n\r\n                        T alpha = threshold.get_field().get_zero();\r\n\r\n                        for (int row = minor; row < m; row++) \r\n\r\n                        {\r\n\r\n                            alpha = alpha.subtract(qta[col][row].multiply(qrt_minor[row]));\r\n\r\n                        }\r\n\r\n                        alpha = alpha.divide(r_diag[minor].multiply(qrt_minor[minor]));\r\n\r\n\r\n\r\n                        for (int row = minor; row < m; row++) \r\n\r\n                        {\r\n\r\n                            qta[col][row] = qta[col][row].add(alpha.negate().multiply(qrt_minor[row]));\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n            cached_q_t = Matrix_Utils.create_field_matrix(qta);\r\n\r\n        }\r\n\r\n\r\n\r\n        // return the cached matrix\r\n\r\n        return cached_q_t;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Returns the Householder reflector vectors.\r\n\r\n     * <p>H is a lower trapezoidal matrix whose columns represent\r\n\r\n     * each successive Householder reflector vector. This matrix is used\r\n\r\n     * to compute Q.</p>\r\n\r\n     * @return a matrix containing the Householder reflector vectors\r\n\r\n     */\r\n\r\n    public Field_Matrix<T> get_h() \r\n\r\n    {\r\n\r\n        if (cached_h == null) \r\n\r\n        {\r\n\r\n\r\n\r\n            const int n = qrt.size();\r\n\r\n            const int m = qrt[0].size();\r\n\r\n            std::vector<std::vector<T>> ha = Math_Arrays::build_array(threshold.get_field(), m, n);\r\n\r\n            for (int i{}; i < m; ++i) \r\n\r\n            {\r\n\r\n                for (int j{}; j < std::min(i + 1, n); ++j) \r\n\r\n                {\r\n\r\n                    ha[i][j] = qrt[j][i].divide(r_diag[j].negate());\r\n\r\n                }\r\n\r\n            }\r\n\r\n            cached_h = Matrix_Utils.create_field_matrix(ha);\r\n\r\n        }\r\n\r\n\r\n\r\n        // return the cached matrix\r\n\r\n        return cached_h;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Get a solver for finding the A &times; X = B solution in least square sense.\r\n\r\n     * <p>\r\n\r\n     * Least Square sense means a solver can be computed for an overdetermined system, * (i.e. a system with more equations than unknowns, which corresponds to a tall A\r\n\r\n     * matrix with more rows than columns). In any case, if the matrix is singular\r\n\r\n     * within the tolerance set at {@link #FieldQR_Decomposition(Field_Matrix, * Calculus_Field_Element) construction}, an error will be triggered when\r\n\r\n     * the {@link Decomposition_Solver#solve(Real_Vector) solve} method will be called.\r\n\r\n     * </p>\r\n\r\n     * @return a solver\r\n\r\n     */\r\n\r\n    public FieldDecomposition_Solver<T> get_solver() \r\n\r\n    {\r\n\r\n        return Field_Solver();\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Specialized solver.\r\n\r\n     */\r\n\r\n    private class Field_Solver : FieldDecomposition_Solver<T>\r\n\r\n    {\r\n\r\n\r\n\r\n        /** {@inherit_doc} */\r\n\r\n        //override\r\n\r\n        public bool is_non_singular() \r\n\r\n        {\r\n\r\n            return !check_singular(r_diag, threshold, false);\r\n\r\n        }\r\n\r\n\r\n\r\n        /** {@inherit_doc} */\r\n\r\n        //override\r\n\r\n        public Field_Vector<T> solve(Field_Vector<T> b) \r\n\r\n        {\r\n\r\n            const int n = qrt.size();\r\n\r\n            const int m = qrt[0].size();\r\n\r\n            if (b.get_dimension() != m) \r\n\r\n            {\r\n\r\n                throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, b.get_dimension(), m);\r\n\r\n            }\r\n\r\n            check_singular(r_diag, threshold, true);\r\n\r\n\r\n\r\n            const std::vector<T> x =Math_Arrays::build_array(threshold.get_field(),n);\r\n\r\n            const std::vector<T> y = b.to_array();\r\n\r\n\r\n\r\n            // apply Householder transforms to solve Q.y = b\r\n\r\n            for (const int& minor = 0; minor < std::min(m, n); minor++) \r\n\r\n            {\r\n\r\n\r\n\r\n                const std::vector<T> qrt_minor = qrt[minor];\r\n\r\n                T dot_product = threshold.get_field().get_zero();\r\n\r\n                for (int row = minor; row < m; row++) \r\n\r\n                {\r\n\r\n                    dot_product = dot_product.add(y[row].multiply(qrt_minor[row]));\r\n\r\n                }\r\n\r\n                dot_product =  dot_product.divide(r_diag[minor].multiply(qrt_minor[minor]));\r\n\r\n\r\n\r\n                for (int row = minor; row < m; row++) \r\n\r\n                {\r\n\r\n                    y[row] = y[row].add(dot_product.multiply(qrt_minor[row]));\r\n\r\n                }\r\n\r\n            }\r\n\r\n\r\n\r\n            // solve triangular system R.x = y\r\n\r\n            for (int row = r_diag.size() - 1; row >= 0; --row) \r\n\r\n            {\r\n\r\n                y[row] = y[row].divide(r_diag[row]);\r\n\r\n                const T y_row = y[row];\r\n\r\n                const std::vector<T> qrt_row = qrt[row];\r\n\r\n                x[row] = y_row;\r\n\r\n                for (int i{}; i < row; i++) \r\n\r\n                {\r\n\r\n                    y[i] = y[i].subtract(y_row.multiply(qrt_row[i]));\r\n\r\n                }\r\n\r\n            }\r\n\r\n\r\n\r\n            return ArrayField_Vector<T>(x, false);\r\n\r\n        }\r\n\r\n\r\n\r\n        /** {@inherit_doc} */\r\n\r\n        //override\r\n\r\n        public Field_Matrix<T> solve(Field_Matrix<T> b) \r\n\r\n        {\r\n\r\n            const int n = qrt.size();\r\n\r\n            const int m = qrt[0].size();\r\n\r\n            if (b.get_row_dimension() != m) \r\n\r\n            {\r\n\r\n                throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, b.get_row_dimension(), m);\r\n\r\n            }\r\n\r\n            check_singular(r_diag, threshold, true);\r\n\r\n\r\n\r\n            const int columns        = b.get_column_dimension();\r\n\r\n            const int block_size      = BlockField_Matrix.BLOCK_SIZE;\r\n\r\n            const int c_blocks        = (columns + block_size - 1) / block_size;\r\n\r\n            const std::vector<std::vector<T>> x_blocks = BlockField_Matrix.create_blocks_layout(threshold.get_field(),n, columns);\r\n\r\n            const std::vector<std::vector<T>> y       = Math_Arrays::build_array(threshold.get_field(), b.get_row_dimension(), block_size);\r\n\r\n            const std::vector<T>   alpha   = Math_Arrays::build_array(threshold.get_field(), block_size);\r\n\r\n\r\n\r\n            for (const int& k_block = 0; k_block < c_blocks; ++k_block) \r\n\r\n            {\r\n\r\n                const int& k_start = k_block * block_size;\r\n\r\n                const int& k_end   = std::min(k_start + block_size, columns);\r\n\r\n                const int& k_width = k_end - k_start;\r\n\r\n\r\n\r\n                // get the right hand side vector\r\n\r\n                b.copy_sub_matrix(0, m - 1, k_start, k_end - 1, y);\r\n\r\n\r\n\r\n                // apply Householder transforms to solve Q.y = b\r\n\r\n                for (const int& minor = 0; minor < std::min(m, n); minor++) \r\n\r\n                {\r\n\r\n                    const std::vector<T> qrt_minor = qrt[minor];\r\n\r\n                    const T factor     = r_diag[minor].multiply(qrt_minor[minor]).reciprocal();\r\n\r\n\r\n\r\n                    Arrays.fill(alpha, 0, k_width, threshold.get_field().get_zero());\r\n\r\n                    for (int row = minor; row < m; ++row) \r\n\r\n                    {\r\n\r\n                        const T   d    = qrt_minor[row];\r\n\r\n                        const std::vector<T> y_row = y[row];\r\n\r\n                        for (int k{}; k < k_width; ++k) \r\n\r\n                        {\r\n\r\n                            alpha[k] = alpha[k].add(d.multiply(y_row[k]));\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n\r\n\r\n                    for (int k{}; k < k_width; ++k) \r\n\r\n                    {\r\n\r\n                        alpha[k] = alpha[k].multiply(factor);\r\n\r\n                    }\r\n\r\n\r\n\r\n                    for (int row = minor; row < m; ++row) \r\n\r\n                    {\r\n\r\n                        const T   d    = qrt_minor[row];\r\n\r\n                        const std::vector<T> y_row = y[row];\r\n\r\n                        for (int k{}; k < k_width; ++k) \r\n\r\n                        {\r\n\r\n                            y_row[k] = y_row[k].add(alpha[k].multiply(d));\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n\r\n\r\n\r\n                // solve triangular system R.x = y\r\n\r\n                for (int j = r_diag.size() - 1; j >= 0; --j) \r\n\r\n                {\r\n\r\n                    const int      j_block = j / block_size;\r\n\r\n                    const int      j_start = j_block * block_size;\r\n\r\n                    const T   factor = r_diag[j].reciprocal();\r\n\r\n                    const std::vector<T> yJ     = y[j];\r\n\r\n                    const std::vector<T> x_block = x_blocks[j_block * c_blocks + k_block];\r\n\r\n                    int index = (j - j_start) * k_width;\r\n\r\n                    for (int k{}; k < k_width; ++k) \r\n\r\n                    {\r\n\r\n                        yJ[k]           =yJ[k].multiply(factor);\r\n\r\n                        x_block[index++] = yJ[k];\r\n\r\n                    }\r\n\r\n\r\n\r\n                    const std::vector<T> qrtJ = qrt[j];\r\n\r\n                    for (int i{}; i < j; ++i) \r\n\r\n                    {\r\n\r\n                        const T rIJ  = qrtJ[i];\r\n\r\n                        const std::vector<T> y_i = y[i];\r\n\r\n                        for (int k{}; k < k_width; ++k) \r\n\r\n                        {\r\n\r\n                            y_i[k] = y_i[k].subtract(yJ[k].multiply(rIJ));\r\n\r\n                        }\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n\r\n\r\n            return BlockField_Matrix<T>(n, columns, x_blocks, false);\r\n\r\n        }\r\n\r\n\r\n\r\n        /**\r\n\r\n         * {@inherit_doc}\r\n\r\n         * @ if the decomposed matrix is singular.\r\n\r\n         */\r\n\r\n        //override\r\n\r\n        public Field_Matrix<T> get_inverse() \r\n\r\n        {\r\n\r\n            return solve(Matrix_Utils.create_field_identity_matrix(threshold.get_field(), qrt[0].size()));\r\n\r\n        }\r\n\r\n\r\n\r\n        /**\r\n\r\n         * Check singularity.\r\n\r\n         *\r\n\r\n         * @param diag Diagonal elements of the R matrix.\r\n\r\n         * @param min Singularity threshold.\r\n\r\n         * @param raise Whether to raise a {@link }\r\n\r\n         * if any element of the diagonal fails the check.\r\n\r\n         * @return {@code true} if any element of the diagonal is smaller\r\n\r\n         * or equal to {@code min}.\r\n\r\n         * @ if the matrix is singular and\r\n\r\n         * {@code raise} is {@code true}.\r\n\r\n         */\r\n\r\n        private bool check_singular(std::vector<T> diag, T min, bool raise) \r\n\r\n        {\r\n\r\n            const int len = diag.size();\r\n\r\n            for (int i{}; i < len; i++) \r\n\r\n            {\r\n\r\n                const T d = diag[i];\r\n\r\n                if (std::abs(d.get_real()) <= min.get_real()) \r\n\r\n                {\r\n\r\n                    if (raise) \r\n\r\n                    {\r\n\r\n                        throw (Localized_Core_Formats.SINGULAR_MATRIX);\r\n\r\n                    }\r\n\r\nelse \r\n\r\n                    {\r\n\r\n                        return true;\r\n\r\n                    }\r\n\r\n                }\r\n\r\n            }\r\n\r\n            return false;\r\n\r\n        }\r\n\r\n\r\n\r\n        /** {@inherit_doc} */\r\n\r\n        //override\r\n\r\n        public int get_row_dimension() \r\n\r\n        {\r\n\r\n            return qrt[0].size();\r\n\r\n        }\r\n\r\n\r\n\r\n        /** {@inherit_doc} */\r\n\r\n        //override\r\n\r\n        public int get_column_dimension() \r\n\r\n        {\r\n\r\n            return qrt.size();\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n