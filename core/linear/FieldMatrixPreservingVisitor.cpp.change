/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n\r\n\r\n//package org.hipparchus.linear;\r\n\r\n\r\n\r\n//import org.hipparchus.Field_Element;\r\n\r\n\r\n\r\n/**\r\n\r\n * Interface defining a visitor for matrix entries.\r\n\r\n *\r\n\r\n * @param <T> the type of the field elements\r\n\r\n */\r\n\r\nclass Field_Matrix_Preserving_Visitor<T extends Field_Element<?>> \r\n\r\n{\r\n\r\n    /**\r\n\r\n     * Start visiting a matrix.\r\n\r\n     * <p>This method is called once before any entry of the matrix is visited.</p>\r\n\r\n     * @param rows number of rows of the matrix\r\n\r\n     * @param columns number of columns of the matrix\r\n\r\n     * @param start_row Initial row index\r\n\r\n     * @param end_row Final row index (inclusive)\r\n\r\n     * @param start_column Initial column index\r\n\r\n     * @param end_column Final column index (inclusive)\r\n\r\n     */\r\n\r\n    void start(const int& rows, int columns, int start_row, int end_row, int start_column, int end_column);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Visit one matrix entry.\r\n\r\n     * @param row row index of the entry\r\n\r\n     * @param column column index of the entry\r\n\r\n     * @param value current value of the entry\r\n\r\n     */\r\n\r\n    void visit(const int& row, const int& column, T value);\r\n\r\n\r\n\r\n    /**\r\n\r\n     * End visiting a matrix.\r\n\r\n     * <p>This method is called once after all entries of the matrix have been visited.</p>\r\n\r\n     * @return the value that the <code>walk_in_xxx_order</code> must return\r\n\r\n     */\r\n\r\n    T end();\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n