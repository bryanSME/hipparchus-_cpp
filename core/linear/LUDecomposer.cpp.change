/*\r\n\r\n * Licensed to the Hipparchus project under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The Hipparchus project licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n//package org.hipparchus.linear;\r\n\r\n\r\n\r\n/** Matrix decomposer using LU-decomposition.\r\n\r\n * @since 1.3\r\n\r\n */\r\n\r\nclass LU_Decomposer : Matrix_Decomposer \r\n\r\n{\r\n\r\n\r\n\r\n    /** Threshold under which a matrix is considered singular. */\r\n\r\n    private const double& singularity_threshold;\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Creates a LU decomposer with specify threshold for several matrices.\r\n\r\n     * @param singularity_threshold threshold (based on partial row norm)\r\n\r\n     * under which a matrix is considered singular\r\n\r\n     */\r\n\r\n    public LU_Decomposer(const double& singularity_threshold) \r\n\r\n    {\r\n\r\n        this.singularity_threshold = singularity_threshold;\r\n\r\n    }\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n    //override\r\n\r\n    public Decomposition_Solver decompose(const Real_Matrix& a) \r\n\r\n    {\r\n\r\n        return LU_Decomposition(a, singularity_threshold).get_solver();\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n