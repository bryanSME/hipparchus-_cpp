/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n//package org.hipparchus.linear;\r\n\r\n\r\n\r\n//import org.hipparchus.exception.Localized_Core_Formats;\r\n\r\n//import org.hipparchus.exception.;\r\n\r\n//import org.hipparchus.exception.Math_Illegal_State_Exception;\r\n\r\n//import org.hipparchus.exception.Null_Argument_Exception;\r\n\r\n//import org.hipparchus.util.Iteration_Manager;\r\n\r\n//import org.hipparchus.util.Math_Utils;\r\n\r\n\r\n\r\n/**\r\n\r\n * This virtual class defines an iterative solver for the linear system A\r\n\r\n * &middot; x = b. In what follows, the <em>residual</em> r is defined as r = b\r\n\r\n * - A &middot; x, where A is the linear operator of the linear system, b is the\r\n\r\n * right-hand side vector, and x the current estimate of the solution.\r\n\r\n *\r\n\r\n */\r\n\r\npublic virtual class Iterative_Linear_Solver \r\n\r\n{\r\n\r\n\r\n\r\n    /** The object in charge of managing the iterations. */\r\n\r\n    private const Iteration_Manager manager;\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Creates a instance of this class, with default iteration manager.\r\n\r\n     *\r\n\r\n     * @param max_iterations the maximum number of iterations\r\n\r\n     */\r\n\r\n    public Iterative_Linear_Solver(const int max_iterations) \r\n\r\n    {\r\n\r\n        this.manager = Iteration_Manager(max_iterations);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Creates a instance of this class, with custom iteration manager.\r\n\r\n     *\r\n\r\n     * @param manager the custom iteration manager\r\n\r\n     * @Null_Argument_Exception if {@code manager} is {@code null}\r\n\r\n     */\r\n\r\n    public Iterative_Linear_Solver(const Iteration_Manager manager)\r\n\r\n        Null_Argument_Exception \r\n\r\n        {\r\n\r\n        //Math_Utils::check_not_null(manager);\r\n\r\n        this.manager = manager;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Performs all dimension checks on the parameters of\r\n\r\n     * {@link #solve(Real_Linear_Operator, Real_Vector, Real_Vector) solve} and\r\n\r\n     * {@link #solve_in_place(Real_Linear_Operator, Real_Vector, Real_Vector) solve_in_place}, * and an exception if one of the checks fails.\r\n\r\n     *\r\n\r\n     * @param a the linear operator A of the system\r\n\r\n     * @param b the right-hand side vector\r\n\r\n     * @param x0 the initial guess of the solution\r\n\r\n     * @Null_Argument_Exception if one of the parameters is {@code null}\r\n\r\n     * @ if {@code a} is not square\r\n\r\n     * @ if {@code b} or {@code x0} have\r\n\r\n     * dimensions inconsistent with {@code a}\r\n\r\n     */\r\n\r\n    protected static void check_parameters(const Real_Linear_Operator a, const Real_Vector b, const Real_Vector x0) throws\r\n\r\n        , Null_Argument_Exception \r\n\r\n        {\r\n\r\n        //Math_Utils::check_not_null(a);\r\n\r\n        //Math_Utils::check_not_null(b);\r\n\r\n        //Math_Utils::check_not_null(x0);\r\n\r\n        if (a.get_row_dimension() != a.get_column_dimension()) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.NON_SQUARE_OPERATOR, a.get_row_dimension(), a.get_column_dimension());\r\n\r\n        }\r\n\r\n        if (b.get_dimension() != a.get_row_dimension()) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, b.get_dimension(), a.get_row_dimension());\r\n\r\n        }\r\n\r\n        if (x0.get_dimension() != a.get_column_dimension()) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, x0.get_dimension(), a.get_column_dimension());\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Returns the iteration manager attached to this solver.\r\n\r\n     *\r\n\r\n     * @return the manager\r\n\r\n     */\r\n\r\n    public Iteration_Manager get_iteration_manager() \r\n\r\n    {\r\n\r\n        return manager;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Returns an estimate of the solution to the linear system A &middot; x =\r\n\r\n     * b.\r\n\r\n     *\r\n\r\n     * @param a the linear operator A of the system\r\n\r\n     * @param b the right-hand side vector\r\n\r\n     * @return a vector containing the solution\r\n\r\n     * @Null_Argument_Exception if one of the parameters is {@code null}\r\n\r\n     * @ if {@code a} is not square\r\n\r\n     * @ if {@code b} has dimensions\r\n\r\n     * inconsistent with {@code a}\r\n\r\n     * @Math_Illegal_State_Exception at exhaustion of the iteration count, * unless a custom\r\n\r\n     * {@link org.hipparchus.util.Incrementor.Max_countExceededCallback callback}\r\n\r\n     * has been set at construction of the {@link Iteration_Manager}\r\n\r\n     */\r\n\r\n    public Real_Vector solve(const Real_Linear_Operator a, const Real_Vector b)\r\n\r\n        , Null_Argument_Exception, Math_Illegal_State_Exception \r\n\r\n        {\r\n\r\n        //Math_Utils::check_not_null(a);\r\n\r\n        const Real_Vector x = Array_Real_Vector(a.get_column_dimension());\r\n\r\n        x.set(0.);\r\n\r\n        return solve_in_place(a, b, x);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Returns an estimate of the solution to the linear system A &middot; x =\r\n\r\n     * b.\r\n\r\n     *\r\n\r\n     * @param a the linear operator A of the system\r\n\r\n     * @param b the right-hand side vector\r\n\r\n     * @param x0 the initial guess of the solution\r\n\r\n     * @return a vector containing the solution\r\n\r\n     * @Null_Argument_Exception if one of the parameters is {@code null}\r\n\r\n     * @ if {@code a} is not square\r\n\r\n     * @ if {@code b} or {@code x0} have\r\n\r\n     * dimensions inconsistent with {@code a}\r\n\r\n     * @Math_Illegal_State_Exception at exhaustion of the iteration count, * unless a custom\r\n\r\n     * {@link org.hipparchus.util.Incrementor.Max_countExceededCallback callback}\r\n\r\n     * has been set at construction of the {@link Iteration_Manager}\r\n\r\n     */\r\n\r\n    public Real_Vector solve(Real_Linear_Operator a, Real_Vector b, Real_Vector x0)\r\n\r\n        , Null_Argument_Exception, Math_Illegal_State_Exception \r\n\r\n        {\r\n\r\n        //Math_Utils::check_not_null(x0);\r\n\r\n        return solve_in_place(a, b, x0.copy());\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Returns an estimate of the solution to the linear system A &middot; x =\r\n\r\n     * b. The solution is computed in-place (initial guess is modified).\r\n\r\n     *\r\n\r\n     * @param a the linear operator A of the system\r\n\r\n     * @param b the right-hand side vector\r\n\r\n     * @param x0 initial guess of the solution\r\n\r\n     * @return a reference to {@code x0} (shallow copy) updated with the\r\n\r\n     * solution\r\n\r\n     * @Null_Argument_Exception if one of the parameters is {@code null}\r\n\r\n     * @ if {@code a} is not square\r\n\r\n     * @ if {@code b} or {@code x0} have\r\n\r\n     * dimensions inconsistent with {@code a}\r\n\r\n     * @Math_Illegal_State_Exception at exhaustion of the iteration count, * unless a custom\r\n\r\n     * {@link org.hipparchus.util.Incrementor.Max_countExceededCallback callback}\r\n\r\n     * has been set at construction of the {@link Iteration_Manager}\r\n\r\n     */\r\n\r\n    public virtual Real_Vector solve_in_place(Real_Linear_Operator a, Real_Vector b, Real_Vector x0) , Null_Argument_Exception, Math_Illegal_State_Exception;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n