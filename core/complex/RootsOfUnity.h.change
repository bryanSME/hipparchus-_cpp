/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n\r\n\r\n//import org.hipparchus.exception.Localized_Core_Formats;\r\n\r\n//import org.hipparchus.exception.;\r\n\r\n//import org.hipparchus.exception.Math_Illegal_State_Exception;\r\n\r\n//import org.hipparchus.util.FastMath;\r\n\r\n//import org.hipparchus.util.Sin_Cos;\r\n\r\n\r\n\r\n#include <vector>\r\n\r\n#include <numbers>\r\n\r\n#include "../util/SinCos.h"\r\n\r\n\r\n\r\n/**\r\n\r\n * A helper class for the computation and caching of the {@code n}-th roots\r\n\r\n * of unity.\r\n\r\n */\r\n\r\nclass Roots_Of_Unity \r\n\r\n{\r\n\r\nprivate:\r\n\r\n    /** Number of roots of unity. */\r\n\r\n    int my_omega_count;\r\n\r\n\r\n\r\n    /** Real part of the roots. */\r\n\r\n    std::vector<double> my_omega_real;\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Imaginary part of the {@code n}-th roots of unity, for positive values\r\n\r\n     * of {@code n}. In this array, the roots are stored in counter-clockwise\r\n\r\n     * order.\r\n\r\n     */\r\n\r\n    std::vector<double> my_omega_imaginary_counter_clockwise;\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Imaginary part of the {@code n}-th roots of unity, for negative values\r\n\r\n     * of {@code n}. In this array, the roots are stored in clockwise order.\r\n\r\n     */\r\n\r\n    std::vector<double> my_omega_imaginary_clockwise;\r\n\r\n\r\n\r\n    /**\r\n\r\n     * {@code true} if {@link #compute_rootsstatic_cast<int>(} was called with a positive\r\n\r\n     * value of its argument {@code n}. In this case, counter-clockwise ordering\r\n\r\n     * of the roots of unity should be used.\r\n\r\n     */\r\n\r\n    bool my_is_counter_clock_wise;\r\n\r\n\r\n\r\npublic:\r\n\r\n    /**\r\n\r\n     * Build an engine for computing the {@code n}-th roots of unity.\r\n\r\n     */\r\n\r\n    Roots_Of_Unity() \r\n\r\n    {\r\n\r\n        omega_count = 0;\r\n\r\n        my_omega_real = null;\r\n\r\n        my_omega_imaginary_counter_clockwise = null;\r\n\r\n        my_omega_imaginary_clockwise = null;\r\n\r\n        my_is_counter_clock_wise = true;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Returns {@code true} if {@link #compute_rootsstatic_cast<int>(} was called with a\r\n\r\n     * positive value of its argument {@code n}. If {@code true}, then\r\n\r\n     * counter-clockwise ordering of the roots of unity should be used.\r\n\r\n     *\r\n\r\n     * @return {@code true} if the roots of unity are stored in counter-clockwise order\r\n\r\n     * @Math_Illegal_State_Exception if no roots of unity have been computed yet\r\n\r\n     */\r\n\r\n    bool my_is_counter_clock_wise() \r\n\r\n    {\r\n\r\n        if (omega_count == 0) \r\n\r\n        {\r\n\r\n            throw Math_Illegal_State_Exception(Localized_Core_Formats.ROOTS_OF_UNITY_NOT_COMPUTED_YET);\r\n\r\n        }\r\n\r\n        return my_is_counter_clock_wise;\r\n\r\n        \r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Computes the {@code n}-th roots of unity.\r\n\r\n     * <p>\r\n\r\n     * The roots are stored in {@code omega[]}, such that {@code omega[k] = w ^ k}, * where {@code k = 0, ..., n - 1}, {@code w = exp(2 * pi * i / n)} and\r\n\r\n     * {@code i = sqrt(-1)}.\r\n\r\n     * <p>\r\n\r\n     * Note that {@code n} can be positive of negative\r\n\r\n     * <ul>\r\n\r\n     * <li>{@code abs(n)} is always the number of roots of unity.</li>\r\n\r\n     * <li>If {@code n > 0}, then the roots are stored in counter-clockwise order.</li>\r\n\r\n     * <li>If {@code n < 0}, then the roots are stored in clockwise order.</li>\r\n\r\n     * </ul>\r\n\r\n     *\r\n\r\n     * @param n the (signed) number of roots of unity to be computed\r\n\r\n     * @ if {@code n = 0}\r\n\r\n     */\r\n\r\n    void compute_roots(const int& n)  \r\n\r\n    {\r\n\r\n\r\n\r\n        if (n == 0) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.CANNOT_COMPUTE_0TH_ROOT_OF_UNITY);\r\n\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n        my_is_counter_clock_wise = n > 0;\r\n\r\n\r\n\r\n        // avoid repetitive calculations\r\n\r\n        const int abs_n = std::abs(n);\r\n\r\n\r\n\r\n        if (abs_n == omega_count) \r\n\r\n        {\r\n\r\n            return;\r\n\r\n        }\r\n\r\n\r\n\r\n        // calculate everything from scratch\r\n\r\n        const double t  = 2.0 * std::numbers::pi / abs_n;\r\n\r\n        const Sin_Cos sc = Sin_Cos(t);\r\n\r\n        my_omega_real = std::vector<double>(abs_n);\r\n\r\n        my_omega_imaginary_counter_clockwise = std::vector<double>(abs_n);\r\n\r\n        my_omega_imaginary_clockwise = std::vector<double>(abs_n);\r\n\r\n        my_omega_real[0] = 1.0;\r\n\r\n        my_omega_imaginary_counter_clockwise[0] = 0.0;\r\n\r\n        my_omega_imaginary_clockwise[0] = 0.0;\r\n\r\n        for (int i{ 1 }; i < abs_n; i++) \r\n\r\n        {\r\n\r\n            my_omega_real[i] = my_omega_real[i - 1] * sc.cos() - my_omega_imaginary_counter_clockwise[i - 1] * sc.sin();\r\n\r\n            my_omega_imaginary_counter_clockwise[i] = my_omega_real[i - 1] * sc.sin() + my_omega_imaginary_counter_clockwise[i - 1] * sc.cos();\r\n\r\n            my_omega_imaginary_clockwise[i] = -my_omega_imaginary_counter_clockwise[i];\r\n\r\n        }\r\n\r\n        my_omega_count = abs_n;\r\n\r\n        \r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Get the real part of the {@code k}-th {@code n}-th root of unity.\r\n\r\n     *\r\n\r\n     * @param k index of the {@code n}-th root of unity\r\n\r\n     * @return real part of the {@code k}-th {@code n}-th root of unity\r\n\r\n     * @Math_Illegal_State_Exception if no roots of unity have been computed yet\r\n\r\n     * @ if {@code k} is out of range\r\n\r\n     */\r\n\r\n    double get_real(const int& k) const\r\n\r\n    {\r\n\r\n\r\n\r\n        if (my_omega_count == 0) \r\n\r\n        {\r\n\r\n            throw Math_Illegal_State_Exception(Localized_Core_Formats.ROOTS_OF_UNITY_NOT_COMPUTED_YET);\r\n\r\n        }\r\n\r\n        if ((k < 0) || (k >= my_omega_count))\r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, static_cast<int>(k), static_cast<int>(0), static_cast<int>(my_omega_count - 1));\r\n\r\n        }\r\n\r\n\r\n\r\n        return my_omega_real[k];\r\n\r\n        \r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Get the imaginary part of the {@code k}-th {@code n}-th root of unity.\r\n\r\n     *\r\n\r\n     * @param k index of the {@code n}-th root of unity\r\n\r\n     * @return imaginary part of the {@code k}-th {@code n}-th root of unity\r\n\r\n     * @Math_Illegal_State_Exception if no roots of unity have been computed yet\r\n\r\n     * @ if {@code k} is out of range\r\n\r\n     */\r\n\r\n    double get_imaginary(const int& k)\r\n\r\n    {\r\n\r\n        if (my_omega_count == 0)\r\n\r\n        {\r\n\r\n            throw Math_Illegal_State_Exception(Localized_Core_Formats.ROOTS_OF_UNITY_NOT_COMPUTED_YET);\r\n\r\n        }\r\n\r\n        if ((k < 0) || (k >= my_omega_count))\r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.OUT_OF_RANGE_ROOT_OF_UNITY_INDEX, static_cast<int>(k), static_cast<int>(0), static_cast<int>(my_omega_count - 1));\r\n\r\n        }\r\n\r\n\r\n\r\n        return my_is_counter_clock_wise \r\n\r\n            ? my_omega_imaginary_counter_clockwise[k]\r\n\r\n            : my_omega_imaginary_clockwise[k];\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Returns the number of roots of unity currently stored.\r\n\r\n     * <p>\r\n\r\n     * If {@link #compute_rootsstatic_cast<int>(} was called with {@code n}, then this method\r\n\r\n     * returns {@code abs(n)}. If no roots of unity have been computed yet, this\r\n\r\n     * method returns 0.\r\n\r\n     *\r\n\r\n     * @return the number of roots of unity currently stored\r\n\r\n     */\r\n\r\n    int get_number_of_roots() const\r\n\r\n    {\r\n\r\n        return my_omega_count;\r\n\r\n    }\r\n\r\n};\r\n