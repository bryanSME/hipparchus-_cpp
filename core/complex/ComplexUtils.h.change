/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n\r\n\r\n//package org.hipparchus.complex;\r\n\r\n\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n//import org.hipparchus.exception.Localized_Core_Formats;\r\n\r\n//import org.hipparchus.exception.;\r\n\r\n//import org.hipparchus.util.FastMath;\r\n\r\n//import org.hipparchus.util.Field_Sin_Cos;\r\n\r\n//import org.hipparchus.util.Sin_Cos;\r\n\r\n#include <vector>\r\n\r\n\r\n\r\n/**\r\n\r\n * Static implementations of common {@link std::complex<double>} utilities functions.\r\n\r\n */\r\n\r\ntemplate<typename T>\r\n\r\nclass std::complex<double>_Utils\r\n\r\n{\r\n\r\nprivate:\r\n\r\n    /**\r\n\r\n     * Default constructor.\r\n\r\n     */\r\n\r\n    std::complex<double>_Utils() {}\r\n\r\n\r\n\r\npublic:\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Creates a complex number from the given polar representation.\r\n\r\n     * <p>\r\n\r\n     * The value returned is <code>r&middot;e<sup>i&middot;theta</sup></code>, * computed as <code>r&middot;cos(theta) + r&middot;sin(theta)i</code></p>\r\n\r\n     * <p>\r\n\r\n     * If either <code>r</code> or <code>theta</code> is NaN, or\r\n\r\n     * <code>theta</code> is infinite, {@link std::complex<double>#NaN} is returned.</p>\r\n\r\n     * <p>\r\n\r\n     * If <code>r</code> is infinite and <code>theta</code> is finite, * infinite or NaN values may be returned in parts of the result, following\r\n\r\n     * the rules for double arithmetic.<pre>\r\n\r\n     * Examples:\r\n\r\n     * <code>\r\n\r\n     * polar_2_complex(INFINITY, &pi;/4) = INFINITY + INFINITY i\r\n\r\n     * polar_2_complex(INFINITY, 0) = INFINITY + NaN i\r\n\r\n     * polar_2_complex(INFINITY, -&pi;/4) = INFINITY - INFINITY i\r\n\r\n     * polar_2_complex(INFINITY, 5&pi;/4) = -INFINITY - INFINITY i </code></pre></p>\r\n\r\n     *\r\n\r\n     * @param r the modulus of the complex number to create\r\n\r\n     * @param theta  the argument of the complex number to create\r\n\r\n     * @return <code>r&middot;e<sup>i&middot;theta</sup></code>\r\n\r\n     * @ if {@code r} is negative.\r\n\r\n     */\r\n\r\n    static std::complex<double> polar_2_complex(const double& r, const double& theta)\r\n\r\n    {\r\n\r\n        if (r < 0)\r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.NEGATIVE_COMPLEX_MODULE, r);\r\n\r\n        }\r\n\r\n        const Sin_Cos sc = Sin_Cos(theta);\r\n\r\n        return std::complex<double>(r * sc.cos(), r * sc.sin());\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Creates a complex number from the given polar representation.\r\n\r\n     * <p>\r\n\r\n     * The value returned is <code>r&middot;e<sup>i&middot;theta</sup></code>, * computed as <code>r&middot;cos(theta) + r&middot;sin(theta)i</code></p>\r\n\r\n     * <p>\r\n\r\n     * If either <code>r</code> or <code>theta</code> is NaN, or\r\n\r\n     * <code>theta</code> is infinite, {@link std::complex<double>#NaN} is returned.</p>\r\n\r\n     * <p>\r\n\r\n     * If <code>r</code> is infinite and <code>theta</code> is finite, * infinite or NaN values may be returned in parts of the result, following\r\n\r\n     * the rules for double arithmetic.<pre>\r\n\r\n     * Examples:\r\n\r\n     * <code>\r\n\r\n     * polar_2_complex(INFINITY, &pi;/4) = INFINITY + INFINITY i\r\n\r\n     * polar_2_complex(INFINITY, 0) = INFINITY + NaN i\r\n\r\n     * polar_2_complex(INFINITY, -&pi;/4) = INFINITY - INFINITY i\r\n\r\n     * polar_2_complex(INFINITY, 5&pi;/4) = -INFINITY - INFINITY i </code></pre></p>\r\n\r\n     *\r\n\r\n     * @param r the modulus of the complex number to create\r\n\r\n     * @param theta  the argument of the complex number to create\r\n\r\n     * @param <T> type of the field elements\r\n\r\n     * @return <code>r&middot;e<sup>i&middot;theta</sup></code>\r\n\r\n     * @ if {@code r} is negative.\r\n\r\n     * @since 2.0\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n    static  Field_Complex<T> polar_2_complex(T r, T theta)\r\n\r\n    {\r\n\r\n        if (r.get_real() < 0)\r\n\r\n        {\r\n\r\n            throw (\r\n\r\n                Localized_Core_Formats.NEGATIVE_COMPLEX_MODULE, r);\r\n\r\n        }\r\n\r\n        const Field_Sin_Cos<T> sc = Sin_Cos(theta);\r\n\r\n        return Field_std::complex<double><>(r.multiply(sc.cos()), r.multiply(sc.sin()));\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Convert an array of primitive doubles to an array of {@code std::complex<double>} objects.\r\n\r\n     *\r\n\r\n     * @param real Array of numbers to be converted to their {@code std::complex<double>} equivalent.\r\n\r\n     * @return an array of {@code std::complex<double>} objects.\r\n\r\n     */\r\n\r\n    static std::vector<std::complex<double>>convert_to_complex(const std::vector<double>& real)\r\n\r\n    {\r\n\r\n        const std::complex<double> c[] = std::complex<double>[real.size()];\r\n\r\n        for (int i{}; i < real.size(); i++)\r\n\r\n        {\r\n\r\n            c[i] = std::complex<double>(real[i], 0);\r\n\r\n        }\r\n\r\n\r\n\r\n        return c;\r\n\r\n    }\r\n\r\n};\r\n