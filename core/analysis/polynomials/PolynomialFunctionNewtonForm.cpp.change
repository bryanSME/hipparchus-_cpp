/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n//package org.hipparchus.analysis.polynomials;\r\n\r\n\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n//import org.hipparchus.analysis.Field_Univariate_Function;\r\n\r\n//import org.hipparchus.analysis.differentiation.Derivative;\r\n\r\n//import org.hipparchus.analysis.differentiation.Univariate_Differentiable_Function;\r\n\r\n//import org.hipparchus.exception.Localized_Core_Formats;\r\n\r\n//import org.hipparchus.exception.;\r\n\r\n//import org.hipparchus.exception.Null_Argument_Exception;\r\n\r\n//import org.hipparchus.util.Math_Utils;\r\n\r\n#include <vector>\r\n\r\n#include "../../analysis/FieldUnivariateFunction.h"\r\n\r\n#include "../../analysis/differentiation/UnivariateDifferentiableFunction.h"\r\n\r\n//#include "../../util/MathUtils.h"\r\n\r\n\r\n\r\n/**\r\n\r\n * Implements the representation of a real polynomial function in\r\n\r\n * Newton Form. For reference, see <b>Elementary Numerical Analysis</b>, * ISBN 0070124477, chapter 2.\r\n\r\n * <p>\r\n\r\n * The formula of polynomial in Newton form is\r\n\r\n *     p(x) = a[0] + a[1](x-c[0]) + a[2](x-c[0])(x-c[1]) + ... +\r\n\r\n *            a[n](x-c[0])(x-c[1])...(x-c[n-1])\r\n\r\n * Note that the length of a[] is one more than the length of c[]</p>\r\n\r\n *\r\n\r\n */\r\n\r\nclass Polynomial_FunctionNewtonForm : public Univariate_Differentiable_Function, public Field_Univariate_Function \r\n\r\n{\r\n\r\nprivate:\r\n\r\n    /**\r\n\r\n     * The coefficients of the polynomial, ordered by degree -- i.e.\r\n\r\n     * coefficients[0] is the constant term and coefficients[n] is the\r\n\r\n     * coefficient of x^n where n is the degree of the polynomial.\r\n\r\n     */\r\n\r\n    std::vector<double> my_coefficients;\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Centers of the Newton polynomial.\r\n\r\n     */\r\n\r\n    const std::vector<double> my_c;\r\n\r\n\r\n\r\n    /**\r\n\r\n     * When all c[i] = 0, a[] becomes normal polynomial coefficients, * i.e. a[i] = coefficients[i].\r\n\r\n     */\r\n\r\n    const std::vector<double> my_a;\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Whether the polynomial coefficients are available.\r\n\r\n     */\r\n\r\n    bool my_coefficients_computed;\r\n\r\n\r\n\r\nprotected:\r\n\r\n    /**\r\n\r\n     * Calculate the normal polynomial coefficients given the Newton form.\r\n\r\n     * It also uses nested multiplication but takes O(N^2) time.\r\n\r\n     */\r\n\r\n    void compute_coefficients()\r\n\r\n    {\r\n\r\n        const int n = degree();\r\n\r\n\r\n\r\n        my_coefficients = std::vector<double>(n + 1);\r\n\r\n        for (int i{}; i <= n; i++)\r\n\r\n        {\r\n\r\n            my_coefficients[i] = 0.0;\r\n\r\n        }\r\n\r\n\r\n\r\n        my_coefficients[0] = my_a[n];\r\n\r\n        for (int i = n - 1; i >= 0; i--)\r\n\r\n        {\r\n\r\n            for (int j = n - i; j > 0; j--)\r\n\r\n            {\r\n\r\n                my_coefficients[j] = my_coefficients[j - 1] - my_c[i] * my_coefficients[j];\r\n\r\n            }\r\n\r\n            my_coefficients[0] = my_a[i] - my_c[i] * my_coefficients[0];\r\n\r\n        }\r\n\r\n\r\n\r\n        my_coefficients_computed = true;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Verifies that the input arrays are valid.\r\n\r\n     * <p>\r\n\r\n     * The centers must be distinct for interpolation purposes, but not\r\n\r\n     * for general use. Thus it is not verified here.</p>\r\n\r\n     *\r\n\r\n     * @param a the coefficients in Newton form formula\r\n\r\n     * @param c the centers\r\n\r\n     * @Null_Argument_Exception if any argument is {@code null}.\r\n\r\n     * @ if any array has zero length.\r\n\r\n     * @ if the size difference between\r\n\r\n     * {@code a} and {@code c} is not equal to 1.\r\n\r\n     * @see org.hipparchus.analysis.interpolation.Divided_Difference_Interpolator#compute_divided_difference(std::vector<double>, * std::vector<double>)\r\n\r\n     */\r\n\r\n    static void verify_input_array(const std::vector<double>& a, const std::vector<double>& c)\r\n\r\n    {\r\n\r\n        //Math_Utils::check_not_null(a);\r\n\r\n        //Math_Utils::check_not_null(c);\r\n\r\n        if (a.empty() || c.empty())\r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.EMPTY_POLYNOMIALS_COEFFICIENTS_ARRAY);\r\n\r\n        }\r\n\r\n        if (a.size() != c.size() + 1)\r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.ARRAY_SIZES_SHOULD_HAVE_DIFFERENCE_1, a.size(), c.size());\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\npublic:\r\n\r\n    /**\r\n\r\n     * Construct a Newton polynomial with the given a[] and c[]. The order of\r\n\r\n     * centers are important in that if c[] shuffle, then values of a[] would\r\n\r\n     * completely change, not just a permutation of old a[].\r\n\r\n     * <p>\r\n\r\n     * The constructor makes copy of the input arrays and assigns them.</p>\r\n\r\n     *\r\n\r\n     * @param a Coefficients in Newton form formula.\r\n\r\n     * @param c Centers.\r\n\r\n     * @Null_Argument_Exception if any argument is {@code null}.\r\n\r\n     * @ if any array has zero length.\r\n\r\n     * @ if the size difference between\r\n\r\n     * {@code a} and {@code c} is not equal to 1.\r\n\r\n     */\r\n\r\n    Polynomial_FunctionNewtonForm(const std::vector<double>& a, const std::vector<double> c) : my_a{ std::vector<double>(a) }, my_c{ std::vector<double>(c) }\r\n\r\n    {\r\n\r\n        verify_input_array(a, c);\r\n\r\n        System.arraycopy(a, 0, my_a, 0, a.size());\r\n\r\n        System.arraycopy(c, 0, my_c, 0, c.size());\r\n\r\n        my_coefficients_computed = false;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Calculate the function value at the given point.\r\n\r\n     *\r\n\r\n     * @param z Point at which the function value is to be computed.\r\n\r\n     * @return the function value.\r\n\r\n     */\r\n\r\n    //override\r\n\r\n    double value(const double& z) \r\n\r\n    {\r\n\r\n       return evaluate(my_a, my_c, z);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * {@inherit_doc}\r\n\r\n     */\r\n\r\n    //override\r\n\r\n    <T extends Derivative<T>> T value(const T t) \r\n\r\n    {\r\n\r\n        verify_input_array(a, c);\r\n\r\n\r\n\r\n        const int n = c.size();\r\n\r\n        T value = t.get_field().get_zero().add(a[n]);\r\n\r\n        for (int i = n - 1; i >= 0; i--) \r\n\r\n        {\r\n\r\n            value = t.subtract(c[i]).multiply(value).add(a[i]);\r\n\r\n        }\r\n\r\n\r\n\r\n        return value;\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * {@inherit_doc}\r\n\r\n     */\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n     T value(const T t) \r\n\r\n    {\r\n\r\n        verify_input_array(a, c);\r\n\r\n\r\n\r\n        const int n = c.size();\r\n\r\n        T value = t.get_field().get_zero().add(a[n]);\r\n\r\n        for (int i = n - 1; i >= 0; i--) \r\n\r\n        {\r\n\r\n            value = t.subtract(c[i]).multiply(value).add(a[i]);\r\n\r\n        }\r\n\r\n\r\n\r\n        return value;\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Returns the degree of the polynomial.\r\n\r\n     *\r\n\r\n     * @return the degree of the polynomial\r\n\r\n     */\r\n\r\n    int degree() const \r\n\r\n    {\r\n\r\n        return c.size();\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Returns a copy of coefficients in Newton form formula.\r\n\r\n     * <p>\r\n\r\n     * Changes made to the returned copy will not affect the polynomial.</p>\r\n\r\n     *\r\n\r\n     * @return a fresh copy of coefficients in Newton form formula\r\n\r\n     */\r\n\r\n    std::vector<double> get_newton_coefficients() \r\n\r\n    {\r\n\r\n        auto out = std::vector<double>(a.size());\r\n\r\n        System.arraycopy(a, 0, out, 0, a.size());\r\n\r\n        return out;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Returns a copy of the centers array.\r\n\r\n     * <p>\r\n\r\n     * Changes made to the returned copy will not affect the polynomial.</p>\r\n\r\n     *\r\n\r\n     * @return a fresh copy of the centers array.\r\n\r\n     */\r\n\r\n    std::vector<double> get_centers() \r\n\r\n    {\r\n\r\n        auto out = std::vector<double>(c.size());\r\n\r\n        System.arraycopy(c, 0, out, 0, c.size());\r\n\r\n        return out;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Returns a copy of the coefficients array.\r\n\r\n     * <p>\r\n\r\n     * Changes made to the returned copy will not affect the polynomial.</p>\r\n\r\n     *\r\n\r\n     * @return a fresh copy of the coefficients array.\r\n\r\n     */\r\n\r\n    std::vector<double> get_coefficients() \r\n\r\n    {\r\n\r\n        if (!coefficients_computed) \r\n\r\n        {\r\n\r\n            compute_coefficients();\r\n\r\n        }\r\n\r\n        auto out = std::vector<double>(coefficients.size());\r\n\r\n        System.arraycopy(coefficients, 0, out, 0, coefficients.size());\r\n\r\n        return out;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Evaluate the Newton polynomial using nested multiplication. It is\r\n\r\n     * also called <a href="http://mathworld.wolfram.com/HornersRule.html">\r\n\r\n     * Horner's Rule</a> and takes O(N) time.\r\n\r\n     *\r\n\r\n     * @param a Coefficients in Newton form formula.\r\n\r\n     * @param c Centers.\r\n\r\n     * @param z Point at which the function value is to be computed.\r\n\r\n     * @return the function value.\r\n\r\n     * @Null_Argument_Exception if any argument is {@code null}.\r\n\r\n     * @ if any array has zero length.\r\n\r\n     * @ if the size difference between\r\n\r\n     * {@code a} and {@code c} is not equal to 1.\r\n\r\n     */\r\n\r\n    static double evaluate(const std::vector<double>& a, const std::vector<double>& c, const double& z)\r\n\r\n    {\r\n\r\n        verify_input_array(a, c);\r\n\r\n\r\n\r\n        const auto n = c.size();\r\n\r\n        auto value = a[n];\r\n\r\n        for (int i{ n - 1 }; i >= 0; i--) \r\n\r\n        {\r\n\r\n            value = a[i] + (z - c[i]) * value;\r\n\r\n        }\r\n\r\n\r\n\r\n        return value;\r\n\r\n    }\r\n\r\n};\r\n