/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n\r\n\r\n#include <cmath>\r\n\r\n//import org.hipparchus.exception.;\r\n\r\n//import org.hipparchus.exception.Math_Illegal_State_Exception;\r\n\r\n//import org.hipparchus.util.FastMath;\r\n\r\n\r\n\r\n/**\r\n\r\n * Implements the <a href="http://mathworld.wolfram.com/Ridders_method.html">\r\n\r\n * Ridders' Method</a> for root finding of real univariate functions. For\r\n\r\n * reference, see C. Ridders, <i>A algorithm for computing a single root\r\n\r\n * of a real continuous function </i>, IEEE Transactions on Circuits and\r\n\r\n * Systems, 26 (1979), 979 - 980.\r\n\r\n * <p>\r\n\r\n * The function should be continuous but not necessarily smooth.</p>\r\n\r\n *\r\n\r\n */\r\n\r\nclass Ridders_Solver : Abstract_Univariate_Solver \r\n\r\n{\r\n\r\n    /** Default absolute accuracy. */\r\n\r\n    private static const double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Construct a solver with default accuracy (1e-6).\r\n\r\n     */\r\n\r\n    public Ridders_Solver() \r\n\r\n    {\r\n\r\n        this(DEFAULT_ABSOLUTE_ACCURACY);\r\n\r\n    }\r\n\r\n    /**\r\n\r\n     * Construct a solver.\r\n\r\n     *\r\n\r\n     * @param absolute_accuracy Absolute accuracy.\r\n\r\n     */\r\n\r\n    public Ridders_Solver(double absolute_accuracy) \r\n\r\n    {\r\n\r\n        super(absolute_accuracy);\r\n\r\n    }\r\n\r\n    /**\r\n\r\n     * Construct a solver.\r\n\r\n     *\r\n\r\n     * @param relative_accuracy Relative accuracy.\r\n\r\n     * @param absolute_accuracy Absolute accuracy.\r\n\r\n     */\r\n\r\n    public Ridders_Solver(double relative_accuracy, double absolute_accuracy) \r\n\r\n    {\r\n\r\n        super(relative_accuracy, absolute_accuracy);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * {@inherit_doc}\r\n\r\n     */\r\n\r\n    //override\r\n\r\n    protected double do_solve()\r\n\r\n        , Math_Illegal_State_Exception \r\n\r\n        {\r\n\r\n        double min = get_min();\r\n\r\n        double max = get_max();\r\n\r\n        // [x1, x2] is the bracketing interval in each iteration\r\n\r\n        // x3 is the midpoint of [x1, x2]\r\n\r\n        // x is the root approximation and an endpoint of the interval\r\n\r\n        double x1 = min;\r\n\r\n        double y1 = compute_objective_value(x1);\r\n\r\n        double x2 = max;\r\n\r\n        double y2 = compute_objective_value(x2);\r\n\r\n\r\n\r\n        // check for zeros before verifying bracketing\r\n\r\n        if (y1 == 0) \r\n\r\n        {\r\n\r\n            return min;\r\n\r\n        }\r\n\r\n        if (y2 == 0) \r\n\r\n        {\r\n\r\n            return max;\r\n\r\n        }\r\n\r\n        verify_bracketing(min, max);\r\n\r\n\r\n\r\n        const double& absolute_accuracy = get_absolute_accuracy();\r\n\r\n        const double function_value_accuracy = get_function_value_accuracy();\r\n\r\n        const double relative_accuracy = get_relative_accuracy();\r\n\r\n\r\n\r\n        double oldx = INFINITY;\r\n\r\n        while (true) \r\n\r\n        {\r\n\r\n            // calculate the root approximation\r\n\r\n            const double x3 = 0.5 * (x1 + x2);\r\n\r\n            const double y3 = compute_objective_value(x3);\r\n\r\n            if (std::abs(y3) <= function_value_accuracy) \r\n\r\n            {\r\n\r\n                return x3;\r\n\r\n            }\r\n\r\n            const double delta = 1 - (y1 * y2) / (y3 * y3);  // delta > 1 due to bracketing\r\n\r\n            const double correction = (FastMath.signum(y2) * FastMath.signum(y3)) *\r\n\r\n                                      (x3 - x1) / std::sqrt(delta);\r\n\r\n            const double x = x3 - correction;                // correction != 0\r\n\r\n            const double y = compute_objective_value(x);\r\n\r\n\r\n\r\n            // check for convergence\r\n\r\n            const double& tolerance = std::max(relative_accuracy * std::abs(x), absolute_accuracy);\r\n\r\n            if (std::abs(x - oldx) <= tolerance) \r\n\r\n            {\r\n\r\n                return x;\r\n\r\n            }\r\n\r\n            if (std::abs(y) <= function_value_accuracy) \r\n\r\n            {\r\n\r\n                return x;\r\n\r\n            }\r\n\r\n\r\n\r\n            // prepare the interval for next iteration\r\n\r\n            // Ridders' method guarantees x1 < x < x2\r\n\r\n            if (correction > 0.0) {             // x1 < x < x3\r\n\r\n                if (FastMath.signum(y1) + FastMath.signum(y) == 0.0) \r\n\r\n                {\r\n\r\n                    x2 = x;\r\n\r\n                    y2 = y;\r\n\r\n                }\r\n\r\nelse \r\n\r\n                {\r\n\r\n                    x1 = x;\r\n\r\n                    x2 = x3;\r\n\r\n                    y1 = y;\r\n\r\n                    y2 = y3;\r\n\r\n                }\r\n\r\n            }\r\n\r\nelse {                            // x3 < x < x2\r\n\r\n                if (FastMath.signum(y2) + FastMath.signum(y) == 0.0) \r\n\r\n                {\r\n\r\n                    x1 = x;\r\n\r\n                    y1 = y;\r\n\r\n                }\r\n\r\nelse \r\n\r\n                {\r\n\r\n                    x1 = x3;\r\n\r\n                    x2 = x;\r\n\r\n                    y1 = y3;\r\n\r\n                    y2 = y;\r\n\r\n                }\r\n\r\n            }\r\n\r\n            oldx = x;\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n