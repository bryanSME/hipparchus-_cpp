/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n\r\n\r\n//package org.hipparchus.analysis.solvers;\r\n\r\n\r\n\r\n//import org.hipparchus.exception.;\r\n\r\n//import org.hipparchus.exception.Math_Illegal_State_Exception;\r\n\r\n//import org.hipparchus.util.FastMath;\r\n\r\n\r\n\r\n/**\r\n\r\n * Implements the <em>Secant</em> method for root-finding (approximating a\r\n\r\n * zero of a univariate real function). The solution that is maintained is\r\n\r\n * not bracketed, and as such convergence is not guaranteed.\r\n\r\n *\r\n\r\n * <p>Implementation based on the following article: M. Dowell and P. Jarratt, * <em>A modified regula falsi method for computing the root of an\r\n\r\n * equation</em>, BIT Numerical Mathematics, volume 11, number 2, * pages 168-174, Springer, 1971.</p>\r\n\r\n *\r\n\r\n * <p>Note that since release 3.0 this class : the actual\r\n\r\n * <em>Secant</em> algorithm, and not a modified one. As such, the 3.0 version\r\n\r\n * is not backwards compatible with previous versions. To use an algorithm\r\n\r\n * similar to the pre-3.0 releases, use the\r\n\r\n * {@link Illinois_Solver <em>Illinois</em>} algorithm or the\r\n\r\n * {@link Pegasus_Solver <em>Pegasus</em>} algorithm.</p>\r\n\r\n *\r\n\r\n */\r\n\r\nclass Secant_Solver extends Abstract_Univariate_Solver \r\n\r\n{\r\n\r\n\r\n\r\n    /** Default absolute accuracy. */\r\n\r\n    protected static const double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;\r\n\r\n\r\n\r\n    /** Construct a solver with default accuracy (1e-6). */\r\n\r\n    public Secant_Solver() \r\n\r\n    {\r\n\r\n        super(DEFAULT_ABSOLUTE_ACCURACY);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Construct a solver.\r\n\r\n     *\r\n\r\n     * @param absolute_accuracy absolute accuracy\r\n\r\n     */\r\n\r\n    public Secant_Solver(const double& absolute_accuracy) \r\n\r\n    {\r\n\r\n        super(absolute_accuracy);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Construct a solver.\r\n\r\n     *\r\n\r\n     * @param relative_accuracy relative accuracy\r\n\r\n     * @param absolute_accuracy absolute accuracy\r\n\r\n     */\r\n\r\n    public Secant_Solver(const double relative_accuracy, const double& absolute_accuracy) \r\n\r\n    {\r\n\r\n        super(relative_accuracy, absolute_accuracy);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n    //override\r\n\r\n    protected const double do_solve()\r\n\r\n        , Math_Illegal_State_Exception \r\n\r\n        {\r\n\r\n        // Get initial solution\r\n\r\n        double x0 = get_min();\r\n\r\n        double x1 = get_max();\r\n\r\n        double f0 = compute_objective_value(x0);\r\n\r\n        double f1 = compute_objective_value(x1);\r\n\r\n\r\n\r\n        // If one of the bounds is the exact root, return it. sin_ce these are\r\n\r\n        // not under-approximations or over-approximations, we can return them\r\n\r\n        // regardless of the allowed solutions.\r\n\r\n        if (f0 == 0.0) \r\n\r\n        {\r\n\r\n            return x0;\r\n\r\n        }\r\n\r\n        if (f1 == 0.0) \r\n\r\n        {\r\n\r\n            return x1;\r\n\r\n        }\r\n\r\n\r\n\r\n        // Verify bracketing of initial solution.\r\n\r\n        verify_bracketing(x0, x1);\r\n\r\n\r\n\r\n        // Get accuracies.\r\n\r\n        const double ftol = get_function_value_accuracy();\r\n\r\n        const double& atol = get_absolute_accuracy();\r\n\r\n        const double rtol = get_relative_accuracy();\r\n\r\n\r\n\r\n        // Keep finding better approximations.\r\n\r\n        while (true) \r\n\r\n        {\r\n\r\n            // Calculate the next approximation.\r\n\r\n            const double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));\r\n\r\n            const double fx = compute_objective_value(x);\r\n\r\n\r\n\r\n            // If the approximation is the exact root, return it. sin_ce\r\n\r\n            // this is not an under-approximation or an over-approximation, // we can return it regardless of the allowed solutions.\r\n\r\n            if (fx == 0.0) \r\n\r\n            {\r\n\r\n                return x;\r\n\r\n            }\r\n\r\n\r\n\r\n            // Update the bounds with the approximation.\r\n\r\n            x0 = x1;\r\n\r\n            f0 = f1;\r\n\r\n            x1 = x;\r\n\r\n            f1 = fx;\r\n\r\n\r\n\r\n            // If the function value of the last approximation is too small, // given the function value accuracy, then we can't get closer to\r\n\r\n            // the root than we already are.\r\n\r\n            if (std::abs(f1) <= ftol) \r\n\r\n            {\r\n\r\n                return x1;\r\n\r\n            }\r\n\r\n\r\n\r\n            // If the current interval is within the given accuracies, we\r\n\r\n            // are satisfied with the current approximation.\r\n\r\n            if (std::abs(x1 - x0) < std::max(rtol * std::abs(x1), atol)) \r\n\r\n            {\r\n\r\n                return x1;\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n