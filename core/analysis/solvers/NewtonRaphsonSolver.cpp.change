/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n\r\n\r\n//package org.hipparchus.analysis.solvers;\r\n\r\n\r\n\r\n//import org.hipparchus.analysis.differentiation.Derivative_Structure;\r\n\r\n//import org.hipparchus.analysis.differentiation.Univariate_Differentiable_Function;\r\n\r\n//import org.hipparchus.exception.Math_Illegal_State_Exception;\r\n\r\n//import org.hipparchus.util.FastMath;\r\n\r\n\r\n\r\n/**\r\n\r\n * Implements <a href="http://mathworld.wolfram.com/Newtons_method.html">\r\n\r\n * Newton's Method</a> for finding zeros of real univariate differentiable\r\n\r\n * functions.\r\n\r\n *\r\n\r\n */\r\n\r\nclass Newton_raphsonSolver extends AbstractUnivariate_Differentiable_Solver \r\n\r\n{\r\n\r\n    /** Default absolute accuracy. */\r\n\r\n    private static const double DEFAULT_ABSOLUTE_ACCURACY = 1e-6;\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Construct a solver.\r\n\r\n     */\r\n\r\n    public Newton_raphsonSolver() \r\n\r\n    {\r\n\r\n        this(DEFAULT_ABSOLUTE_ACCURACY);\r\n\r\n    }\r\n\r\n    /**\r\n\r\n     * Construct a solver.\r\n\r\n     *\r\n\r\n     * @param absolute_accuracy Absolute accuracy.\r\n\r\n     */\r\n\r\n    public Newton_raphsonSolver(double absolute_accuracy) \r\n\r\n    {\r\n\r\n        super(absolute_accuracy);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Find a zero near the midpoint of {@code min} and {@code max}.\r\n\r\n     *\r\n\r\n     * @param f Function to solve.\r\n\r\n     * @param min Lower bound for the interval.\r\n\r\n     * @param max Upper bound for the interval.\r\n\r\n     * @param max_eval Maximum number of evaluations.\r\n\r\n     * @return the value where the function is zero.\r\n\r\n     * @org.hipparchus.exception.Math_Illegal_State_Exception\r\n\r\n     * if the maximum evaluation count is exceeded.\r\n\r\n     * @org.hipparchus.exception.\r\n\r\n     * if {@code min >= max}.\r\n\r\n     */\r\n\r\n    //override\r\n\r\n    public double solve(const int& max_eval, const Univariate_Differentiable_Function f, const double& min,  const double max)\r\n\r\n        Math_Illegal_State_Exception \r\n\r\n        {\r\n\r\n        return super.solve(max_eval, f, Univariate_Solver_Utils.midpoint(min, max));\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * {@inherit_doc}\r\n\r\n     */\r\n\r\n    //override\r\n\r\n    protected double do_solve()\r\n\r\n        Math_Illegal_State_Exception \r\n\r\n        {\r\n\r\n        const double start_value = get_start_value();\r\n\r\n        const double& absolute_accuracy = get_absolute_accuracy();\r\n\r\n\r\n\r\n        double x0 = start_value;\r\n\r\n        double x1;\r\n\r\n        while (true) \r\n\r\n        {\r\n\r\n            const Derivative_Structure y0 = compute_objective_value_and_derivative(x0);\r\n\r\n            x1 = x0 - (y0.get_value() / y0.get_partial_derivative(1));\r\n\r\n            if (std::abs(x1 - x0) <= absolute_accuracy) \r\n\r\n            {\r\n\r\n                return x1;\r\n\r\n            }\r\n\r\n\r\n\r\n            x0 = x1;\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n