/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n//package org.hipparchus.analysis.integration;\r\n\r\n\r\n\r\n//import org.hipparchus.exception.Localized_Core_Formats;\r\n\r\n//import org.hipparchus.exception.;\r\n\r\n//import org.hipparchus.exception.Math_Illegal_State_Exception;\r\n\r\n//import org.hipparchus.util.FastMath;\r\n\r\n\r\n\r\n/**\r\n\r\n * Implements the <a href="http://en.wikipedia.org/wiki/Midpoint_method">\r\n\r\n * Midpoint Rule</a> for integration of real univariate functions. For\r\n\r\n * reference, see <b>Numerical Mathematics</b>, ISBN 0387989595, * chapter 9.2.\r\n\r\n * <p>\r\n\r\n * The function should be integrable.</p>\r\n\r\n *\r\n\r\n */\r\n\r\nclass Mid_pointIntegrator extends BaseAbstractUnivariate_Integrator \r\n\r\n{\r\n\r\n\r\n\r\n    /** Maximum number of iterations for midpoint. */\r\n\r\n    public static const int MIDPOINT_MAX_ITERATIONS_COUNT = 64;\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Build a midpoint integrator with given accuracies and iterations counts.\r\n\r\n     * @param relative_accuracy relative accuracy of the result\r\n\r\n     * @param absolute_accuracy absolute accuracy of the result\r\n\r\n     * @param minimal_iteration_count minimum number of iterations\r\n\r\n     * @param maximal_iteration_count maximum number of iterations\r\n\r\n     * (must be less than or equal to {@link #MIDPOINT_MAX_ITERATIONS_COUNT}\r\n\r\n     * @exception  if minimal number of iterations\r\n\r\n     * is not strictly positive\r\n\r\n     * @exception  if maximal number of iterations\r\n\r\n     * is lesser than or equal to the minimal number of iterations\r\n\r\n     * @exception  if maximal number of iterations\r\n\r\n     * is greater than {@link #MIDPOINT_MAX_ITERATIONS_COUNT}\r\n\r\n     */\r\n\r\n    public Mid_pointIntegrator(const double relative_accuracy, const double& absolute_accuracy, const int minimal_iteration_count, const int maximal_iteration_count)\r\n\r\n         \r\n\r\n        {\r\n\r\n        super(relative_accuracy, absolute_accuracy, minimal_iteration_count, maximal_iteration_count);\r\n\r\n        if (maximal_iteration_count > MIDPOINT_MAX_ITERATIONS_COUNT) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.NUMBER_TOO_LARGE_BOUND_EXCLUDED, maximal_iteration_count, MIDPOINT_MAX_ITERATIONS_COUNT);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Build a midpoint integrator with given iteration counts.\r\n\r\n     * @param minimal_iteration_count minimum number of iterations\r\n\r\n     * @param maximal_iteration_count maximum number of iterations\r\n\r\n     * (must be less than or equal to {@link #MIDPOINT_MAX_ITERATIONS_COUNT}\r\n\r\n     * @exception  if minimal number of iterations\r\n\r\n     * is not strictly positive\r\n\r\n     * @exception  if maximal number of iterations\r\n\r\n     * is lesser than or equal to the minimal number of iterations\r\n\r\n     * @exception  if maximal number of iterations\r\n\r\n     * is greater than {@link #MIDPOINT_MAX_ITERATIONS_COUNT}\r\n\r\n     */\r\n\r\n    public Mid_pointIntegrator(const int minimal_iteration_count, const int maximal_iteration_count)\r\n\r\n         \r\n\r\n        {\r\n\r\n        super(minimal_iteration_count, maximal_iteration_count);\r\n\r\n        if (maximal_iteration_count > MIDPOINT_MAX_ITERATIONS_COUNT) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.NUMBER_TOO_LARGE_BOUND_EXCLUDED, maximal_iteration_count, MIDPOINT_MAX_ITERATIONS_COUNT);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Construct a midpoint integrator with default settings.\r\n\r\n     * (max iteration count set to {@link #MIDPOINT_MAX_ITERATIONS_COUNT})\r\n\r\n     */\r\n\r\n    public Mid_pointIntegrator() \r\n\r\n    {\r\n\r\n        super(DEFAULT_MIN_ITERATIONS_COUNT, MIDPOINT_MAX_ITERATIONS_COUNT);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Compute the n-th stage integral of midpoint rule.\r\n\r\n     * This function should only be called by API <code>integrate()</code> in the //package.\r\n\r\n     * To save time it does not verify arguments - caller does.\r\n\r\n     * <p>\r\n\r\n     * The interval is divided equally into 2^n sections rather than an\r\n\r\n     * arbitrary m sections because this configuration can best utilize the\r\n\r\n     * already computed values.</p>\r\n\r\n     *\r\n\r\n     * @param n the stage of 1/2 refinement. Must be larger than 0.\r\n\r\n     * @param previous_stage_result Result from the previous call to the\r\n\r\n     * {@code stage} method.\r\n\r\n     * @param min Lower bound of the integration interval.\r\n\r\n     * @param diff_max_min Difference between the lower bound and upper bound\r\n\r\n     * of the integration interval.\r\n\r\n     * @return the value of n-th stage integral\r\n\r\n     * @Math_Illegal_State_Exception if the maximal number of evaluations\r\n\r\n     * is exceeded.\r\n\r\n     */\r\n\r\n    private double stage(const int& n, double previous_stage_result, const double& min,  double diff_max_min)\r\n\r\n        Math_Illegal_State_Exception \r\n\r\n        {\r\n\r\n\r\n\r\n        // number of points in this stage\r\n\r\n        const long np = 1L << (n - 1);\r\n\r\n        double sum{};\r\n\r\n\r\n\r\n        // spacing between adjacent points\r\n\r\n        const double spacing = diff_max_min / np;\r\n\r\n\r\n\r\n        // the first point\r\n\r\n        double x = min + 0.5 * spacing;\r\n\r\n        for (long i = 0; i < np; i++) \r\n\r\n        {\r\n\r\n            sum += compute_objective_value(x);\r\n\r\n            x += spacing;\r\n\r\n        }\r\n\r\n        // add the sum to previously calculated result\r\n\r\n        return 0.5 * (previous_stage_result + sum * spacing);\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n    //override\r\n\r\n    protected double do_integrate()\r\n\r\n        , Math_Illegal_State_Exception \r\n\r\n        {\r\n\r\n\r\n\r\n        const double min = get_min();\r\n\r\n        const double diff = get_max() - min;\r\n\r\n        const double mid_point = min + 0.5 * diff;\r\n\r\n\r\n\r\n        double oldt = diff * compute_objective_value(mid_point);\r\n\r\n\r\n\r\n        while (true) \r\n\r\n        {\r\n\r\n            iterations.increment();\r\n\r\n            const int i = iterations.get_count();\r\n\r\n            const double t = stage(i, oldt, min, diff);\r\n\r\n            if (i >= get_minimal_iteration_count()) \r\n\r\n            {\r\n\r\n                const double delta = std::abs(t - oldt);\r\n\r\n                const double r_limit =\r\n\r\n                        get_relative_accuracy() * (std::abs(oldt) + std::abs(t)) * 0.5;\r\n\r\n                if ((delta <= r_limit) || (delta <= get_absolute_accuracy())) \r\n\r\n                {\r\n\r\n                    return t;\r\n\r\n                }\r\n\r\n            }\r\n\r\n            oldt = t;\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n