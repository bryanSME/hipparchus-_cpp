/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n//package org.hipparchus.analysis.integration;\r\n\r\n\r\n\r\n//import org.hipparchus.exception.Localized_Core_Formats;\r\n\r\n//import org.hipparchus.exception.;\r\n\r\n//import org.hipparchus.exception.Math_Illegal_State_Exception;\r\n\r\n//import org.hipparchus.util.FastMath;\r\n\r\n\r\n\r\n/**\r\n\r\n * Implements <a href="http://mathworld.wolfram.com/SimpsonsRule.html">\r\n\r\n * Simpson's Rule</a> for integration of real univariate functions. For\r\n\r\n * reference, see <b>Introduction to Numerical Analysis</b>, ISBN 038795452X, * chapter 3.\r\n\r\n * <p>\r\n\r\n * This implementation employs the basic trapezoid rule to calculate Simpson's\r\n\r\n * rule.</p>\r\n\r\n *\r\n\r\n */\r\n\r\nclass Simpson_Integrator extends BaseAbstractUnivariate_Integrator \r\n\r\n{\r\n\r\n\r\n\r\n    /** Maximal number of iterations for Simpson. */\r\n\r\n    public static const int SIMPSON_MAX_ITERATIONS_COUNT = 64;\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Build a Simpson integrator with given accuracies and iterations counts.\r\n\r\n     * @param relative_accuracy relative accuracy of the result\r\n\r\n     * @param absolute_accuracy absolute accuracy of the result\r\n\r\n     * @param minimal_iteration_count minimum number of iterations\r\n\r\n     * @param maximal_iteration_count maximum number of iterations\r\n\r\n     * (must be less than or equal to {@link #SIMPSON_MAX_ITERATIONS_COUNT})\r\n\r\n     * @exception  if minimal number of iterations\r\n\r\n     * is not strictly positive\r\n\r\n     * @exception  if maximal number of iterations\r\n\r\n     * is lesser than or equal to the minimal number of iterations\r\n\r\n     * @exception  if maximal number of iterations\r\n\r\n     * is greater than {@link #SIMPSON_MAX_ITERATIONS_COUNT}\r\n\r\n     */\r\n\r\n    public Simpson_Integrator(const double relative_accuracy, const double& absolute_accuracy, const int minimal_iteration_count, const int maximal_iteration_count)\r\n\r\n         \r\n\r\n        {\r\n\r\n        super(relative_accuracy, absolute_accuracy, minimal_iteration_count, maximal_iteration_count);\r\n\r\n        if (maximal_iteration_count > SIMPSON_MAX_ITERATIONS_COUNT) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.NUMBER_TOO_LARGE_BOUND_EXCLUDED, maximal_iteration_count, SIMPSON_MAX_ITERATIONS_COUNT);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Build a Simpson integrator with given iteration counts.\r\n\r\n     * @param minimal_iteration_count minimum number of iterations\r\n\r\n     * @param maximal_iteration_count maximum number of iterations\r\n\r\n     * (must be less than or equal to {@link #SIMPSON_MAX_ITERATIONS_COUNT})\r\n\r\n     * @exception  if minimal number of iterations\r\n\r\n     * is not strictly positive\r\n\r\n     * @exception  if maximal number of iterations\r\n\r\n     * is lesser than or equal to the minimal number of iterations\r\n\r\n     * @exception  if maximal number of iterations\r\n\r\n     * is greater than {@link #SIMPSON_MAX_ITERATIONS_COUNT}\r\n\r\n     */\r\n\r\n    public Simpson_Integrator(const int minimal_iteration_count, const int maximal_iteration_count)\r\n\r\n         \r\n\r\n        {\r\n\r\n        super(minimal_iteration_count, maximal_iteration_count);\r\n\r\n        if (maximal_iteration_count > SIMPSON_MAX_ITERATIONS_COUNT) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.NUMBER_TOO_LARGE_BOUND_EXCLUDED, maximal_iteration_count, SIMPSON_MAX_ITERATIONS_COUNT);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Construct an integrator with default settings.\r\n\r\n     * (max iteration count set to {@link #SIMPSON_MAX_ITERATIONS_COUNT})\r\n\r\n     */\r\n\r\n    public Simpson_Integrator() \r\n\r\n    {\r\n\r\n        super(DEFAULT_MIN_ITERATIONS_COUNT, SIMPSON_MAX_ITERATIONS_COUNT);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n    //override\r\n\r\n    protected double do_integrate()\r\n\r\n        Math_Illegal_State_Exception \r\n\r\n        {\r\n\r\n\r\n\r\n        Trapezoid_Integrator qtrap = Trapezoid_Integrator();\r\n\r\n        if (get_minimal_iteration_count() == 1) \r\n\r\n        {\r\n\r\n            return (4 * qtrap.stage(this, 1) - qtrap.stage(this, 0)) / 3.0;\r\n\r\n        }\r\n\r\n\r\n\r\n        // Simpson's rule requires at least two trapezoid stages.\r\n\r\n        double olds = 0;\r\n\r\n        double oldt = qtrap.stage(this, 0);\r\n\r\n        while (true) \r\n\r\n        {\r\n\r\n            const double t = qtrap.stage(this, iterations.get_count());\r\n\r\n            iterations.increment();\r\n\r\n            const double s = (4 * t - oldt) / 3.0;\r\n\r\n            if (iterations.get_count() >= get_minimal_iteration_count()) \r\n\r\n            {\r\n\r\n                const double delta = std::abs(s - olds);\r\n\r\n                const double r_limit =\r\n\r\n                    get_relative_accuracy() * (std::abs(olds) + std::abs(s)) * 0.5;\r\n\r\n                if ((delta <= r_limit) || (delta <= get_absolute_accuracy())) \r\n\r\n                {\r\n\r\n                    return s;\r\n\r\n                }\r\n\r\n            }\r\n\r\n            olds = s;\r\n\r\n            oldt = t;\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n