/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n//package org.hipparchus.analysis.integration;\r\n\r\n\r\n\r\n#include "../../analysis/UnivariateFunction.h"\r\n\r\n//import org.hipparchus.analysis.Univariate_Function;\r\n\r\n//import org.hipparchus.exception.;\r\n\r\n//import org.hipparchus.exception.Math_Illegal_State_Exception;\r\n\r\n//import org.hipparchus.exception.Null_Argument_Exception;\r\n\r\n\r\n\r\n/**\r\n\r\n * Interface for univariate real integration algorithms.\r\n\r\n *\r\n\r\n */\r\n\r\nclass Univariate_Integrator\r\n\r\n{\r\n\r\n    /**\r\n\r\n     * Get the relative accuracy.\r\n\r\n     *\r\n\r\n     * @return the accuracy\r\n\r\n     */\r\n\r\n    virtual double get_relative_accuracy();\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Get the absolute accuracy.\r\n\r\n     *\r\n\r\n     * @return the accuracy\r\n\r\n     */\r\n\r\n    virtual double get_absolute_accuracy();\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Get the min limit for the number of iterations.\r\n\r\n     *\r\n\r\n     * @return the actual min limit\r\n\r\n     */\r\n\r\n    virtual int get_minimal_iteration_count();\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Get the upper limit for the number of iterations.\r\n\r\n     *\r\n\r\n     * @return the actual upper limit\r\n\r\n     */\r\n\r\n    virtual int get_maximal_iteration_count();\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Integrate the function in the given interval.\r\n\r\n     *\r\n\r\n     * @param max_eval Maximum number of evaluations.\r\n\r\n     * @param f the integrand function\r\n\r\n     * @param min the lower bound for the interval\r\n\r\n     * @param max the upper bound for the interval\r\n\r\n     * @return the value of integral\r\n\r\n     * @Math_Illegal_State_Exception if the maximum number of function\r\n\r\n     * evaluations is exceeded\r\n\r\n     * @Math_Illegal_State_Exception if the maximum iteration count is exceeded\r\n\r\n     * or the integrator detects convergence problems otherwise\r\n\r\n     * @ if {@code min > max} or the endpoints do not\r\n\r\n     * satisfy the requirements specified by the integrator\r\n\r\n     * @Null_Argument_Exception if {@code f} is {@code null}.\r\n\r\n     */\r\n\r\n    virtual double integrate(const int& max_eval, const Univariate_Function& f, const double& min, double max)\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Get the number of function evaluations of the last run of the integrator.\r\n\r\n     *\r\n\r\n     * @return number of function evaluations\r\n\r\n     */\r\n\r\n    virtual int get_evaluations();\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Get the number of iterations of the last run of the integrator.\r\n\r\n     *\r\n\r\n     * @return number of iterations\r\n\r\n     */\r\n\r\n    virtual int get_iterations();\r\n\r\n\r\n\r\n};\r\n