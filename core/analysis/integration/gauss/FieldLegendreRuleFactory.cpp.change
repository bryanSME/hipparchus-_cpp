/*\r\n\r\n * Licensed to the Hipparchus project under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The Hipparchus project licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n//package org.hipparchus.analysis.integration.gauss;\r\n\r\n\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n//import org.hipparchus.Field;\r\n\r\n//import org.hipparchus.exception.;\r\n\r\n//import org.hipparchus.util.Math_Arrays;\r\n\r\n//import org.hipparchus.util.Pair;\r\n\r\n\r\n\r\n/**\r\n\r\n * Factory that creates Gauss-type quadrature rule using Legendre polynomials.\r\n\r\n * In this implementation, the lower and upper bounds of the natural interval\r\n\r\n * of integration are -1 and 1, respectively.\r\n\r\n * The Legendre polynomials are evaluated using the recurrence relation\r\n\r\n * presented in <a href="http://en.wikipedia.org/wiki/Abramowitz_and_Stegun">\r\n\r\n * Abramowitz and Stegun, 1964</a>.\r\n\r\n *\r\n\r\n * @param <T> Type of the number used to represent the points and weights of\r\n\r\n * the quadrature rules.\r\n\r\n * @since 2.0\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\nclass FieldLegendreRule_Factory extends FieldAbstractRule_Factory<T> \r\n\r\n{\r\n\r\n\r\n\r\n    /** Simple constructor\r\n\r\n     * @param field field to which rule coefficients belong\r\n\r\n     */\r\n\r\n    public FieldLegendreRule_Factory(const Field<T> field) \r\n\r\n    {\r\n\r\n        super(field);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n    //override\r\n\r\n    public Pair<std::vector<T>, std::vector<T>> compute_rule(const int& number_of_points)\r\n\r\n         \r\n\r\n        {\r\n\r\n\r\n\r\n        const Field<T> field = get_field();\r\n\r\n\r\n\r\n        if (number_of_points == 1) \r\n\r\n        {\r\n\r\n            // Break recursion.\r\n\r\n            const std::vector<T> points  = Math_Arrays::build_array(field, number_of_points);\r\n\r\n            const std::vector<T> weights = Math_Arrays::build_array(field, number_of_points);\r\n\r\n            points[0]  = field.get_zero();\r\n\r\n            weights[0] = field.get_zero().new_instance(2);\r\n\r\n            return Pair<>(points, weights);\r\n\r\n        }\r\n\r\n\r\n\r\n        // find nodes as roots of Legendre polynomial\r\n\r\n        const Legendre<T> p      =  Legendre<>(number_of_points);\r\n\r\n        const std::vector<T>         points = find_roots(number_of_points, p::ratio);\r\n\r\n        enforce_symmetry(points);\r\n\r\n\r\n\r\n        // compute weights\r\n\r\n        const std::vector<T> weights = Math_Arrays::build_array(field, number_of_points);\r\n\r\n        for (int i{}; i <= number_of_points / 2; i++) \r\n\r\n        {\r\n\r\n            const T c = points[i];\r\n\r\n            const std::vector<T> pKpKm1 = p.pNpNm1(c);\r\n\r\n            const T d = pKpKm1[1].subtract(c.multiply(pKpKm1[0])).multiply(number_of_points);\r\n\r\n            weights[i] = c.multiply(c).subtract(1).multiply(-2).divide(d.multiply(d));\r\n\r\n\r\n\r\n            // symmetrical point\r\n\r\n            const int idx = number_of_points - i - 1;\r\n\r\n            weights[idx]  = weights[i];\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n        return Pair<>(points, weights);\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Legendre polynomial.\r\n\r\n     * @param <T> Type of the field elements.\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n    private static class Legendre \r\n\r\n    {\r\n\r\n\r\n\r\n        /** Degree. */\r\n\r\n        private int degree;\r\n\r\n\r\n\r\n        /** Simple constructor.\r\n\r\n         * @param degree polynomial degree\r\n\r\n         */\r\n\r\n        Legendre(const int& degree) \r\n\r\n        {\r\n\r\n            this.degree = degree;\r\n\r\n        }\r\n\r\n\r\n\r\n        /** Compute ratio P(x)/P'(x).\r\n\r\n         * @param x point at which ratio must be computed\r\n\r\n         * @return ratio P(x)/P'(x)\r\n\r\n         */\r\n\r\n        public T ratio(T x) \r\n\r\n        {\r\n\r\n            T pm = x.get_field().get_one();\r\n\r\n            T p  = x;\r\n\r\n            T d  = x.get_field().get_one();\r\n\r\n            for (const int n = 1; n < degree; n++) \r\n\r\n            {\r\n\r\n                // apply recurrence relations (n+1) P_n+1(x)  = (2n+1) x P_n(x) - n P_n-1(x)\r\n\r\n                // and                              P'_n+1(x) = (n+1) P_n(x) + x P'_n(x)\r\n\r\n                const T pp = p.multiply(x.multiply(2 * n + 1)).subtract(pm.multiply(n)).divide(n + 1);\r\n\r\n                d  = p.multiply(n + 1).add(d.multiply(x));\r\n\r\n                pm = p;\r\n\r\n                p  = pp;\r\n\r\n            }\r\n\r\n            return p.divide(d);\r\n\r\n        }\r\n\r\n\r\n\r\n        /** Compute P_n(x) and P_n-1(x).\r\n\r\n         * @param x point at which polynomials are evaluated\r\n\r\n         * @return array containing P_n(x) at index 0 and P_n-1(x) at index 1\r\n\r\n         */\r\n\r\n        private std::vector<T> pNpNm1(const T x) \r\n\r\n        {\r\n\r\n            std::vector<T> p = Math_Arrays::build_array(x.get_field(), 2);\r\n\r\n            p[0] = x;\r\n\r\n            p[1] = x.get_field().get_one();\r\n\r\n            for (const int n = 1; n < degree; n++) \r\n\r\n            {\r\n\r\n                // apply recurrence relation (n+1) P_n+1(x) = (2n+1) x P_n(x) - n P_n-1(x)\r\n\r\n                const T pp = p[0].multiply(x.multiply(2 * n + 1)).subtract(p[1].multiply(n)).divide(n + 1);\r\n\r\n                p[1] = p[0];\r\n\r\n                p[0] = pp;\r\n\r\n            }\r\n\r\n            return p;\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n