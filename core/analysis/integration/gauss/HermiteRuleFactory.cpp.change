/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n\r\n\r\n#include <cmath>\r\n\r\n//import org.hipparchus.exception.;\r\n\r\n//import org.hipparchus.util.FastMath;\r\n\r\n//import org.hipparchus.util.Pair;\r\n\r\n\r\n\r\n/**\r\n\r\n * Factory that creates a\r\n\r\n * <a href="http://en.wikipedia.org/wiki/Gauss-Hermite_quadrature">\r\n\r\n * Gauss-type quadrature rule using Hermite polynomials</a>\r\n\r\n * of the first kind.\r\n\r\n * Such a quadrature rule allows the calculation of improper integrals\r\n\r\n * of a function\r\n\r\n * <p>\r\n\r\n *  \\(f(x) e^{-x^2}\\)\r\n\r\n * </p>\r\n\r\n * <p>\r\n\r\n * Recurrence relation and weights computation follow\r\n\r\n * <a href="http://en.wikipedia.org/wiki/Abramowitz_and_Stegun">\r\n\r\n * Abramowitz and Stegun, 1964</a>.\r\n\r\n * </p>\r\n\r\n *\r\n\r\n */\r\n\r\nclass HermiteRule_Factory extends AbstractRule_Factory \r\n\r\n{\r\n\r\n\r\n\r\n    /** \xe2\x88\x9a\xcf\x80. */\r\n\r\n    private static const double SQRT_PI = 1.77245385090551602729;\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n    override\r\n\r\n    protected Pair<std::vector<double>, std::vector<double>> compute_rule(const int& number_of_points)\r\n\r\n         \r\n\r\n        {\r\n\r\n\r\n\r\n        if (number_of_points == 1) \r\n\r\n        {\r\n\r\n            // Break recursion.\r\n\r\n            return Pair<>(std::vector<double> { 0 } , std::vector<double> { SQRT_PI });\r\n\r\n        }\r\n\r\n\r\n\r\n        // find nodes as roots of Hermite polynomial\r\n\r\n        const std::vector<double> points = find_roots(number_of_points, Hermite(number_of_points)::ratio);\r\n\r\n        enforce_symmetry(points);\r\n\r\n\r\n\r\n        // compute weights\r\n\r\n        const std::vector<double> weights = std::vector<double>(number_of_points];\r\n\r\n        const Hermite hm1 = Hermite(number_of_points - 1);\r\n\r\n        for (int i{}; i < number_of_points; i++) \r\n\r\n        {\r\n\r\n            const double y = hm1.hNhNm1(points[i])[0];\r\n\r\n            weights[i] = SQRT_PI / (number_of_points * y * y);\r\n\r\n        }\r\n\r\n\r\n\r\n        return Pair<>(points, weights);\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Hermite polynomial, normalized to avoid overflow.\r\n\r\n     * <p>\r\n\r\n     * The regular Hermite polynomials and associated weights are given by:\r\n\r\n     *   <pre>\r\n\r\n     *     H\xe2\x82\x80(x)   = 1\r\n\r\n     *     H\xe2\x82\x81(x)   = 2 x\r\n\r\n     *     H\xe2\x82\x99\xe2\x82\x8a\xe2\x82\x81(x) = 2x H\xe2\x82\x99(x) - 2n H\xe2\x82\x99\xe2\x82\x8b\xe2\x82\x81(x), and H'\xe2\x82\x99(x) = 2n H\xe2\x82\x99\xe2\x82\x8b\xe2\x82\x81(x)\r\n\r\n     *     w\xe2\x82\x99(x\xe1\xb5\xa2) = [2\xe2\x81\xbf\xe2\x81\xbb\xc2\xb9 n! \xe2\x88\x9a\xcf\x80]/[n H\xe2\x82\x99\xe2\x82\x8b\xe2\x82\x81(x\xe1\xb5\xa2)]\xc2\xb2\r\n\r\n     *   </pre>\r\n\r\n     * </p>\r\n\r\n     * <p>\r\n\r\n     * In order to avoid overflow with normalize the polynomials h\xe2\x82\x99(x) = H\xe2\x82\x99(x) / \xe2\x88\x9a[2\xe2\x81\xbf n!]\r\n\r\n     * so the recurrence relations and weights become:\r\n\r\n     *   <pre>\r\n\r\n     *     h\xe2\x82\x80(x)   = 1\r\n\r\n     *     h\xe2\x82\x81(x)   = \xe2\x88\x9a2 x\r\n\r\n     *     h\xe2\x82\x99\xe2\x82\x8a\xe2\x82\x81(x) = [\xe2\x88\x9a2 x h\xe2\x82\x99(x) - \xe2\x88\x9an h\xe2\x82\x99\xe2\x82\x8b\xe2\x82\x81(x)]/\xe2\x88\x9a(n+1), and h'\xe2\x82\x99(x) = 2n h\xe2\x82\x99\xe2\x82\x8b\xe2\x82\x81(x)\r\n\r\n     *     u\xe2\x82\x99(x\xe1\xb5\xa2) = \xe2\x88\x9a\xcf\x80/[n N\xe2\x82\x99\xe2\x82\x8b\xe2\x82\x81(x\xe1\xb5\xa2)\xc2\xb2]\r\n\r\n     *   </pre>\r\n\r\n     * </p>\r\n\r\n     */\r\n\r\n    private static class Hermite \r\n\r\n    {\r\n\r\n\r\n\r\n        /** \xe2\x88\x9a2. */\r\n\r\n        private static const double SQRT2 = std::sqrt(2);\r\n\r\n\r\n\r\n        /** Degree. */\r\n\r\n        private const int degree;\r\n\r\n\r\n\r\n        /** Simple constructor.\r\n\r\n         * @param degree polynomial degree\r\n\r\n         */\r\n\r\n        Hermite(const int& degree) \r\n\r\n        {\r\n\r\n            this.degree = degree;\r\n\r\n        }\r\n\r\n\r\n\r\n        /** Compute ratio H(x)/H'(x).\r\n\r\n         * @param x point at which ratio must be computed\r\n\r\n         * @return ratio H(x)/H'(x)\r\n\r\n         */\r\n\r\n        public double ratio(double x) \r\n\r\n        {\r\n\r\n            std::vector<double> h = hNhNm1(x);\r\n\r\n            return h[0] / (h[1] * 2 * degree);\r\n\r\n        }\r\n\r\n\r\n\r\n        /** Compute N\xe2\x82\x99(x) and N\xe2\x82\x99\xe2\x82\x8b\xe2\x82\x81(x).\r\n\r\n         * @param x point at which polynomials are evaluated\r\n\r\n         * @return array containing N\xe2\x82\x99(x) at index 0 and N\xe2\x82\x99\xe2\x82\x8b\xe2\x82\x81(x) at index 1\r\n\r\n         */\r\n\r\n        private std::vector<double> hNhNm1(const double& x) \r\n\r\n        {\r\n\r\n            std::vector<double> h = { SQRT2 * x, 1 };\r\n\r\n            double sqrt_n = 1;\r\n\r\n            for (const int n = 1; n < degree; n++) \r\n\r\n            {\r\n\r\n                // apply recurrence relation h\xe2\x82\x99\xe2\x82\x8a\xe2\x82\x81(x) = [\xe2\x88\x9a2 x h\xe2\x82\x99(x) - \xe2\x88\x9an h\xe2\x82\x99\xe2\x82\x8b\xe2\x82\x81(x)]/\xe2\x88\x9a(n+1)\r\n\r\n                const double sqrt_np = std::sqrt(n + 1);\r\n\r\n                const double hp = (h[0] * x * SQRT2 - h[1] * sqrt_n) / sqrt_np;\r\n\r\n                h[1]  = h[0];\r\n\r\n                h[0]  = hp;\r\n\r\n                sqrt_n = sqrt_np;\r\n\r\n            }\r\n\r\n            return h;\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n