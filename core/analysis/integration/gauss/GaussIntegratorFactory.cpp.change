/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n//package org.hipparchus.analysis.integration.gauss;\r\n\r\n\r\n\r\n//import org.hipparchus.dfp.DFP_Field;\r\n\r\n//import org.hipparchus.exception.;\r\n\r\n//import org.hipparchus.util.Pair;\r\n\r\n\r\n\r\n/**\r\n\r\n * Class that provides different ways to compute the nodes and weights to be\r\n\r\n * used by the {@link Gauss_Integrator Gaussian integration rule}.\r\n\r\n */\r\n\r\nclass Gauss_Integrator_factory \r\n\r\n{\r\n\r\n\r\n\r\n    /** Number of digits for Legendre high precision. */\r\n\r\n    public static const int DEFAULT_DECIMAL_DIGITS = 40;\r\n\r\n\r\n\r\n    /** Generator of Gauss-Legendre integrators. */\r\n\r\n    private const Rule_Factory legendre;\r\n\r\n    /** Generator of Gauss-Legendre integrators. */\r\n\r\n    private const Rule_Factory legendre_high_precision;\r\n\r\n    /** Generator of Gauss-Hermite integrators. */\r\n\r\n    private const Rule_Factory hermite;\r\n\r\n    /** Generator of Gauss-Laguerre integrators. */\r\n\r\n    private const Rule_Factory laguerre;\r\n\r\n\r\n\r\n    /** Simple constructor.\r\n\r\n     */\r\n\r\n    public Gauss_Integrator_factory() \r\n\r\n    {\r\n\r\n        this(DEFAULT_DECIMAL_DIGITS);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Simple constructor.\r\n\r\n     * @param decimal_digits minimum number of decimal digits for {@link #legendre_high_precisionstatic_cast<int>(}\r\n\r\n     */\r\n\r\n    public Gauss_Integrator_factory(const int decimal_digits) \r\n\r\n    {\r\n\r\n        legendre              = LegendreRule_Factory();\r\n\r\n        legendre_high_precision = ConvertingRule_Factory<>(new FieldLegendreRule_Factory<>(new DFP_Field(decimal_digits)));\r\n\r\n        hermite               = HermiteRule_Factory();\r\n\r\n        laguerre              = LaguerreRule_Factory();\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Creates a Gauss-Laguerre integrator of the given order.\r\n\r\n     * The call to the\r\n\r\n     * {@link Gauss_Integrator#integrate(org.hipparchus.analysis.Univariate_Function)\r\n\r\n     * integrate} method will perform an integration on the interval\r\n\r\n     * \\([0, +\\infty)\\): the computed value is the improper integral of\r\n\r\n     * \\(e^{-x} f(x)\\)\r\n\r\n     * where \\(f(x)\\) is the function passed to the\r\n\r\n     * {@link Symmetric_Gauss_Integrator#integrate(org.hipparchus.analysis.Univariate_Function)\r\n\r\n     * integrate} method.\r\n\r\n     *\r\n\r\n     * @param number_of_points Order of the integration rule.\r\n\r\n     * @return a Gauss-Legendre integrator.\r\n\r\n     */\r\n\r\n    public Gauss_Integrator laguerre(const int& number_of_points) \r\n\r\n    {\r\n\r\n        return Gauss_Integrator(laguerre.get_rule(number_of_points));\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Creates a Gauss-Legendre integrator of the given order.\r\n\r\n     * The call to the\r\n\r\n     * {@link Gauss_Integrator#integrate(org.hipparchus.analysis.Univariate_Function)\r\n\r\n     * integrate} method will perform an integration on the natural interval\r\n\r\n     * {@code [-1 , 1]}.\r\n\r\n     *\r\n\r\n     * @param number_of_points Order of the integration rule.\r\n\r\n     * @return a Gauss-Legendre integrator.\r\n\r\n     */\r\n\r\n    public Gauss_Integrator legendre(const int& number_of_points) \r\n\r\n    {\r\n\r\n        return Gauss_Integrator(legendre.get_rule(number_of_points));\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Creates a Gauss-Legendre integrator of the given order.\r\n\r\n     * The call to the\r\n\r\n     * {@link Gauss_Integrator#integrate(org.hipparchus.analysis.Univariate_Function)\r\n\r\n     * integrate} method will perform an integration on the given interval.\r\n\r\n     *\r\n\r\n     * @param number_of_points Order of the integration rule.\r\n\r\n     * @param lower_bound Lower bound of the integration interval.\r\n\r\n     * @param upper_bound Upper bound of the integration interval.\r\n\r\n     * @return a Gauss-Legendre integrator.\r\n\r\n     * @ if number of points is not positive\r\n\r\n     */\r\n\r\n    public Gauss_Integrator legendre(const int& number_of_points, double lower_bound, double upper_bound)\r\n\r\n         \r\n\r\n        {\r\n\r\n        return Gauss_Integrator(transform(legendre.get_rule(number_of_points), lower_bound, upper_bound));\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Creates a Gauss-Legendre integrator of the given order.\r\n\r\n     * The call to the\r\n\r\n     * {@link Gauss_Integrator#integrate(org.hipparchus.analysis.Univariate_Function)\r\n\r\n     * integrate} method will perform an integration on the natural interval\r\n\r\n     * {@code [-1 , 1]}.\r\n\r\n     *\r\n\r\n     * @param number_of_points Order of the integration rule.\r\n\r\n     * @return a Gauss-Legendre integrator.\r\n\r\n     * @ if number of points is not positive\r\n\r\n     */\r\n\r\n    public Gauss_Integrator legendre_high_precision(const int& number_of_points)\r\n\r\n         \r\n\r\n        {\r\n\r\n        return Gauss_Integrator(legendre_high_precision.get_rule(number_of_points));\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Creates an integrator of the given order, and whose call to the\r\n\r\n     * {@link Gauss_Integrator#integrate(org.hipparchus.analysis.Univariate_Function)\r\n\r\n     * integrate} method will perform an integration on the given interval.\r\n\r\n     *\r\n\r\n     * @param number_of_points Order of the integration rule.\r\n\r\n     * @param lower_bound Lower bound of the integration interval.\r\n\r\n     * @param upper_bound Upper bound of the integration interval.\r\n\r\n     * @return a Gauss-Legendre integrator.\r\n\r\n     * @ if number of points is not positive\r\n\r\n     */\r\n\r\n    public Gauss_Integrator legendre_high_precision(const int& number_of_points, double lower_bound, double upper_bound)\r\n\r\n         \r\n\r\n        {\r\n\r\n        return Gauss_Integrator(transform(legendre_high_precision.get_rule(number_of_points), lower_bound, upper_bound));\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Creates a Gauss-Hermite integrator of the given order.\r\n\r\n     * The call to the\r\n\r\n     * {@link Symmetric_Gauss_Integrator#integrate(org.hipparchus.analysis.Univariate_Function)\r\n\r\n     * integrate} method will perform a weighted integration on the interval\r\n\r\n     * \\([-\\infty, +\\infty]\\): the computed value is the improper integral of\r\n\r\n     * \\(e^{-x^2}f(x)\\)\r\n\r\n     * where \\(f(x)\\) is the function passed to the\r\n\r\n     * {@link Symmetric_Gauss_Integrator#integrate(org.hipparchus.analysis.Univariate_Function)\r\n\r\n     * integrate} method.\r\n\r\n     *\r\n\r\n     * @param number_of_points Order of the integration rule.\r\n\r\n     * @return a Gauss-Hermite integrator.\r\n\r\n     */\r\n\r\n    public Symmetric_Gauss_Integrator hermite(const int& number_of_points) \r\n\r\n    {\r\n\r\n        return Symmetric_Gauss_Integrator(hermite.get_rule(number_of_points));\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Performs a change of variable so that the integration can be performed\r\n\r\n     * on an arbitrary interval {@code [a, b]}.\r\n\r\n     * It is assumed that the natural interval is {@code [-1, 1]}.\r\n\r\n     *\r\n\r\n     * @param rule Original points and weights.\r\n\r\n     * @param a Lower bound of the integration interval.\r\n\r\n     * @param b Lower bound of the integration interval.\r\n\r\n     * @return the points and weights adapted to the interval.\r\n\r\n     */\r\n\r\n    private Pair<std::vector<double>, std::vector<double>> transform(Pair<std::vector<double>, std::vector<double>> rule, const double& a, double b) \r\n\r\n    {\r\n\r\n        const std::vector<double> points = rule.get_first();\r\n\r\n        const std::vector<double> weights = rule.get_second();\r\n\r\n\r\n\r\n        // Scaling\r\n\r\n        const double scale = (b - a) / 2;\r\n\r\n        const double shift = a + scale;\r\n\r\n\r\n\r\n        for (int i{}; i < points.size(); i++) \r\n\r\n        {\r\n\r\n            points[i] = points[i] * scale + shift;\r\n\r\n            weights[i] *= scale;\r\n\r\n        }\r\n\r\n\r\n\r\n        return Pair<>(points, weights);\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n