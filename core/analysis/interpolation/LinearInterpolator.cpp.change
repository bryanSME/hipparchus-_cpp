/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n//package org.hipparchus.analysis.interpolation;\r\n\r\n\r\n\r\n//import java.lang.reflect.Array;\r\n\r\n#include<vector>\r\n\r\n\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n//import org.hipparchus.analysis.polynomials.Field_Polynomial_Function;\r\n\r\n//import org.hipparchus.analysis.polynomials.Field_Polynomial_Spline_Function;\r\n\r\n//import org.hipparchus.analysis.polynomials.Polynomial_Function;\r\n\r\n//import org.hipparchus.analysis.polynomials.Polynomial_Spline_Function;\r\n\r\n//import org.hipparchus.exception.Localized_Core_Formats;\r\n\r\n//import org.hipparchus.exception.;\r\n\r\n//import org.hipparchus.util.Math_Arrays;\r\n\r\n//import org.hipparchus.util.Math_Utils;\r\n\r\n\r\n\r\n/**\r\n\r\n * Implements a linear function for interpolation of real univariate functions.\r\n\r\n *\r\n\r\n */\r\n\r\nclass Linear_Interpolator : public Univariate_Interpolator, public FieldUnivariate_Interpolator \r\n\r\n{\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Computes a linear interpolating function for the data set.\r\n\r\n     *\r\n\r\n     * @param x the arguments for the interpolation points\r\n\r\n     * @param y the values for the interpolation points\r\n\r\n     * @return a function which interpolates the data set\r\n\r\n     * @ if {@code x} and {@code y}\r\n\r\n     * have different sizes.\r\n\r\n     * @ if {@code x} is not sorted in\r\n\r\n     * strict increasing order.\r\n\r\n     * @ if the size of {@code x} is smaller\r\n\r\n     * than 2.\r\n\r\n     */\r\n\r\n    //override\r\n\r\n    public Polynomial_Spline_Function interpolate(const std::vector<double>& x, const std::vector<double>& y)\r\n\r\n    {\r\n\r\n        //Math_Utils::check_not_null(x);\r\n\r\n        //Math_Utils::check_not_null(y);\r\n\r\n        Math_Arrays::check_equal_length(x, y);\r\n\r\n\r\n\r\n        if (x.size() < 2) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.NUMBER_OF_POINTS, x.size(), 2, true);\r\n\r\n        }\r\n\r\n\r\n\r\n        // Number of intervals.  The number of data points is n + 1.\r\n\r\n        int n = x.size() - 1;\r\n\r\n\r\n\r\n        Math_Arrays::check_order(x);\r\n\r\n\r\n\r\n        // Slope of the lines between the datapoints.\r\n\r\n        const double m[] = std::vector<double>(n];\r\n\r\n        for (int i{}; i < n; i++) \r\n\r\n        {\r\n\r\n            m[i] = (y[i + 1] - y[i]) / (x[i + 1] - x[i]);\r\n\r\n        }\r\n\r\n\r\n\r\n        const Polynomial_Function polynomials[] = Polynomial_Function[n];\r\n\r\n        const double coefficients[] = std::vector<double>(2);\r\n\r\n        for (int i{}; i < n; i++) \r\n\r\n        {\r\n\r\n            coefficients[0] = y[i];\r\n\r\n            coefficients[1] = m[i];\r\n\r\n            polynomials[i] = Polynomial_Function(coefficients);\r\n\r\n        }\r\n\r\n\r\n\r\n        return Polynomial_Spline_Function(x, polynomials);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Computes a linear interpolating function for the data set.\r\n\r\n     *\r\n\r\n     * @param x the arguments for the interpolation points\r\n\r\n     * @param y the values for the interpolation points\r\n\r\n     * @param <T> the type of the field elements\r\n\r\n     * @return a function which interpolates the data set\r\n\r\n     * @ if {@code x} and {@code y}\r\n\r\n     * have different sizes.\r\n\r\n     * @ if {@code x} is not sorted in\r\n\r\n     * strict increasing order.\r\n\r\n     * @ if the size of {@code x} is smaller\r\n\r\n     * than 2.\r\n\r\n     * @since 1.5\r\n\r\n     */\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n    public  Field_Polynomial_Spline_Function<T> interpolate(const T x[], const T y[])\r\n\r\n    {\r\n\r\n        //Math_Utils::check_not_null(x);\r\n\r\n        //Math_Utils::check_not_null(y);\r\n\r\n        Math_Arrays::check_equal_length(x, y);\r\n\r\n\r\n\r\n        if (x.size() < 2) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.NUMBER_OF_POINTS, x.size(), 2, true);\r\n\r\n        }\r\n\r\n\r\n\r\n        // Number of intervals.  The number of data points is n + 1.\r\n\r\n        int n = x.size() - 1;\r\n\r\n\r\n\r\n        Math_Arrays::check_order(x);\r\n\r\n\r\n\r\n        // Slope of the lines between the datapoints.\r\n\r\n        const T m[] = Math_Arrays::build_array(x[0].get_field(), n);\r\n\r\n        for (int i{}; i < n; i++) \r\n\r\n        {\r\n\r\n            m[i] = y[i + 1].subtract(y[i]).divide(x[i + 1].subtract(x[i]));\r\n\r\n        }\r\n\r\n\r\n\r\n        //@Suppress_Warnings("unchecked")\r\n\r\n        const Field_Polynomial_Function<T> polynomials[] =\r\n\r\n                        (Field_Polynomial_Function<T>[]) Array.new_instance(Field_Polynomial_Function.class, n);\r\n\r\n        const T coefficients[] = Math_Arrays::build_array(x[0].get_field(), 2);\r\n\r\n        for (int i{}; i < n; i++) \r\n\r\n        {\r\n\r\n            coefficients[0] = y[i];\r\n\r\n            coefficients[1] = m[i];\r\n\r\n            polynomials[i] = Field_Polynomial_Function<>(coefficients);\r\n\r\n        }\r\n\r\n\r\n\r\n        return Field_Polynomial_Spline_Function<>(x, polynomials);\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n