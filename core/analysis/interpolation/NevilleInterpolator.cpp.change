/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n//package org.hipparchus.analysis.interpolation;\r\n\r\n\r\n\r\n//import java.io.Serializable;\r\n\r\n\r\n\r\n//import org.hipparchus.analysis.polynomials.Polynomial_Function_Lagrange_Form;\r\n\r\n//import org.hipparchus.exception.;\r\n\r\n\r\n\r\n/**\r\n\r\n * Implements the <a href="http://mathworld.wolfram.com/NevillesAlgorithm.html">\r\n\r\n * Neville's Algorithm</a> for interpolation of real univariate functions. For\r\n\r\n * reference, see <b>Introduction to Numerical Analysis</b>, ISBN 038795452X, * chapter 2.\r\n\r\n * <p>\r\n\r\n * The actual code of Neville's algorithm is in Polynomial_Function_Lagrange_Form, * this class provides an easy-to-use interface to it.</p>\r\n\r\n *\r\n\r\n */\r\n\r\nclass Neville_Interpolator : Univariate_Interpolator\r\n\r\n{\r\n\r\n\r\n\r\n    /** serializable version identifier */\r\n\r\n    static const long serial_version_uid = 3003707660147873733L;\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Computes an interpolating function for the data set.\r\n\r\n     *\r\n\r\n     * @param x Interpolating points.\r\n\r\n     * @param y Interpolating values.\r\n\r\n     * @return a function which interpolates the data set\r\n\r\n     * @ if the array lengths are different.\r\n\r\n     * @ if the number of points is less than 2.\r\n\r\n     * @ if two abscissae have the same\r\n\r\n     * value.\r\n\r\n     */\r\n\r\n    //override\r\n\r\n    public Polynomial_Function_Lagrange_Form interpolate(const std::vector<double>& x, const std::vector<double>& y)\r\n\r\n         \r\n\r\n        {\r\n\r\n        return Polynomial_Function_Lagrange_Form(x, y);\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n