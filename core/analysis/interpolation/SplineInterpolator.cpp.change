/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n//package org.hipparchus.analysis.interpolation;\r\n\r\n\r\n\r\n//import java.lang.reflect.Array;\r\n\r\n#include <vector>\r\n\r\n\r\n\r\n//import org.hipparchus.Field;\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n//import org.hipparchus.analysis.polynomials.Field_Polynomial_Function;\r\n\r\n//import org.hipparchus.analysis.polynomials.Field_Polynomial_Spline_Function;\r\n\r\n//import org.hipparchus.analysis.polynomials.Polynomial_Function;\r\n\r\n//import org.hipparchus.analysis.polynomials.Polynomial_Spline_Function;\r\n\r\n//import org.hipparchus.exception.Localized_Core_Formats;\r\n\r\n//import org.hipparchus.exception.;\r\n\r\n//import org.hipparchus.util.Math_Arrays;\r\n\r\n//import org.hipparchus.util.Math_Utils;\r\n\r\n\r\n\r\n/**\r\n\r\n * Computes a natural (also known as "free", "unclamped") cubic spline interpolation for the data set.\r\n\r\n * <p>\r\n\r\n * The {@link #interpolate(std::vector<double>, std::vector<double>)} method returns a {@link Polynomial_Spline_Function}\r\n\r\n * consisting of n cubic polynomials, defined over the subintervals determined by the x values, * {@code x[0] < x[i] ... < x[n].}  The x values are referred to as "knot points."</p>\r\n\r\n * <p>\r\n\r\n * The value of the Polynomial_Spline_Function at a point x that is greater than or equal to the smallest\r\n\r\n * knot point and strictly less than the largest knot point is computed by finding the subinterval to which\r\n\r\n * x belongs and computing the value of the corresponding polynomial at <code>x - x[i] </code> where\r\n\r\n * <code>i</code> is the index of the subinterval.  See {@link Polynomial_Spline_Function} for more details.\r\n\r\n * </p>\r\n\r\n * <p>\r\n\r\n * The interpolating polynomials satisfy: <ol>\r\n\r\n * <li>The value of the Polynomial_Spline_Function at each of the input x values equals the\r\n\r\n *  corresponding y value.</li>\r\n\r\n * <li>Adjacent polynomials are equal through two derivatives at the knot points (i.e., adjacent polynomials\r\n\r\n *  "match up" at the knot points, as do their first and second derivatives).</li>\r\n\r\n * </ol></p>\r\n\r\n * <p>\r\n\r\n * The cubic spline interpolation algorithm implemented is as described in R.L. Burden, J.D. Faires, * <u>Numerical Analysis</u>, 4th Ed., 1989, PWS-Kent, ISBN 0-53491-585-X, pp 126-131.\r\n\r\n * </p>\r\n\r\n *\r\n\r\n */\r\n\r\nclass Spline_Interpolator : Univariate_Interpolator, FieldUnivariate_Interpolator \r\n\r\n{\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Computes an interpolating function for the data set.\r\n\r\n     * @param x the arguments for the interpolation points\r\n\r\n     * @param y the values for the interpolation points\r\n\r\n     * @return a function which interpolates the data set\r\n\r\n     * @ if {@code x} and {@code y}\r\n\r\n     * have different sizes.\r\n\r\n     * @ if {@code x} is not sorted in\r\n\r\n     * strict increasing order.\r\n\r\n     * @ if the size of {@code x} is smaller\r\n\r\n     * than 3.\r\n\r\n     */\r\n\r\n    //override\r\n\r\n    public Polynomial_Spline_Function interpolate(const std::vector<double>& x, const std::vector<double>& y)\r\n\r\n    {\r\n\r\n\r\n\r\n        //Math_Utils::check_not_null(x);\r\n\r\n        //Math_Utils::check_not_null(y);\r\n\r\n        Math_Arrays::check_equal_length(x, y);\r\n\r\n        if (x.size() < 3) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.NUMBER_OF_POINTS, x.size(), 3, true);\r\n\r\n        }\r\n\r\n\r\n\r\n        // Number of intervals.  The number of data points is n + 1.\r\n\r\n        const int n = x.size() - 1;\r\n\r\n\r\n\r\n        Math_Arrays::check_order(x);\r\n\r\n\r\n\r\n        // Differences between knot points\r\n\r\n        const double h[] = std::vector<double>(n];\r\n\r\n        for (int i{}; i < n; i++) \r\n\r\n        {\r\n\r\n            h[i] = x[i + 1] - x[i];\r\n\r\n        }\r\n\r\n\r\n\r\n        const double mu[] = std::vector<double>(n];\r\n\r\n        const double z[] = std::vector<double>(n + 1];\r\n\r\n        mu[0] = 0d;\r\n\r\n        z[0] = 0d;\r\n\r\n        double g;\r\n\r\n        for (int i{ 1 }; i < n; i++) \r\n\r\n        {\r\n\r\n            g = 2d * (x[i+1]  - x[i - 1]) - h[i - 1] * mu[i -1];\r\n\r\n            mu[i] = h[i] / g;\r\n\r\n            z[i] = (3d * (y[i + 1] * h[i - 1] - y[i] * (x[i + 1] - x[i - 1])+ y[i - 1] * h[i]) /\r\n\r\n                    (h[i - 1] * h[i]) - h[i - 1] * z[i - 1]) / g;\r\n\r\n        }\r\n\r\n\r\n\r\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\r\n\r\n        const std::vector<double>& b = std::vector<double>(n];\r\n\r\n        const double c[] = std::vector<double>(n + 1];\r\n\r\n        const double d[] = std::vector<double>(n];\r\n\r\n\r\n\r\n        z[n] = 0d;\r\n\r\n        c[n] = 0d;\r\n\r\n\r\n\r\n        for (int j = n -1; j >=0; j--) \r\n\r\n        {\r\n\r\n            c[j] = z[j] - mu[j] * c[j + 1];\r\n\r\n            b[j] = (y[j + 1] - y[j]) / h[j] - h[j] * (c[j + 1] + 2d * c[j]) / 3d;\r\n\r\n            d[j] = (c[j + 1] - c[j]) / (3d * h[j]);\r\n\r\n        }\r\n\r\n\r\n\r\n        const Polynomial_Function polynomials[] = Polynomial_Function[n];\r\n\r\n        const double coefficients[] = std::vector<double>(4];\r\n\r\n        for (int i{}; i < n; i++) \r\n\r\n        {\r\n\r\n            coefficients[0] = y[i];\r\n\r\n            coefficients[1] = b[i];\r\n\r\n            coefficients[2] = c[i];\r\n\r\n            coefficients[3] = d[i];\r\n\r\n            polynomials[i] = Polynomial_Function(coefficients);\r\n\r\n        }\r\n\r\n\r\n\r\n        return Polynomial_Spline_Function(x, polynomials);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Computes an interpolating function for the data set.\r\n\r\n     * @param x the arguments for the interpolation points\r\n\r\n     * @param y the values for the interpolation points\r\n\r\n     * @param <T> the type of the field elements\r\n\r\n     * @return a function which interpolates the data set\r\n\r\n     * @ if {@code x} and {@code y}\r\n\r\n     * have different sizes.\r\n\r\n     * @ if {@code x} is not sorted in\r\n\r\n     * strict increasing order.\r\n\r\n     * @ if the size of {@code x} is smaller\r\n\r\n     * than 3.\r\n\r\n     * @since 1.5\r\n\r\n     */\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n    public  Field_Polynomial_Spline_Function<T> interpolate(T x[], T y[])\r\n\r\n    {\r\n\r\n        //Math_Utils::check_not_null(x);\r\n\r\n        //Math_Utils::check_not_null(y);\r\n\r\n        Math_Arrays::check_equal_length(x, y);\r\n\r\n        if (x.size() < 3) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.NUMBER_OF_POINTS, x.size(), 3, true);\r\n\r\n        }\r\n\r\n\r\n\r\n        // Number of intervals.  The number of data points is n + 1.\r\n\r\n        const int n = x.size() - 1;\r\n\r\n\r\n\r\n        Math_Arrays::check_order(x);\r\n\r\n\r\n\r\n        // Differences between knot points\r\n\r\n        const Field<T> field = x[0].get_field();\r\n\r\n        const T h[] = Math_Arrays::build_array(field, n);\r\n\r\n        for (int i{}; i < n; i++) \r\n\r\n        {\r\n\r\n            h[i] = x[i + 1].subtract(x[i]);\r\n\r\n        }\r\n\r\n\r\n\r\n        const T mu[] = Math_Arrays::build_array(field, n);\r\n\r\n        const T z[]  = Math_Arrays::build_array(field, n + 1);\r\n\r\n        mu[0] = field.get_zero();\r\n\r\n        z[0]  = field.get_zero();\r\n\r\n        for (int i{ 1 }; i < n; i++) \r\n\r\n        {\r\n\r\n            const T g = x[i+1].subtract(x[i - 1]).multiply(2).subtract(h[i - 1].multiply(mu[i -1]));\r\n\r\n            mu[i] = h[i].divide(g);\r\n\r\n            z[i] =          y[i + 1].multiply(h[i - 1]).\r\n\r\n                   subtract(y[i].multiply(x[i + 1].subtract(x[i - 1]))).\r\n\r\n                        add(y[i - 1].multiply(h[i])).\r\n\r\n                   multiply(3).\r\n\r\n                   divide(h[i - 1].multiply(h[i])).\r\n\r\n                   subtract(h[i - 1].multiply(z[i - 1])).\r\n\r\n                   divide(g);\r\n\r\n        }\r\n\r\n\r\n\r\n        // cubic spline coefficients --  b is linear, c quadratic, d is cubic (original y's are constants)\r\n\r\n        const T& b[] = Math_Arrays::build_array(field, n);\r\n\r\n        const T c[] = Math_Arrays::build_array(field, n + 1);\r\n\r\n        const T d[] = Math_Arrays::build_array(field, n);\r\n\r\n\r\n\r\n        z[n] = field.get_zero();\r\n\r\n        c[n] = field.get_zero();\r\n\r\n\r\n\r\n        for (int j = n -1; j >=0; j--) \r\n\r\n        {\r\n\r\n            c[j] = z[j].subtract(mu[j].multiply(c[j + 1]));\r\n\r\n            b[j] = y[j + 1].subtract(y[j]).divide(h[j]).\r\n\r\n                   subtract(h[j].multiply(c[j + 1].add(c[j]).add(c[j])).divide(3));\r\n\r\n            d[j] = c[j + 1].subtract(c[j]).divide(h[j].multiply(3));\r\n\r\n        }\r\n\r\n\r\n\r\n        //@Suppress_Warnings("unchecked")\r\n\r\n        const Field_Polynomial_Function<T> polynomials[] =\r\n\r\n                        (Field_Polynomial_Function<T>[]) Array.new_instance(Field_Polynomial_Function.class, n);\r\n\r\n        const T coefficients[] = Math_Arrays::build_array(field, 4);\r\n\r\n        for (int i{}; i < n; i++) \r\n\r\n        {\r\n\r\n            coefficients[0] = y[i];\r\n\r\n            coefficients[1] = b[i];\r\n\r\n            coefficients[2] = c[i];\r\n\r\n            coefficients[3] = d[i];\r\n\r\n            polynomials[i] = Field_Polynomial_Function<>(coefficients);\r\n\r\n        }\r\n\r\n\r\n\r\n        return Field_Polynomial_Spline_Function<>(x, polynomials);\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n