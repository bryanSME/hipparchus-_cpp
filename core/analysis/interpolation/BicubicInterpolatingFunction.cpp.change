/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n//package org.hipparchus.analysis.interpolation;\r\n\r\n\r\n\r\n//import java.util.Arrays;\r\n\r\n\r\n\r\n//import org.hipparchus.analysis.Bivariate_Function;\r\n\r\n//import org.hipparchus.exception.Localized_Core_Formats;\r\n\r\n//import org.hipparchus.exception.;\r\n\r\n//import org.hipparchus.util.Math_Arrays;\r\n\r\n//import org.hipparchus.util.Math_Utils;\r\n\r\n\r\n\r\n/**\r\n\r\n * Function that : the\r\n\r\n * <a href="http://en.wikipedia.org/wiki/Bicubic_interpolation">\r\n\r\n * bicubic spline interpolation</a>.\r\n\r\n *\r\n\r\n */\r\n\r\nclass Bicubic_Interpolating_Function\r\n\r\n    : Bivariate_Function \r\n\r\n    {\r\n\r\n    /** Number of coefficients. */\r\n\r\n    private static const int NUM_COEFF = 16;\r\n\r\n    /**\r\n\r\n     * Matrix to compute the spline coefficients from the function values\r\n\r\n     * and function derivatives values\r\n\r\n     */\r\n\r\n    private static const std::vector<std::vector<double>> AINV = \r\n\r\n    {\r\n\r\n        { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }, { 0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0 }, { -3,3,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0 }, { 2,-2,0,0,1,1,0,0,0,0,0,0,0,0,0,0 }, { 0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0 }, { 0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0 }, { 0,0,0,0,0,0,0,0,-3,3,0,0,-2,-1,0,0 }, { 0,0,0,0,0,0,0,0,2,-2,0,0,1,1,0,0 }, { -3,0,3,0,0,0,0,0,-2,0,-1,0,0,0,0,0 }, { 0,0,0,0,-3,0,3,0,0,0,0,0,-2,0,-1,0 }, { 9,-9,-9,9,6,3,-6,-3,6,-6,3,-3,4,2,2,1 }, { -6,6,6,-6,-3,-3,3,3,-4,4,-2,2,-2,-2,-1,-1 }, { 2,0,-2,0,0,0,0,0,1,0,1,0,0,0,0,0 }, { 0,0,0,0,2,0,-2,0,0,0,0,0,1,0,1,0 }, { -6,6,6,-6,-4,-2,4,2,-3,3,-3,3,-2,-1,-2,-1 }, { 4,-4,-4,4,2,2,-2,-2,2,-2,2,-2,1,1,1,1 }\r\n\r\n    };\r\n\r\n\r\n\r\n    /** Samples x-coordinates */\r\n\r\n    private const std::vector<double> xval;\r\n\r\n    /** Samples y-coordinates */\r\n\r\n    private const std::vector<double> yval;\r\n\r\n    /** Set of cubic splines patching the whole data grid */\r\n\r\n    private const Bicubic_Function[][] splines;\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @param x Sample values of the x-coordinate, in increasing order.\r\n\r\n     * @param y Sample values of the y-coordinate, in increasing order.\r\n\r\n     * @param f Values of the function on every grid point.\r\n\r\n     * @param dFdX Values of the partial derivative of function with respect\r\n\r\n     * to x on every grid point.\r\n\r\n     * @param d_fd_y Values of the partial derivative of function with respect\r\n\r\n     * to y on every grid point.\r\n\r\n     * @param d2FdXdY Values of the cross partial derivative of function on\r\n\r\n     * every grid point.\r\n\r\n     * @ if the various arrays do not contain\r\n\r\n     * the expected number of elements.\r\n\r\n     * @ if {@code x} or {@code y} are\r\n\r\n     * not strictly increasing.\r\n\r\n     * @ if any of the arrays has zero length.\r\n\r\n     */\r\n\r\n    public Bicubic_Interpolating_Function(std::vector<double> x, std::vector<double> y, std::vector<std::vector<double>> f, std::vector<std::vector<double>> dFdX, std::vector<std::vector<double>> d_fd_y, std::vector<std::vector<double>> d2FdXdY)\r\n\r\n         \r\n\r\n        {\r\n\r\n        const int x_len = x.size();\r\n\r\n        const int y_len = y.size();\r\n\r\n\r\n\r\n        if (x_len == 0 || y_len == 0 || f.size() == 0 || f[0].size() == 0) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.NO_DATA);\r\n\r\n        }\r\n\r\n        Math_Utils::check_dimension(x_len, f.size());\r\n\r\n        Math_Utils::check_dimension(x_len, dFdX.size());\r\n\r\n        Math_Utils::check_dimension(x_len, d_fd_y.size());\r\n\r\n        Math_Utils::check_dimension(x_len, d2FdXdY.size());\r\n\r\n        Math_Arrays::check_order(x);\r\n\r\n        Math_Arrays::check_order(y);\r\n\r\n\r\n\r\n        xval = x.clone();\r\n\r\n        yval = y.clone();\r\n\r\n\r\n\r\n        const int last_i = x_len - 1;\r\n\r\n        const int last_j = y_len - 1;\r\n\r\n        splines = Bicubic_Function[last_i][last_j];\r\n\r\n\r\n\r\n        for (int i{}; i < last_i; i++) \r\n\r\n        {\r\n\r\n            Math_Utils::check_dimension(f[i].size(), y_len);\r\n\r\n            Math_Utils::check_dimension(dFdX[i].size(), y_len);\r\n\r\n            Math_Utils::check_dimension(d_fd_y[i].size(), y_len);\r\n\r\n            Math_Utils::check_dimension(d2FdXdY[i].size(), y_len);\r\n\r\n\r\n\r\n            const int ip1 = i + 1;\r\n\r\n            const double x_r = xval[ip1] - xval[i];\r\n\r\n            for (int j{}; j < last_j; j++) \r\n\r\n            {\r\n\r\n                const int jp1 = j + 1;\r\n\r\n                const double y_r = yval[jp1] - yval[j];\r\n\r\n                const double x_ry_r = x_r * y_r;\r\n\r\n                const auto beta = std::vector<double>\r\n\r\n                {\r\n\r\n                    f[i][j], f[ip1][j], f[i][jp1], f[ip1][jp1], dFdX[i][j] * x_r, dFdX[ip1][j] * x_r, dFdX[i][jp1] * x_r, dFdX[ip1][jp1] * x_r, d_fd_y[i][j] * y_r, d_fd_y[ip1][j] * y_r, d_fd_y[i][jp1] * y_r, d_fd_y[ip1][jp1] * y_r, d2FdXdY[i][j] * x_ry_r, d2FdXdY[ip1][j] * x_ry_r, d2FdXdY[i][jp1] * x_ry_r, d2FdXdY[ip1][jp1] * x_ry_r\r\n\r\n                };\r\n\r\n\r\n\r\n                splines[i][j] = Bicubic_Function(compute_spline_coefficients(beta));\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * {@inherit_doc}\r\n\r\n     */\r\n\r\n    //override\r\n\r\n    public double value(const double& x, double y)\r\n\r\n         \r\n\r\n        {\r\n\r\n        const int i = search_index(x, xval);\r\n\r\n        const int j = search_index(y, yval);\r\n\r\n\r\n\r\n        const double xN = (x - xval[i]) / (xval[i + 1] - xval[i]);\r\n\r\n        const double yN = (y - yval[j]) / (yval[j + 1] - yval[j]);\r\n\r\n\r\n\r\n        return splines[i][j].value(xN, yN);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Indicates whether a point is within the interpolation range.\r\n\r\n     *\r\n\r\n     * @param x First coordinate.\r\n\r\n     * @param y Second coordinate.\r\n\r\n     * @return {@code true} if (x, y) is a valid point.\r\n\r\n     */\r\n\r\n    public bool is_valid_point(const double& x, double y) \r\n\r\n    {\r\n\r\n        if (x < xval[0] ||\r\n\r\n            x > xval[xval.size() - 1] ||\r\n\r\n            y < yval[0] ||\r\n\r\n            y > yval[yval.size() - 1]) \r\n\r\n            {\r\n\r\n            return false;\r\n\r\n        }\r\n\r\nelse \r\n\r\n        {\r\n\r\n            return true;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @param c Coordinate.\r\n\r\n     * @param val Coordinate samples.\r\n\r\n     * @return the index in {@code val} corresponding to the interval\r\n\r\n     * containing {@code c}.\r\n\r\n     * @ if {@code c} is out of the\r\n\r\n     * range defined by the boundary values of {@code val}.\r\n\r\n     */\r\n\r\n    private int search_index(cosnt double& c, const std::vector<double>& val) \r\n\r\n    {\r\n\r\n        const int r = Arrays.binary_search(val, c);\r\n\r\n\r\n\r\n        if (r == -1 ||\r\n\r\n            r == -val.size() - 1) \r\n\r\n            {\r\n\r\n            throw (Localized_Core_Formats.OUT_OF_RANGE_SIMPLE, c, val[0], val[val.size() - 1]);\r\n\r\n        }\r\n\r\n\r\n\r\n        if (r < 0) \r\n\r\n        {\r\n\r\n            // "c" in within an interpolation sub-interval: Return the\r\n\r\n            // index of the sample at the lower end of the sub-interval.\r\n\r\n            return -r - 2;\r\n\r\n        }\r\n\r\n        const int last = val.size() - 1;\r\n\r\n        if (r == last) \r\n\r\n        {\r\n\r\n            // "c" is the last sample of the range: Return the index\r\n\r\n            // of the sample at the lower end of the last sub-interval.\r\n\r\n            return last - 1;\r\n\r\n        }\r\n\r\n\r\n\r\n        // "c" is another sample point.\r\n\r\n        return r;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Compute the spline coefficients from the list of function values and\r\n\r\n     * function partial derivatives values at the four corners of a grid\r\n\r\n     * element. They must be specified in the following order:\r\n\r\n     * <ul>\r\n\r\n     *  <li>f(0,0)</li>\r\n\r\n     *  <li>f(1,0)</li>\r\n\r\n     *  <li>f(0,1)</li>\r\n\r\n     *  <li>f(1,1)</li>\r\n\r\n     *  <li>f<sub>x</sub>(0,0)</li>\r\n\r\n     *  <li>f<sub>x</sub>(1,0)</li>\r\n\r\n     *  <li>f<sub>x</sub>(0,1)</li>\r\n\r\n     *  <li>f<sub>x</sub>(1,1)</li>\r\n\r\n     *  <li>f<sub>y</sub>(0,0)</li>\r\n\r\n     *  <li>f<sub>y</sub>(1,0)</li>\r\n\r\n     *  <li>f<sub>y</sub>(0,1)</li>\r\n\r\n     *  <li>f<sub>y</sub>(1,1)</li>\r\n\r\n     *  <li>f<sub>xy</sub>(0,0)</li>\r\n\r\n     *  <li>f<sub>xy</sub>(1,0)</li>\r\n\r\n     *  <li>f<sub>xy</sub>(0,1)</li>\r\n\r\n     *  <li>f<sub>xy</sub>(1,1)</li>\r\n\r\n     * </ul>\r\n\r\n     * where the subscripts indicate the partial derivative with respect to\r\n\r\n     * the corresponding variable(s).\r\n\r\n     *\r\n\r\n     * @param beta List of function values and function partial derivatives\r\n\r\n     * values.\r\n\r\n     * @return the spline coefficients.\r\n\r\n     */\r\n\r\n    private std::vector<double> compute_spline_coefficients(const std::vector<double>& beta) \r\n\r\n    {\r\n\r\n        const std::vector<double> a = std::vector<double>(NUM_COEFF];\r\n\r\n\r\n\r\n        for (int i{}; i < NUM_COEFF; i++) \r\n\r\n        {\r\n\r\n            double result{};\r\n\r\n            const std::vector<double> row = AINV[i];\r\n\r\n            for (int j{}; j < NUM_COEFF; j++) \r\n\r\n            {\r\n\r\n                result += row[j] * beta[j];\r\n\r\n            }\r\n\r\n            a[i] = result;\r\n\r\n        }\r\n\r\n\r\n\r\n        return a;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n\r\n * Bicubic function.\r\n\r\n */\r\n\r\nclass Bicubic_Function : Bivariate_Function \r\n\r\n{\r\n\r\n    /** Number of points. */\r\n\r\n    private static const short N = 4;\r\n\r\n    /** Coefficients */\r\n\r\n    private const std::vector<std::vector<double>> a;\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Simple constructor.\r\n\r\n     *\r\n\r\n     * @param coeff Spline coefficients.\r\n\r\n     */\r\n\r\n    Bicubic_Function(std::vector<double> coeff) \r\n\r\n    {\r\n\r\n        a = std::vector<double>(N][N];\r\n\r\n        for (int j{}; j < N; j++) \r\n\r\n        {\r\n\r\n            const std::vector<double> aJ = a[j];\r\n\r\n            for (int i{}; i < N; i++) \r\n\r\n            {\r\n\r\n                aJ[i] = coeff[i * N + j];\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * {@inherit_doc}\r\n\r\n     */\r\n\r\n    //override\r\n\r\n    public double value(const double& x, double y) \r\n\r\n    {\r\n\r\n        Math_Utils::check_range_inclusive(x, 0, 1);\r\n\r\n        Math_Utils::check_range_inclusive(y, 0, 1);\r\n\r\n\r\n\r\n        const double x2 = x * x;\r\n\r\n        const double x3 = x2 * x;\r\n\r\n        const std::vector<double> pX = {1, x, x2, x3};\r\n\r\n\r\n\r\n        const double y2 = y * y;\r\n\r\n        const double y3 = y2 * y;\r\n\r\n        const std::vector<double> pY = {1, y, y2, y3};\r\n\r\n\r\n\r\n        return apply(pX, pY, a);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Compute the value of the bicubic polynomial.\r\n\r\n     *\r\n\r\n     * @param pX Powers of the x-coordinate.\r\n\r\n     * @param pY Powers of the y-coordinate.\r\n\r\n     * @param coeff Spline coefficients.\r\n\r\n     * @return the interpolated value.\r\n\r\n     */\r\n\r\n    private double apply(std::vector<double> pX, std::vector<double> pY, std::vector<std::vector<double>> coeff) \r\n\r\n    {\r\n\r\n        double result{};\r\n\r\n        for (int i{}; i < N; i++) \r\n\r\n        {\r\n\r\n            const double r = Math_Arrays::linear_combination(coeff[i], pY);\r\n\r\n            result += r * pX[i];\r\n\r\n        }\r\n\r\n\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n