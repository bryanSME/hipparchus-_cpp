/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n//package org.hipparchus.analysis.interpolation;\r\n\r\n\r\n\r\n//import java.util.Array_list;\r\n\r\n//import java.util.List;\r\n\r\n\r\n\r\n//import org.hipparchus.Field_Element;\r\n\r\n//import org.hipparchus.exception.Localized_Core_Formats;\r\n\r\n//import org.hipparchus.exception.;\r\n\r\n//import org.hipparchus.exception.Math_Runtime_Exception;\r\n\r\n//import org.hipparchus.exception.Null_Argument_Exception;\r\n\r\n//import org.hipparchus.util.Math_Arrays;\r\n\r\n//import org.hipparchus.util.Math_Utils;\r\n\r\n\r\n\r\n/** Polynomial interpolator using both sample values and sample derivatives.\r\n\r\n * <p>\r\n\r\n * The interpolation polynomials match all sample points, including both values\r\n\r\n * and provided derivatives. There is one polynomial for each component of\r\n\r\n * the values vector. All polynomials have the same degree. The degree of the\r\n\r\n * polynomials depends on the number of points and number of derivatives at each\r\n\r\n * point. For example the interpolation polynomials for n sample points without\r\n\r\n * any derivatives all have degree n-1. The interpolation polynomials for n\r\n\r\n * sample points with the two extreme points having value and first derivative\r\n\r\n * and the remaining points having value only all have degree n+1. The\r\n\r\n * interpolation polynomial for n sample points with value, first and second\r\n\r\n * derivative for all points all have degree 3n-1.\r\n\r\n * </p>\r\n\r\n *\r\n\r\n * @param <T> Type of the field elements.\r\n\r\n *\r\n\r\n */\r\n\r\nclass Field_Hermite_Interpolator<T extends Field_Element<T>> \r\n\r\n{\r\n\r\n\r\n\r\n    /** Sample abscissae. */\r\n\r\n    private const List<T> abscissae;\r\n\r\n\r\n\r\n    /** Top diagonal of the divided differences array. */\r\n\r\n    private const List<std::vector<T>> top_diagonal;\r\n\r\n\r\n\r\n    /** Bottom diagonal of the divided differences array. */\r\n\r\n    private const List<std::vector<T>> bottom_diagonal;\r\n\r\n\r\n\r\n    /** Create an empty interpolator.\r\n\r\n     */\r\n\r\n    public Field_Hermite_Interpolator() \r\n\r\n    {\r\n\r\n        this.abscissae      = Array_list<>();\r\n\r\n        this.top_diagonal    = Array_list<>();\r\n\r\n        this.bottom_diagonal = Array_list<>();\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Add a sample point.\r\n\r\n     * <p>\r\n\r\n     * This method must be called once for each sample point. It is allowed to\r\n\r\n     * mix some calls with values only with calls with values and first\r\n\r\n     * derivatives.\r\n\r\n     * </p>\r\n\r\n     * <p>\r\n\r\n     * The point abscissae for all calls <em>must</em> be different.\r\n\r\n     * </p>\r\n\r\n     * @param x abscissa of the sample point\r\n\r\n     * @param value value and derivatives of the sample point\r\n\r\n     * (if only one row is passed, it is the value, if two rows are\r\n\r\n     * passed the first one is the value and the second the derivative\r\n\r\n     * and so on)\r\n\r\n     * @exception  if the abscissa difference between added point\r\n\r\n     * and a previous point is zero (i.e. the two points are at same abscissa)\r\n\r\n     * @exception Math_Runtime_Exception if the number of derivatives is larger\r\n\r\n     * than 20, which prevents computation of a factorial\r\n\r\n     * @ if derivative structures are inconsistent\r\n\r\n     * @Null_Argument_Exception if x is null\r\n\r\n     */\r\n\r\n    //@Safe_Varargs\r\n\r\n    public const void add_sample_point(const T& x, const std::vector<T> ... value)\r\n\r\n    {\r\n\r\n\r\n\r\n        //Math_Utils::check_not_null(x);\r\n\r\n        T factorial = x.get_field().get_one();\r\n\r\n        for (int i{}; i < value.size(); ++i) \r\n\r\n        {\r\n\r\n\r\n\r\n            const std::vector<T> y = value[i].clone();\r\n\r\n            if (i > 1) \r\n\r\n            {\r\n\r\n                factorial = factorial.multiply(i);\r\n\r\n                const T inv = factorial.reciprocal();\r\n\r\n                for (int j{}; j < y.size(); ++j) \r\n\r\n                {\r\n\r\n                    y[j] = y[j].multiply(inv);\r\n\r\n                }\r\n\r\n            }\r\n\r\n\r\n\r\n            // update the bottom diagonal of the divided differences array\r\n\r\n            const int n = abscissae.size();\r\n\r\n            bottom_diagonal.add(n - i, y);\r\n\r\n            std::vector<T> bottom0 = y;\r\n\r\n            for (int j = i; j < n; ++j) \r\n\r\n            {\r\n\r\n                const std::vector<T> bottom1 = bottom_diagonal.get(n - (j + 1));\r\n\r\n                if (x.equals(abscissae.get(n - (j + 1)))) \r\n\r\n                {\r\n\r\n                    throw (Localized_Core_Formats.DUPLICATED_ABSCISSA_DIVISION_BY_ZERO, x);\r\n\r\n                }\r\n\r\n                const T inv = x.subtract(abscissae.get(n - (j + 1))).reciprocal();\r\n\r\n                for (int k{}; k < y.size(); ++k) \r\n\r\n                {\r\n\r\n                    bottom1[k] = inv.multiply(bottom0[k].subtract(bottom1[k]));\r\n\r\n                }\r\n\r\n                bottom0 = bottom1;\r\n\r\n            }\r\n\r\n\r\n\r\n            // update the top diagonal of the divided differences array\r\n\r\n            top_diagonal.add(bottom0.clone());\r\n\r\n\r\n\r\n            // update the abscissae array\r\n\r\n            abscissae.add(x);\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Interpolate value at a specified abscissa.\r\n\r\n     * @param x interpolation abscissa\r\n\r\n     * @return interpolated value\r\n\r\n     * @exception  if sample is empty\r\n\r\n     * @Null_Argument_Exception if x is null\r\n\r\n     */\r\n\r\n    public std::vector<T> value(T x) , Null_Argument_Exception \r\n\r\n    {\r\n\r\n        // safety check\r\n\r\n        //Math_Utils::check_not_null(x);\r\n\r\n        if (abscissae.is_empty()) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.EMPTY_INTERPOLATION_SAMPLE);\r\n\r\n        }\r\n\r\n\r\n\r\n        const std::vector<T> value = Math_Arrays::build_array(x.get_field(), top_diagonal.get(0).size());\r\n\r\n        T value_coeff = x.get_field().get_one();\r\n\r\n        for (int i{}; i < top_diagonal.size(); ++i) \r\n\r\n        {\r\n\r\n            std::vector<T> divided_difference = top_diagonal.get(i);\r\n\r\n            for (int k{}; k < value.size(); ++k) \r\n\r\n            {\r\n\r\n                value[k] = value[k].add(divided_difference[k].multiply(value_coeff));\r\n\r\n            }\r\n\r\n            const T delta_x = x.subtract(abscissae.get(i));\r\n\r\n            value_coeff = value_coeff.multiply(delta_x);\r\n\r\n        }\r\n\r\n\r\n\r\n        return value;\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Interpolate value and first derivatives at a specified abscissa.\r\n\r\n     * @param x interpolation abscissa\r\n\r\n     * @param order maximum derivation order\r\n\r\n     * @return interpolated value and derivatives (value in row 0, * 1<sup>st</sup> derivative in row 1, ... n<sup>th</sup> derivative in row n)\r\n\r\n     * @exception  if sample is empty\r\n\r\n     * @Null_Argument_Exception if x is null\r\n\r\n     */\r\n\r\n    public std::vector<std::vector<T>> derivatives(T x, int order) , Null_Argument_Exception \r\n\r\n    {\r\n\r\n        // safety check\r\n\r\n        //Math_Utils::check_not_null(x);\r\n\r\n        if (abscissae.is_empty()) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.EMPTY_INTERPOLATION_SAMPLE);\r\n\r\n        }\r\n\r\n\r\n\r\n        const T zero = x.get_field().get_zero();\r\n\r\n        const T one  = x.get_field().get_one();\r\n\r\n        const std::vector<T> tj = Math_Arrays::build_array(x.get_field(), order + 1);\r\n\r\n        tj[0] = zero;\r\n\r\n        for (int i{}; i < order; ++i) \r\n\r\n        {\r\n\r\n            tj[i + 1] = tj[i].add(one);\r\n\r\n        }\r\n\r\n\r\n\r\n        const std::vector<std::vector<T>> derivatives =\r\n\r\n                Math_Arrays::build_array(x.get_field(), order + 1, top_diagonal.get(0).size());\r\n\r\n        const std::vector<T> value_coeff = Math_Arrays::build_array(x.get_field(), order + 1);\r\n\r\n        value_coeff[0] = x.get_field().get_one();\r\n\r\n        for (int i{}; i < top_diagonal.size(); ++i) \r\n\r\n        {\r\n\r\n            std::vector<T> divided_difference = top_diagonal.get(i);\r\n\r\n            const T delta_x = x.subtract(abscissae.get(i));\r\n\r\n            for (int j = order; j >= 0; --j) \r\n\r\n            {\r\n\r\n                for (int k{}; k < derivatives[j].size(); ++k) \r\n\r\n                {\r\n\r\n                    derivatives[j][k] =\r\n\r\n                            derivatives[j][k].add(divided_difference[k].multiply(value_coeff[j]));\r\n\r\n                }\r\n\r\n                value_coeff[j] = value_coeff[j].multiply(delta_x);\r\n\r\n                if (j > 0) \r\n\r\n                {\r\n\r\n                    value_coeff[j] = value_coeff[j].add(tj[j].multiply(value_coeff[j - 1]));\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        return derivatives;\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n