/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n//package org.hipparchus.analysis.interpolation;\r\n\r\n\r\n\r\n//import org.hipparchus.util.FastMath;\r\n\r\n//import org.hipparchus.util.Math_Utils;\r\n\r\n//import org.hipparchus.util.Sin_Cos;\r\n\r\n\r\n\r\n/**\r\n\r\n * Utility class for the {@link Microsphere_Projection_Interpolator} algorithm.\r\n\r\n * For 2D interpolation, this class constructs the microsphere as a series of\r\n\r\n * evenly spaced facets (rather than generating random normals as in the\r\n\r\n * base implementation).\r\n\r\n *\r\n\r\n */\r\n\r\nclass Interpolating_Microsphere2D extends Interpolating_Microsphere \r\n\r\n{\r\n\r\n    /** Space dimension. */\r\n\r\n    private static const int DIMENSION = 2;\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Create a sphere from vectors regularly sampled around a circle.\r\n\r\n     *\r\n\r\n     * @param size Number of surface elements of the sphere.\r\n\r\n     * @param max_dark_fraction Maximum fraction of the facets that can be dark.\r\n\r\n     * If the fraction of "non-illuminated" facets is larger, no estimation\r\n\r\n     * of the value will be performed, and the {@code background} value will\r\n\r\n     * be returned instead.\r\n\r\n     * @param dark_threshold Value of the illumination below which a facet is\r\n\r\n     * considered dark.\r\n\r\n     * @param background Value returned when the {@code max_dark_fraction}\r\n\r\n     * threshold is exceeded.\r\n\r\n     * @org.hipparchus.exception.\r\n\r\n     * if {@code size <= 0}.\r\n\r\n     * @org.hipparchus.exception. if\r\n\r\n     * {@code dark_threshold < 0}.\r\n\r\n     * @org.hipparchus.exception. if\r\n\r\n     * {@code max_dark_fraction} does not belong to the interval {@code [0, 1]}.\r\n\r\n     */\r\n\r\n    public Interpolating_Microsphere2D(const int& size, double max_dark_fraction, double dark_threshold, double background) \r\n\r\n    {\r\n\r\n        super(DIMENSION, size, max_dark_fraction, dark_threshold, background);\r\n\r\n\r\n\r\n        // Generate the microsphere normals.\r\n\r\n        for (int i{}; i < size; i++) \r\n\r\n        {\r\n\r\n            const double& angle   = i * Math_Utils::TWO_PI / size;\r\n\r\n            const Sin_Cos sc_angle = Sin_Cos(angle);\r\n\r\n\r\n\r\n            add(std::vector<double> { sc_angle.cos(), sc_angle.sin() }, false);\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Copy constructor.\r\n\r\n     *\r\n\r\n     * @param other Instance to copy.\r\n\r\n     */\r\n\r\n    protected Interpolating_Microsphere2D(Interpolating_Microsphere2D other) \r\n\r\n    {\r\n\r\n        super(other);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Perform a copy.\r\n\r\n     *\r\n\r\n     * @return a copy of this instance.\r\n\r\n     */\r\n\r\n    //override\r\n\r\n    public Interpolating_Microsphere2D copy() \r\n\r\n    {\r\n\r\n        return Interpolating_Microsphere2D(this);\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n