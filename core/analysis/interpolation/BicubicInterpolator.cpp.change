/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n//package org.hipparchus.analysis.interpolation;\r\n\r\n\r\n\r\n//import org.hipparchus.exception.Localized_Core_Formats;\r\n\r\n//import org.hipparchus.exception.;\r\n\r\n//import org.hipparchus.util.Math_Arrays;\r\n\r\n//import org.hipparchus.util.Math_Utils;\r\n\r\n#include <vector>\r\n\r\n\r\n\r\n/**\r\n\r\n * Generates a {@link Bicubic_Interpolating_Function bicubic interpolating\r\n\r\n * function}.\r\n\r\n * <p>\r\n\r\n *  Caveat: Because the interpolation scheme requires that derivatives be\r\n\r\n *  specified at the sample points, those are approximated with finite\r\n\r\n *  differences (using the 2-points symmetric formulae).\r\n\r\n *  sin_ce their values are undefined at the borders of the provided\r\n\r\n *  interpolation ranges, the interpolated values will be wrong at the\r\n\r\n *  edges of the patch.\r\n\r\n *  The {@code interpolate} method will return a function that overrides\r\n\r\n *  {@link Bicubic_Interpolating_Function#is_valid_point(double,double)} to\r\n\r\n *  indicate points where the interpolation will be inaccurate.\r\n\r\n * </p>\r\n\r\n *\r\n\r\n */\r\n\r\nclass Bicubic_Interpolator : public Bivariate_Grid_Interpolator \r\n\r\n{\r\n\r\n    /**\r\n\r\n     * {@inherit_doc}\r\n\r\n     */\r\n\r\n    //override\r\n\r\n    public Bicubic_Interpolating_Function interpolate(const std::vector<double>& xval, const std::vector<double>& yval, const std::vector<std::vector<double>> fval)\r\n\r\n         \r\n\r\n        {\r\n\r\n        if (xval.size() == 0 || yval.size() == 0 || fval.size() == 0) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.NO_DATA);\r\n\r\n        }\r\n\r\n        Math_Utils::check_dimension(xval.size(), fval.size());\r\n\r\n        Math_Arrays::check_order(xval);\r\n\r\n        Math_Arrays::check_order(yval);\r\n\r\n\r\n\r\n        const int x_len = xval.size();\r\n\r\n        const int y_len = yval.size();\r\n\r\n\r\n\r\n        // Approximation to the partial derivatives using finite differences.\r\n\r\n        const std::vector<std::vector<double>> dFdX = std::vector<double>(x_len][y_len];\r\n\r\n        const std::vector<std::vector<double>> d_fd_y = std::vector<double>(x_len][y_len];\r\n\r\n        const std::vector<std::vector<double>> d2FdXdY = std::vector<double>(x_len][y_len];\r\n\r\n        for (int i{ 1 }; i < x_len - 1; i++) \r\n\r\n        {\r\n\r\n            const int& nI = i + 1;\r\n\r\n            const int pI = i - 1;\r\n\r\n\r\n\r\n            const double nX = xval[nI];\r\n\r\n            const double pX = xval[pI];\r\n\r\n\r\n\r\n            const double delta_x = nX - pX;\r\n\r\n\r\n\r\n            for (int j{ 1 }; j < y_len - 1; j++) \r\n\r\n            {\r\n\r\n                const int& nJ = j + 1;\r\n\r\n                const int pJ = j - 1;\r\n\r\n\r\n\r\n                const double nY = yval[nJ];\r\n\r\n                const double pY = yval[pJ];\r\n\r\n\r\n\r\n                const double delta_y = nY - pY;\r\n\r\n\r\n\r\n                dFdX[i][j] = (fval[nI][j] - fval[pI][j]) / delta_x;\r\n\r\n                d_fd_y[i][j] = (fval[i][nJ] - fval[i][pJ]) / delta_y;\r\n\r\n\r\n\r\n                const double delta_x_y = delta_x * delta_y;\r\n\r\n\r\n\r\n                d2FdXdY[i][j] = (fval[nI][nJ] - fval[nI][pJ] - fval[pI][nJ] + fval[pI][pJ]) / delta_x_y;\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        // Create the interpolating function.\r\n\r\n        return Bicubic_Interpolating_Function(xval, yval, fval, dFdX, d_fd_y, d2FdXdY) \r\n\r\n        {\r\n\r\n            /** {@inherit_doc} */\r\n\r\n            //override\r\n\r\n            public bool is_valid_point(const double& x, double y) \r\n\r\n            {\r\n\r\n                if (x < xval[1] ||\r\n\r\n                    x > xval[xval.size() - 2] ||\r\n\r\n                    y < yval[1] ||\r\n\r\n                    y > yval[yval.size() - 2]) \r\n\r\n                    {\r\n\r\n                    return false;\r\n\r\n                }\r\n\r\nelse \r\n\r\n                {\r\n\r\n                    return true;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        };\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n