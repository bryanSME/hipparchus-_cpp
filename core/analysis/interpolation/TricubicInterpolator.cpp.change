/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n//package org.hipparchus.analysis.interpolation;\r\n\r\n\r\n\r\n//import org.hipparchus.exception.Localized_Core_Formats;\r\n\r\n//import org.hipparchus.exception.;\r\n\r\n//import org.hipparchus.util.Math_Arrays;\r\n\r\n//import org.hipparchus.util.Math_Utils;\r\n\r\n\r\n\r\n/**\r\n\r\n * Generates a tricubic interpolating function.\r\n\r\n *\r\n\r\n */\r\n\r\nclass Tricubic_Interpolator\r\n\r\n    : Trivariate_Grid_Interpolator \r\n\r\n    {\r\n\r\n    /**\r\n\r\n     * {@inherit_doc}\r\n\r\n     */\r\n\r\n    //override\r\n\r\n    public Tricubic_Interpolating_Function interpolate(const std::vector<double>& xval, const std::vector<double>& yval, const std::vector<double> zval, const std::vector<std::vector<double>>[] fval)\r\n\r\n         \r\n\r\n        {\r\n\r\n        if (xval.size() == 0 || yval.size() == 0 || zval.size() == 0 || fval.size() == 0) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.NO_DATA);\r\n\r\n        }\r\n\r\n        if (xval.size() != fval.size()) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, xval.size(), fval.size());\r\n\r\n        }\r\n\r\n\r\n\r\n        Math_Arrays::check_order(xval);\r\n\r\n        Math_Arrays::check_order(yval);\r\n\r\n        Math_Arrays::check_order(zval);\r\n\r\n\r\n\r\n        const int x_len = xval.size();\r\n\r\n        const int y_len = yval.size();\r\n\r\n        const int z_len = zval.size();\r\n\r\n\r\n\r\n        // Approximation to the partial derivatives using finite differences.\r\n\r\n        const std::vector<std::vector<double>>[] dFdX = std::vector<double>(x_len][y_len][z_len];\r\n\r\n        const std::vector<std::vector<double>>[] d_fd_y = std::vector<double>(x_len][y_len][z_len];\r\n\r\n        const std::vector<std::vector<double>>[] d_fd_z = std::vector<double>(x_len][y_len][z_len];\r\n\r\n        const std::vector<std::vector<double>>[] d2FdXdY = std::vector<double>(x_len][y_len][z_len];\r\n\r\n        const std::vector<std::vector<double>>[] d2_fd_xd_z = std::vector<double>(x_len][y_len][z_len];\r\n\r\n        const std::vector<std::vector<double>>[] d2_fd_yd_z = std::vector<double>(x_len][y_len][z_len];\r\n\r\n        const std::vector<std::vector<double>>[] d3_fd_xd_yd_z = std::vector<double>(x_len][y_len][z_len];\r\n\r\n\r\n\r\n        for (int i{ 1 }; i < x_len - 1; i++) \r\n\r\n        {\r\n\r\n            Math_Utils::check_dimension(yval.size(), fval[i].size());\r\n\r\n\r\n\r\n            const int& nI = i + 1;\r\n\r\n            const int pI = i - 1;\r\n\r\n\r\n\r\n            const double nX = xval[nI];\r\n\r\n            const double pX = xval[pI];\r\n\r\n\r\n\r\n            const double delta_x = nX - pX;\r\n\r\n\r\n\r\n            for (int j{ 1 }; j < y_len - 1; j++) \r\n\r\n            {\r\n\r\n                Math_Utils::check_dimension(zval.size(), fval[i][j].size());\r\n\r\n\r\n\r\n                const int& nJ = j + 1;\r\n\r\n                const int pJ = j - 1;\r\n\r\n\r\n\r\n                const double nY = yval[nJ];\r\n\r\n                const double pY = yval[pJ];\r\n\r\n\r\n\r\n                const double delta_y = nY - pY;\r\n\r\n                const double delta_x_y = delta_x * delta_y;\r\n\r\n\r\n\r\n                for (int k{ 1 }; k < z_len - 1; k++) \r\n\r\n                {\r\n\r\n                    const int& nK = k + 1;\r\n\r\n                    const int pK = k - 1;\r\n\r\n\r\n\r\n                    const double nZ = zval[nK];\r\n\r\n                    const double pZ = zval[pK];\r\n\r\n\r\n\r\n                    const double delta_z = nZ - pZ;\r\n\r\n\r\n\r\n                    dFdX[i][j][k] = (fval[nI][j][k] - fval[pI][j][k]) / delta_x;\r\n\r\n                    d_fd_y[i][j][k] = (fval[i][nJ][k] - fval[i][pJ][k]) / delta_y;\r\n\r\n                    d_fd_z[i][j][k] = (fval[i][j][nK] - fval[i][j][pK]) / delta_z;\r\n\r\n\r\n\r\n                    const double delta_x_z = delta_x * delta_z;\r\n\r\n                    const double delta_y_z = delta_y * delta_z;\r\n\r\n\r\n\r\n                    d2FdXdY[i][j][k] = (fval[nI][nJ][k] - fval[nI][pJ][k] - fval[pI][nJ][k] + fval[pI][pJ][k]) / delta_x_y;\r\n\r\n                    d2_fd_xd_z[i][j][k] = (fval[nI][j][nK] - fval[nI][j][pK] - fval[pI][j][nK] + fval[pI][j][pK]) / delta_x_z;\r\n\r\n                    d2_fd_yd_z[i][j][k] = (fval[i][nJ][nK] - fval[i][nJ][pK] - fval[i][pJ][nK] + fval[i][pJ][pK]) / delta_y_z;\r\n\r\n\r\n\r\n                    const double delta_x_y_z = delta_x_y * delta_z;\r\n\r\n\r\n\r\n                    d3_fd_xd_yd_z[i][j][k] = (fval[nI][nJ][nK] - fval[nI][pJ][nK] -\r\n\r\n                                          fval[pI][nJ][nK] + fval[pI][pJ][nK] -\r\n\r\n                                          fval[nI][nJ][pK] + fval[nI][pJ][pK] +\r\n\r\n                                          fval[pI][nJ][pK] - fval[pI][pJ][pK]) / delta_x_y_z;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        // Create the interpolating function.\r\n\r\n        return Tricubic_Interpolating_Function(xval, yval, zval, fval, dFdX, d_fd_y, d_fd_z, d2FdXdY, d2_fd_xd_z, d2_fd_yd_z, d3_fd_xd_yd_z) \r\n\r\n        {\r\n\r\n            /** {@inherit_doc} */\r\n\r\n            //override\r\n\r\n            public bool is_valid_point(const double& x, const double& y, const double& z) \r\n\r\n            {\r\n\r\n                if (x < xval[1] ||\r\n\r\n                    x > xval[xval.size() - 2] ||\r\n\r\n                    y < yval[1] ||\r\n\r\n                    y > yval[yval.size() - 2] ||\r\n\r\n                    z < zval[1] ||\r\n\r\n                    z > zval[zval.size() - 2]) \r\n\r\n                    {\r\n\r\n                    return false;\r\n\r\n                }\r\n\r\nelse \r\n\r\n                {\r\n\r\n                    return true;\r\n\r\n                }\r\n\r\n            }\r\n\r\n        };\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n