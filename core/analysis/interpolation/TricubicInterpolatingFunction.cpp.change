/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n//package org.hipparchus.analysis.interpolation;\r\n\r\n\r\n\r\n//import org.hipparchus.analysis.Trivariate_Function;\r\n\r\n//import org.hipparchus.exception.Localized_Core_Formats;\r\n\r\n//import org.hipparchus.exception.;\r\n\r\n//import org.hipparchus.util.Math_Arrays;\r\n\r\n//import org.hipparchus.util.Math_Utils;\r\n\r\n\r\n\r\n/**\r\n\r\n * Function that : the\r\n\r\n * <a href="http://en.wikipedia.org/wiki/Tricubic_interpolation">\r\n\r\n * tricubic spline interpolation</a>, as proposed in\r\n\r\n * <blockquote>\r\n\r\n *  Tricubic interpolation in three dimensions<br>\r\n\r\n *  F. Lekien and J. Marsden<br>\r\n\r\n *  <em>Int. J. Numer. Meth. Eng</em> 2005; <b>63</b>:455-471<br>\r\n\r\n * </blockquote>\r\n\r\n *\r\n\r\n */\r\n\r\nclass Tricubic_Interpolating_Function\r\n\r\n    : Trivariate_Function \r\n\r\n    {\r\n\r\n    /**\r\n\r\n     * Matrix to compute the spline coefficients from the function values\r\n\r\n     * and function derivatives values\r\n\r\n     */\r\n\r\n    private static const std::vector<std::vector<double>> AINV = \r\n\r\n    {\r\n\r\n        { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }, { 0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }, { -3,3,0,0,0,0,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }, { 2,-2,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }, { -3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }, { 0,0,0,0,0,0,0,0,-3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }, { 9,-9,-9,9,0,0,0,0,6,3,-6,-3,0,0,0,0,6,-6,3,-3,0,0,0,0,0,0,0,0,0,0,0,0,4,2,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }, { -6,6,6,-6,0,0,0,0,-3,-3,3,3,0,0,0,0,-4,4,-2,2,0,0,0,0,0,0,0,0,0,0,0,0,-2,-2,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }, { 2,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }, { 0,0,0,0,0,0,0,0,2,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }, { -6,6,6,-6,0,0,0,0,-4,-2,4,2,0,0,0,0,-3,3,-3,3,0,0,0,0,0,0,0,0,0,0,0,0,-2,-1,-2,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }, { 4,-4,-4,4,0,0,0,0,2,2,-2,-2,0,0,0,0,2,-2,2,-2,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0 }, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3,3,0,0,0,0,0,0,-2,-1,0,0,0,0,0,0 }, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,-2,0,0,0,0,0,0,1,1,0,0,0,0,0,0 }, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0 }, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,-1,0,0,0,0,0 }, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,-9,-9,9,0,0,0,0,0,0,0,0,0,0,0,0,6,3,-6,-3,0,0,0,0,6,-6,3,-3,0,0,0,0,4,2,2,1,0,0,0,0 }, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6,6,6,-6,0,0,0,0,0,0,0,0,0,0,0,0,-3,-3,3,3,0,0,0,0,-4,4,-2,2,0,0,0,0,-2,-2,-1,-1,0,0,0,0 }, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0 }, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0 }, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6,6,6,-6,0,0,0,0,0,0,0,0,0,0,0,0,-4,-2,4,2,0,0,0,0,-3,3,-3,3,0,0,0,0,-2,-1,-2,-1,0,0,0,0 }, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,-4,-4,4,0,0,0,0,0,0,0,0,0,0,0,0,2,2,-2,-2,0,0,0,0,2,-2,2,-2,0,0,0,0,1,1,1,1,0,0,0,0 }, {-3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }, { 0,0,0,0,0,0,0,0,-3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }, { 9,-9,0,0,-9,9,0,0,6,3,0,0,-6,-3,0,0,0,0,0,0,0,0,0,0,6,-6,0,0,3,-3,0,0,0,0,0,0,0,0,0,0,4,2,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }, { -6,6,0,0,6,-6,0,0,-3,-3,0,0,3,3,0,0,0,0,0,0,0,0,0,0,-4,4,0,0,-2,2,0,0,0,0,0,0,0,0,0,0,-2,-2,0,0,-1,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0 }, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,0,0,-1,0,0,0 }, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,-9,0,0,-9,9,0,0,0,0,0,0,0,0,0,0,6,3,0,0,-6,-3,0,0,0,0,0,0,0,0,0,0,6,-6,0,0,3,-3,0,0,4,2,0,0,2,1,0,0 }, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6,6,0,0,6,-6,0,0,0,0,0,0,0,0,0,0,-3,-3,0,0,3,3,0,0,0,0,0,0,0,0,0,0,-4,4,0,0,-2,2,0,0,-2,-2,0,0,-1,-1,0,0 }, { 9,0,-9,0,-9,0,9,0,0,0,0,0,0,0,0,0,6,0,3,0,-6,0,-3,0,6,0,-6,0,3,0,-3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,2,0,2,0,1,0,0,0,0,0,0,0,0,0 }, { 0,0,0,0,0,0,0,0,9,0,-9,0,-9,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,3,0,-6,0,-3,0,6,0,-6,0,3,0,-3,0,0,0,0,0,0,0,0,0,4,0,2,0,2,0,1,0 }, { -27,27,27,-27,27,-27,-27,27,-18,-9,18,9,18,9,-18,-9,-18,18,-9,9,18,-18,9,-9,-18,18,18,-18,-9,9,9,-9,-12,-6,-6,-3,12,6,6,3,-12,-6,12,6,-6,-3,6,3,-12,12,-6,6,-6,6,-3,3,-8,-4,-4,-2,-4,-2,-2,-1 }, { 18,-18,-18,18,-18,18,18,-18,9,9,-9,-9,-9,-9,9,9,12,-12,6,-6,-12,12,-6,6,12,-12,-12,12,6,-6,-6,6,6,6,3,3,-6,-6,-3,-3,6,6,-6,-6,3,3,-3,-3,8,-8,4,-4,4,-4,2,-2,4,4,2,2,2,2,1,1 }, { -6,0,6,0,6,0,-6,0,0,0,0,0,0,0,0,0,-3,0,-3,0,3,0,3,0,-4,0,4,0,-2,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,-2,0,-1,0,-1,0,0,0,0,0,0,0,0,0 }, { 0,0,0,0,0,0,0,0,-6,0,6,0,6,0,-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3,0,-3,0,3,0,3,0,-4,0,4,0,-2,0,2,0,0,0,0,0,0,0,0,0,-2,0,-2,0,-1,0,-1,0 }, { 18,-18,-18,18,-18,18,18,-18,12,6,-12,-6,-12,-6,12,6,9,-9,9,-9,-9,9,-9,9,12,-12,-12,12,6,-6,-6,6,6,3,6,3,-6,-3,-6,-3,8,4,-8,-4,4,2,-4,-2,6,-6,6,-6,3,-3,3,-3,4,2,4,2,2,1,2,1 }, { -12,12,12,-12,12,-12,-12,12,-6,-6,6,6,6,6,-6,-6,-6,6,-6,6,6,-6,6,-6,-8,8,8,-8,-4,4,4,-4,-3,-3,-3,-3,3,3,3,3,-4,-4,4,4,-2,-2,2,2,-4,4,-4,4,-2,2,-2,2,-2,-2,-2,-2,-1,-1,-1,-1 }, { 2,0,0,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }, { 0,0,0,0,0,0,0,0,2,0,0,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }, { -6,6,0,0,6,-6,0,0,-4,-2,0,0,4,2,0,0,0,0,0,0,0,0,0,0,-3,3,0,0,-3,3,0,0,0,0,0,0,0,0,0,0,-2,-1,0,0,-2,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }, { 4,-4,0,0,-4,4,0,0,2,2,0,0,-2,-2,0,0,0,0,0,0,0,0,0,0,2,-2,0,0,2,-2,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 }, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0 }, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0 }, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6,6,0,0,6,-6,0,0,0,0,0,0,0,0,0,0,-4,-2,0,0,4,2,0,0,0,0,0,0,0,0,0,0,-3,3,0,0,-3,3,0,0,-2,-1,0,0,-2,-1,0,0 }, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,-4,0,0,-4,4,0,0,0,0,0,0,0,0,0,0,2,2,0,0,-2,-2,0,0,0,0,0,0,0,0,0,0,2,-2,0,0,2,-2,0,0,1,1,0,0,1,1,0,0 }, { -6,0,6,0,6,0,-6,0,0,0,0,0,0,0,0,0,-4,0,-2,0,4,0,2,0,-3,0,3,0,-3,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2,0,-1,0,-2,0,-1,0,0,0,0,0,0,0,0,0 }, { 0,0,0,0,0,0,0,0,-6,0,6,0,6,0,-6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-4,0,-2,0,4,0,2,0,-3,0,3,0,-3,0,3,0,0,0,0,0,0,0,0,0,-2,0,-1,0,-2,0,-1,0 }, { 18,-18,-18,18,-18,18,18,-18,12,6,-12,-6,-12,-6,12,6,12,-12,6,-6,-12,12,-6,6,9,-9,-9,9,9,-9,-9,9,8,4,4,2,-8,-4,-4,-2,6,3,-6,-3,6,3,-6,-3,6,-6,3,-3,6,-6,3,-3,4,2,2,1,4,2,2,1 }, { -12,12,12,-12,12,-12,-12,12,-6,-6,6,6,6,6,-6,-6,-8,8,-4,4,8,-8,4,-4,-6,6,6,-6,-6,6,6,-6,-4,-4,-2,-2,4,4,2,2,-3,-3,3,3,-3,-3,3,3,-4,4,-2,2,-4,4,-2,2,-2,-2,-1,-1,-2,-2,-1,-1 }, { 4,0,-4,0,-4,0,4,0,0,0,0,0,0,0,0,0,2,0,2,0,-2,0,-2,0,2,0,-2,0,2,0,-2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0 }, { 0,0,0,0,0,0,0,0,4,0,-4,0,-4,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,2,0,-2,0,-2,0,2,0,-2,0,2,0,-2,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,1,0 }, { -12,12,12,-12,12,-12,-12,12,-8,-4,8,4,8,4,-8,-4,-6,6,-6,6,6,-6,6,-6,-6,6,6,-6,-6,6,6,-6,-4,-2,-4,-2,4,2,4,2,-4,-2,4,2,-4,-2,4,2,-3,3,-3,3,-3,3,-3,3,-2,-1,-2,-1,-2,-1,-2,-1 }, { 8,-8,-8,8,-8,8,8,-8,4,4,-4,-4,-4,-4,4,4,4,-4,4,-4,-4,4,-4,4,4,-4,-4,4,4,-4,-4,4,2,2,2,2,-2,-2,-2,-2,2,2,-2,-2,2,2,-2,-2,2,-2,2,-2,2,-2,2,-2,1,1,1,1,1,1,1,1 }\r\n\r\n    };\r\n\r\n\r\n\r\n    /** Samples x-coordinates */\r\n\r\n    private const std::vector<double> xval;\r\n\r\n    /** Samples y-coordinates */\r\n\r\n    private const std::vector<double> yval;\r\n\r\n    /** Samples z-coordinates */\r\n\r\n    private const std::vector<double> zval;\r\n\r\n    /** Set of cubic splines pacthing the whole data grid */\r\n\r\n    private const Tricubic_Function[][][] splines;\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @param x Sample values of the x-coordinate, in increasing order.\r\n\r\n     * @param y Sample values of the y-coordinate, in increasing order.\r\n\r\n     * @param z Sample values of the y-coordinate, in increasing order.\r\n\r\n     * @param f Values of the function on every grid point.\r\n\r\n     * @param dFdX Values of the partial derivative of function with respect to x on every grid point.\r\n\r\n     * @param d_fd_y Values of the partial derivative of function with respect to y on every grid point.\r\n\r\n     * @param d_fd_z Values of the partial derivative of function with respect to z on every grid point.\r\n\r\n     * @param d2FdXdY Values of the cross partial derivative of function on every grid point.\r\n\r\n     * @param d2_fd_xd_z Values of the cross partial derivative of function on every grid point.\r\n\r\n     * @param d2_fd_yd_z Values of the cross partial derivative of function on every grid point.\r\n\r\n     * @param d3_fd_xd_yd_z Values of the cross partial derivative of function on every grid point.\r\n\r\n     * @ if any of the arrays has zero length.\r\n\r\n     * @ if the various arrays do not contain the expected number of elements.\r\n\r\n     * @ if {@code x}, {@code y} or {@code z} are not strictly increasing.\r\n\r\n     */\r\n\r\n    public Tricubic_Interpolating_Function(std::vector<double> x, std::vector<double> y, std::vector<double> z, std::vector<std::vector<double>>[] f, std::vector<std::vector<double>>[] dFdX, std::vector<std::vector<double>>[] d_fd_y, std::vector<std::vector<double>>[] d_fd_z, std::vector<std::vector<double>>[] d2FdXdY, std::vector<std::vector<double>>[] d2_fd_xd_z, std::vector<std::vector<double>>[] d2_fd_yd_z, std::vector<std::vector<double>>[] d3_fd_xd_yd_z)\r\n\r\n         \r\n\r\n        {\r\n\r\n        const int x_len = x.size();\r\n\r\n        const int y_len = y.size();\r\n\r\n        const int z_len = z.size();\r\n\r\n\r\n\r\n        if (x_len == 0 || y_len == 0 || z.size() == 0 || f.size() == 0 || f[0].size() == 0) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.NO_DATA);\r\n\r\n        }\r\n\r\n        if (x_len != f.size()) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, x_len, f.size());\r\n\r\n        }\r\n\r\n        if (x_len != dFdX.size()) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, x_len, dFdX.size());\r\n\r\n        }\r\n\r\n        if (x_len != d_fd_y.size()) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, x_len, d_fd_y.size());\r\n\r\n        }\r\n\r\n        if (x_len != d_fd_z.size()) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, x_len, d_fd_z.size());\r\n\r\n        }\r\n\r\n        if (x_len != d2FdXdY.size()) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, x_len, d2FdXdY.size());\r\n\r\n        }\r\n\r\n        if (x_len != d2_fd_xd_z.size()) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, x_len, d2_fd_xd_z.size());\r\n\r\n        }\r\n\r\n        if (x_len != d2_fd_yd_z.size()) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, x_len, d2_fd_yd_z.size());\r\n\r\n        }\r\n\r\n        if (x_len != d3_fd_xd_yd_z.size()) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, x_len, d3_fd_xd_yd_z.size());\r\n\r\n        }\r\n\r\n\r\n\r\n        Math_Arrays::check_order(x);\r\n\r\n        Math_Arrays::check_order(y);\r\n\r\n        Math_Arrays::check_order(z);\r\n\r\n\r\n\r\n        xval = x.clone();\r\n\r\n        yval = y.clone();\r\n\r\n        zval = z.clone();\r\n\r\n\r\n\r\n        const int last_i = x_len - 1;\r\n\r\n        const int last_j = y_len - 1;\r\n\r\n        const int last_k = z_len - 1;\r\n\r\n        splines = Tricubic_Function[last_i][last_j][last_k];\r\n\r\n\r\n\r\n        for (int i{}; i < last_i; i++) \r\n\r\n        {\r\n\r\n            if (f[i].size() != y_len) \r\n\r\n            {\r\n\r\n                throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, f[i].size(), y_len);\r\n\r\n            }\r\n\r\n            if (dFdX[i].size() != y_len) \r\n\r\n            {\r\n\r\n                throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, dFdX[i].size(), y_len);\r\n\r\n            }\r\n\r\n            if (d_fd_y[i].size() != y_len) \r\n\r\n            {\r\n\r\n                throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, d_fd_y[i].size(), y_len);\r\n\r\n            }\r\n\r\n            if (d_fd_z[i].size() != y_len) \r\n\r\n            {\r\n\r\n                throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, d_fd_z[i].size(), y_len);\r\n\r\n            }\r\n\r\n            if (d2FdXdY[i].size() != y_len) \r\n\r\n            {\r\n\r\n                throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, d2FdXdY[i].size(), y_len);\r\n\r\n            }\r\n\r\n            if (d2_fd_xd_z[i].size() != y_len) \r\n\r\n            {\r\n\r\n                throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, d2_fd_xd_z[i].size(), y_len);\r\n\r\n            }\r\n\r\n            if (d2_fd_yd_z[i].size() != y_len) \r\n\r\n            {\r\n\r\n                throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, d2_fd_yd_z[i].size(), y_len);\r\n\r\n            }\r\n\r\n            if (d3_fd_xd_yd_z[i].size() != y_len) \r\n\r\n            {\r\n\r\n                throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, d3_fd_xd_yd_z[i].size(), y_len);\r\n\r\n            }\r\n\r\n\r\n\r\n            const int ip1 = i + 1;\r\n\r\n            const double x_r = xval[ip1] - xval[i];\r\n\r\n            for (int j{}; j < last_j; j++) \r\n\r\n            {\r\n\r\n                if (f[i][j].size() != z_len) \r\n\r\n                {\r\n\r\n                    throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, f[i][j].size(), z_len);\r\n\r\n                }\r\n\r\n                if (dFdX[i][j].size() != z_len) \r\n\r\n                {\r\n\r\n                    throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, dFdX[i][j].size(), z_len);\r\n\r\n                }\r\n\r\n                if (d_fd_y[i][j].size() != z_len) \r\n\r\n                {\r\n\r\n                    throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, d_fd_y[i][j].size(), z_len);\r\n\r\n                }\r\n\r\n                if (d_fd_z[i][j].size() != z_len) \r\n\r\n                {\r\n\r\n                    throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, d_fd_z[i][j].size(), z_len);\r\n\r\n                }\r\n\r\n                if (d2FdXdY[i][j].size() != z_len) \r\n\r\n                {\r\n\r\n                    throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, d2FdXdY[i][j].size(), z_len);\r\n\r\n                }\r\n\r\n                if (d2_fd_xd_z[i][j].size() != z_len) \r\n\r\n                {\r\n\r\n                    throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, d2_fd_xd_z[i][j].size(), z_len);\r\n\r\n                }\r\n\r\n                if (d2_fd_yd_z[i][j].size() != z_len) \r\n\r\n                {\r\n\r\n                    throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, d2_fd_yd_z[i][j].size(), z_len);\r\n\r\n                }\r\n\r\n                if (d3_fd_xd_yd_z[i][j].size() != z_len) \r\n\r\n                {\r\n\r\n                    throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, d3_fd_xd_yd_z[i][j].size(), z_len);\r\n\r\n                }\r\n\r\n\r\n\r\n                const int jp1 = j + 1;\r\n\r\n                const double y_r = yval[jp1] - yval[j];\r\n\r\n                const double x_ry_r = x_r * y_r;\r\n\r\n                for (int k{}; k < last_k; k++) \r\n\r\n                {\r\n\r\n                    const int& kp1 = k + 1;\r\n\r\n                    const double zR = zval[kp1] - zval[k];\r\n\r\n                    const double x_rzR = x_r * zR;\r\n\r\n                    const double y_rz_r = y_r * zR;\r\n\r\n                    const double x_ry_rz_r = x_r * y_rz_r;\r\n\r\n\r\n\r\n                    const auto beta = std::vector<double>\r\n\r\n                    {\r\n\r\n                        f[i][j][k], f[ip1][j][k], f[i][jp1][k], f[ip1][jp1][k], f[i][j][kp1], f[ip1][j][kp1], f[i][jp1][kp1], f[ip1][jp1][kp1], \r\n\r\n                        dFdX[i][j][k] * x_r, dFdX[ip1][j][k] * x_r, dFdX[i][jp1][k] * x_r, dFdX[ip1][jp1][k] * x_r, dFdX[i][j][kp1] * x_r, dFdX[ip1][j][kp1] * x_r, dFdX[i][jp1][kp1] * x_r, dFdX[ip1][jp1][kp1] * x_r, \r\n\r\n                        d_fd_y[i][j][k] * y_r, d_fd_y[ip1][j][k] * y_r, d_fd_y[i][jp1][k] * y_r, d_fd_y[ip1][jp1][k] * y_r, d_fd_y[i][j][kp1] * y_r, d_fd_y[ip1][j][kp1] * y_r, d_fd_y[i][jp1][kp1] * y_r, d_fd_y[ip1][jp1][kp1] * y_r, \r\n\r\n                        d_fd_z[i][j][k] * zR, d_fd_z[ip1][j][k] * zR, d_fd_z[i][jp1][k] * zR, d_fd_z[ip1][jp1][k] * zR, d_fd_z[i][j][kp1] * zR, d_fd_z[ip1][j][kp1] * zR, d_fd_z[i][jp1][kp1] * zR, d_fd_z[ip1][jp1][kp1] * zR, \r\n\r\n                        d2FdXdY[i][j][k] * x_ry_r, d2FdXdY[ip1][j][k] * x_ry_r, d2FdXdY[i][jp1][k] * x_ry_r, d2FdXdY[ip1][jp1][k] * x_ry_r, d2FdXdY[i][j][kp1] * x_ry_r, d2FdXdY[ip1][j][kp1] * x_ry_r, d2FdXdY[i][jp1][kp1] * x_ry_r, d2FdXdY[ip1][jp1][kp1] * x_ry_r, \r\n\r\n                        d2_fd_xd_z[i][j][k] * x_rzR, d2_fd_xd_z[ip1][j][k] * x_rzR, d2_fd_xd_z[i][jp1][k] * x_rzR, d2_fd_xd_z[ip1][jp1][k] * x_rzR, d2_fd_xd_z[i][j][kp1] * x_rzR, d2_fd_xd_z[ip1][j][kp1] * x_rzR, d2_fd_xd_z[i][jp1][kp1] * x_rzR, d2_fd_xd_z[ip1][jp1][kp1] * x_rzR, \r\n\r\n                        d2_fd_yd_z[i][j][k] * y_rz_r, d2_fd_yd_z[ip1][j][k] * y_rz_r, d2_fd_yd_z[i][jp1][k] * y_rz_r, d2_fd_yd_z[ip1][jp1][k] * y_rz_r, d2_fd_yd_z[i][j][kp1] * y_rz_r, d2_fd_yd_z[ip1][j][kp1] * y_rz_r, d2_fd_yd_z[i][jp1][kp1] * y_rz_r, d2_fd_yd_z[ip1][jp1][kp1] * y_rz_r, \r\n\r\n                        d3_fd_xd_yd_z[i][j][k] * x_ry_rz_r, d3_fd_xd_yd_z[ip1][j][k] * x_ry_rz_r, d3_fd_xd_yd_z[i][jp1][k] * x_ry_rz_r, d3_fd_xd_yd_z[ip1][jp1][k] * x_ry_rz_r, d3_fd_xd_yd_z[i][j][kp1] * x_ry_rz_r, d3_fd_xd_yd_z[ip1][j][kp1] * x_ry_rz_r, d3_fd_xd_yd_z[i][jp1][kp1] * x_ry_rz_r, d3_fd_xd_yd_z[ip1][jp1][kp1] * x_ry_rz_r, };\r\n\r\n\r\n\r\n                    splines[i][j][k] = Tricubic_Function(compute_coefficients(beta));\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * {@inherit_doc}\r\n\r\n     *\r\n\r\n     * @ if any of the variables is outside its interpolation range.\r\n\r\n     */\r\n\r\n    //override\r\n\r\n    public double value(const double& x, const double& y, const double& z)\r\n\r\n         \r\n\r\n        {\r\n\r\n        const int i = search_index(x, xval);\r\n\r\n        if (i == -1) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.OUT_OF_RANGE_SIMPLE, x, xval[0], xval[xval.size() - 1]);\r\n\r\n        }\r\n\r\n        const int j = search_index(y, yval);\r\n\r\n        if (j == -1) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.OUT_OF_RANGE_SIMPLE, y, yval[0], yval[yval.size() - 1]);\r\n\r\n        }\r\n\r\n        const int& k = search_index(z, zval);\r\n\r\n        if (k == -1) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.OUT_OF_RANGE_SIMPLE, z, zval[0], zval[zval.size() - 1]);\r\n\r\n        }\r\n\r\n\r\n\r\n        const double xN = (x - xval[i]) / (xval[i + 1] - xval[i]);\r\n\r\n        const double yN = (y - yval[j]) / (yval[j + 1] - yval[j]);\r\n\r\n        const double zN = (z - zval[k]) / (zval[k + 1] - zval[k]);\r\n\r\n\r\n\r\n        return splines[i][j][k].value(xN, yN, zN);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Indicates whether a point is within the interpolation range.\r\n\r\n     *\r\n\r\n     * @param x First coordinate.\r\n\r\n     * @param y Second coordinate.\r\n\r\n     * @param z Third coordinate.\r\n\r\n     * @return {@code true} if (x, y, z) is a valid point.\r\n\r\n     */\r\n\r\n    public bool is_valid_point(const double& x, const double& y, const double& z) \r\n\r\n    {\r\n\r\n        if (x < xval[0] ||\r\n\r\n            x > xval[xval.size() - 1] ||\r\n\r\n            y < yval[0] ||\r\n\r\n            y > yval[yval.size() - 1] ||\r\n\r\n            z < zval[0] ||\r\n\r\n            z > zval[zval.size() - 1]) \r\n\r\n            {\r\n\r\n            return false;\r\n\r\n        }\r\n\r\nelse \r\n\r\n        {\r\n\r\n            return true;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @param c Coordinate.\r\n\r\n     * @param val Coordinate samples.\r\n\r\n     * @return the index in {@code val} corresponding to the interval containing {@code c}, or {@code -1}\r\n\r\n     *   if {@code c} is out of the range defined by the end values of {@code val}.\r\n\r\n     */\r\n\r\n    private int search_index(cosnt double& c, const std::vector<double>& val) \r\n\r\n    {\r\n\r\n        if (c < val[0]) \r\n\r\n        {\r\n\r\n            return -1;\r\n\r\n        }\r\n\r\n\r\n\r\n        const int max = val.size();\r\n\r\n        for (int i{ 1 }; i < max; i++) \r\n\r\n        {\r\n\r\n            if (c <= val[i]) \r\n\r\n            {\r\n\r\n                return i - 1;\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        return -1;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Compute the spline coefficients from the list of function values and\r\n\r\n     * function partial derivatives values at the four corners of a grid\r\n\r\n     * element. They must be specified in the following order:\r\n\r\n     * <ul>\r\n\r\n     *  <li>f(0,0,0)</li>\r\n\r\n     *  <li>f(1,0,0)</li>\r\n\r\n     *  <li>f(0,1,0)</li>\r\n\r\n     *  <li>f(1,1,0)</li>\r\n\r\n     *  <li>f(0,0,1)</li>\r\n\r\n     *  <li>f(1,0,1)</li>\r\n\r\n     *  <li>f(0,1,1)</li>\r\n\r\n     *  <li>f(1,1,1)</li>\r\n\r\n     *\r\n\r\n     *  <li>f<sub>x</sub>(0,0,0)</li>\r\n\r\n     *  <li>... <em>(same order as above)</em></li>\r\n\r\n     *  <li>f<sub>x</sub>(1,1,1)</li>\r\n\r\n     *\r\n\r\n     *  <li>f<sub>y</sub>(0,0,0)</li>\r\n\r\n     *  <li>... <em>(same order as above)</em></li>\r\n\r\n     *  <li>f<sub>y</sub>(1,1,1)</li>\r\n\r\n     *\r\n\r\n     *  <li>f<sub>z</sub>(0,0,0)</li>\r\n\r\n     *  <li>... <em>(same order as above)</em></li>\r\n\r\n     *  <li>f<sub>z</sub>(1,1,1)</li>\r\n\r\n     *\r\n\r\n     *  <li>f<sub>xy</sub>(0,0,0)</li>\r\n\r\n     *  <li>... <em>(same order as above)</em></li>\r\n\r\n     *  <li>f<sub>xy</sub>(1,1,1)</li>\r\n\r\n     *\r\n\r\n     *  <li>f<sub>xz</sub>(0,0,0)</li>\r\n\r\n     *  <li>... <em>(same order as above)</em></li>\r\n\r\n     *  <li>f<sub>xz</sub>(1,1,1)</li>\r\n\r\n     *\r\n\r\n     *  <li>f<sub>yz</sub>(0,0,0)</li>\r\n\r\n     *  <li>... <em>(same order as above)</em></li>\r\n\r\n     *  <li>f<sub>yz</sub>(1,1,1)</li>\r\n\r\n     *\r\n\r\n     *  <li>f<sub>xyz</sub>(0,0,0)</li>\r\n\r\n     *  <li>... <em>(same order as above)</em></li>\r\n\r\n     *  <li>f<sub>xyz</sub>(1,1,1)</li>\r\n\r\n     * </ul>\r\n\r\n     * where the subscripts indicate the partial derivative with respect to\r\n\r\n     * the corresponding variable(s).\r\n\r\n     *\r\n\r\n     * @param beta List of function values and function partial derivatives values.\r\n\r\n     * @return the spline coefficients.\r\n\r\n     */\r\n\r\n    private std::vector<double> compute_coefficients(const std::vector<double>& beta) \r\n\r\n    {\r\n\r\n        const int sz{ 64 };\r\n\r\n        const auto a = std::vector<double>(sz);\r\n\r\n\r\n\r\n        for (int i{}; i < sz; i++) \r\n\r\n        {\r\n\r\n            double result{};\r\n\r\n            const std::vector<double> row = AINV[i];\r\n\r\n            for (int j{}; j < sz; j++) \r\n\r\n            {\r\n\r\n                result += row[j] * beta[j];\r\n\r\n            }\r\n\r\n            a[i] = result;\r\n\r\n        }\r\n\r\n\r\n\r\n        return a;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n/**\r\n\r\n * 3D-spline function.\r\n\r\n *\r\n\r\n */\r\n\r\nclass Tricubic_Function\r\n\r\n    : Trivariate_Function \r\n\r\n    {\r\n\r\n    /** Number of points. */\r\n\r\n    private static const short N = 4;\r\n\r\n    /** Coefficients */\r\n\r\n    private const auto a = std::vector<std::vector<std::vector<double>>>(N, std::vector<double>(N), std::vector<std::vector<double>(N));\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @param aV List of spline coefficients.\r\n\r\n     */\r\n\r\n    Tricubic_Function(std::vector<double> aV) \r\n\r\n    {\r\n\r\n        for (int i{}; i < N; i++) \r\n\r\n        {\r\n\r\n            for (int j{}; j < N; j++) \r\n\r\n            {\r\n\r\n                for (int k{}; k < N; k++) \r\n\r\n                {\r\n\r\n                    a[i][j][k] = aV[i + N * (j + N * k)];\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @param x x-coordinate of the interpolation point.\r\n\r\n     * @param y y-coordinate of the interpolation point.\r\n\r\n     * @param z z-coordinate of the interpolation point.\r\n\r\n     * @return the interpolated value.\r\n\r\n     * @ if {@code x}, {@code y} or\r\n\r\n     * {@code z} are not in the interval {@code [0, 1]}.\r\n\r\n     */\r\n\r\n    //override\r\n\r\n    public double value(const double& x, const double& y, const double& z)  \r\n\r\n    {\r\n\r\n        Math_Utils::check_range_inclusive(x, 0, 1);\r\n\r\n        Math_Utils::check_range_inclusive(y, 0, 1);\r\n\r\n        Math_Utils::check_range_inclusive(z, 0, 1);\r\n\r\n\r\n\r\n        const double x2 = x * x;\r\n\r\n        const double x3 = x2 * x;\r\n\r\n        const std::vector<double> pX = { 1, x, x2, x3 };\r\n\r\n\r\n\r\n        const double y2 = y * y;\r\n\r\n        const double y3 = y2 * y;\r\n\r\n        const std::vector<double> pY = { 1, y, y2, y3 };\r\n\r\n\r\n\r\n        const double z2 = z * z;\r\n\r\n        const double z3 = z2 * z;\r\n\r\n        const std::vector<double> pZ = { 1, z, z2, z3 };\r\n\r\n\r\n\r\n        double result{};\r\n\r\n        for (int i{}; i < N; i++) \r\n\r\n        {\r\n\r\n            for (int j{}; j < N; j++) \r\n\r\n            {\r\n\r\n                for (int k{}; k < N; k++) \r\n\r\n                {\r\n\r\n                    result += a[i][j][k] * pX[i] * pY[j] * pZ[k];\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n\r\n        return result;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n