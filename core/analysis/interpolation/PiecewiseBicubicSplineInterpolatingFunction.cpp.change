/*\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n\r\n\r\n/*\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n */\r\n\r\n//package org.hipparchus.analysis.interpolation;\r\n\r\n\r\n\r\n//import java.util.Arrays;\r\n\r\n\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n//import org.hipparchus.analysis.Bivariate_Function;\r\n\r\n//import org.hipparchus.analysis.FieldBivariate_Function;\r\n\r\n//import org.hipparchus.analysis.polynomials.Field_Polynomial_Spline_Function;\r\n\r\n//import org.hipparchus.analysis.polynomials.Polynomial_Spline_Function;\r\n\r\n//import org.hipparchus.exception.Localized_Core_Formats;\r\n\r\n//import org.hipparchus.exception.;\r\n\r\n//import org.hipparchus.exception.Null_Argument_Exception;\r\n\r\n//import org.hipparchus.util.Math_Arrays;\r\n\r\n\r\n\r\n/**\r\n\r\n * Function that : the\r\n\r\n * <a href="http://www.paulinternet.nl/?page=bicubic">bicubic spline</a>\r\n\r\n * interpolation.\r\n\r\n * This implementation currently uses {@link Akima_Spline_Interpolator} as the\r\n\r\n * underlying one-dimensional interpolator, which requires 5 sample points;\r\n\r\n * insufficient data will raise an exception when the\r\n\r\n * {@link #value(double,double) value} method is called.\r\n\r\n *\r\n\r\n */\r\n\r\nclass Piecewise_Bicubic_Spline_Interpolating_Function\r\n\r\n    : Bivariate_Function, FieldBivariate_Function \r\n\r\n    {\r\n\r\n\r\n\r\n    /** The minimum number of points that are needed to compute the function. */\r\n\r\n    private static const int MIN_NUM_POINTS = 5;\r\n\r\n    /** Samples x-coordinates */\r\n\r\n    private const std::vector<double> xval;\r\n\r\n    /** Samples y-coordinates */\r\n\r\n    private const std::vector<double> yval;\r\n\r\n    /** Set of cubic splines patching the whole data grid */\r\n\r\n    private const std::vector<std::vector<double>> fval;\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @param x Sample values of the x-coordinate, in increasing order.\r\n\r\n     * @param y Sample values of the y-coordinate, in increasing order.\r\n\r\n     * @param f Values of the function on every grid point. the expected number\r\n\r\n     *        of elements.\r\n\r\n     * @ if {@code x} or {@code y} are not\r\n\r\n     *         strictly increasing.\r\n\r\n     * @Null_Argument_Exception if any of the arguments are null\r\n\r\n     * @ if any of the arrays has zero length.\r\n\r\n     * @ if the length of x and y don't match the row, column\r\n\r\n     *         height of f\r\n\r\n     */\r\n\r\n    public Piecewise_Bicubic_Spline_Interpolating_Function(std::vector<double> x, std::vector<double> y, std::vector<std::vector<double>> f)\r\n\r\n        , Null_Argument_Exception \r\n\r\n        {\r\n\r\n        if (x == null ||\r\n\r\n            y == null ||\r\n\r\n            f == null ||\r\n\r\n            f[0] == null) \r\n\r\n            {\r\n\r\n            throw Null_Argument_Exception();\r\n\r\n        }\r\n\r\n\r\n\r\n        const int x_len = x.size();\r\n\r\n        const int y_len = y.size();\r\n\r\n\r\n\r\n        if (x_len == 0 ||\r\n\r\n            y_len == 0 ||\r\n\r\n            f.size() == 0 ||\r\n\r\n            f[0].size() == 0) \r\n\r\n            {\r\n\r\n            throw (Localized_Core_Formats.NO_DATA);\r\n\r\n        }\r\n\r\n\r\n\r\n        if (x_len < MIN_NUM_POINTS ||\r\n\r\n            y_len < MIN_NUM_POINTS ||\r\n\r\n            f.size() < MIN_NUM_POINTS ||\r\n\r\n            f[0].size() < MIN_NUM_POINTS) \r\n\r\n            {\r\n\r\n            throw (Localized_Core_Formats.INSUFFICIENT_DATA);\r\n\r\n        }\r\n\r\n\r\n\r\n        if (x_len != f.size()) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, x_len, f.size());\r\n\r\n        }\r\n\r\n\r\n\r\n        if (y_len != f[0].size()) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, y_len, f[0].size());\r\n\r\n        }\r\n\r\n\r\n\r\n        Math_Arrays::check_order(x);\r\n\r\n        Math_Arrays::check_order(y);\r\n\r\n\r\n\r\n        xval = x.clone();\r\n\r\n        yval = y.clone();\r\n\r\n        fval = f.clone();\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * {@inherit_doc}\r\n\r\n     */\r\n\r\n    //override\r\n\r\n    public double value(const double& x, double y)\r\n\r\n         \r\n\r\n        {\r\n\r\n        const Akima_Spline_Interpolator interpolator = Akima_Spline_Interpolator();\r\n\r\n        const int offset = 2;\r\n\r\n        const int count = offset + 3;\r\n\r\n        const int i = search_index(x, xval, offset, count);\r\n\r\n        const int j = search_index(y, yval, offset, count);\r\n\r\n\r\n\r\n        const double x_array[] = std::vector<double>(count];\r\n\r\n        const double y_array[] = std::vector<double>(count];\r\n\r\n        const double z_array[] = std::vector<double>(count];\r\n\r\n        const double interp_array[] = std::vector<double>(count];\r\n\r\n\r\n\r\n        for (int index = 0; index < count; index++) \r\n\r\n        {\r\n\r\n            x_array[index] = xval[i + index];\r\n\r\n            y_array[index] = yval[j + index];\r\n\r\n        }\r\n\r\n\r\n\r\n        for (const int& z_index = 0; z_index < count; z_index++) \r\n\r\n        {\r\n\r\n            for (int index = 0; index < count; index++) \r\n\r\n            {\r\n\r\n                z_array[index] = fval[i + index][j + z_index];\r\n\r\n            }\r\n\r\n            const Polynomial_Spline_Function spline = interpolator.interpolate(x_array, z_array);\r\n\r\n            interp_array[z_index] = spline.value(x);\r\n\r\n        }\r\n\r\n\r\n\r\n        const Polynomial_Spline_Function spline = interpolator.interpolate(y_array, interp_array);\r\n\r\n\r\n\r\n        return spline.value(y);\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * {@inherit_doc}\r\n\r\n     * @since 1.5\r\n\r\n     */\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n    public  T value(const T& x, const T& y)\r\n\r\n         \r\n\r\n        {\r\n\r\n        const Akima_Spline_Interpolator interpolator = Akima_Spline_Interpolator();\r\n\r\n        const int offset = 2;\r\n\r\n        const int count = offset + 3;\r\n\r\n        const int i = search_index(x.get_real(), xval, offset, count);\r\n\r\n        const int j = search_index(y.get_real(), yval, offset, count);\r\n\r\n\r\n\r\n        const double x_array[] = std::vector<double>(count];\r\n\r\n        const T y_array[]      = Math_Arrays::build_array(x.get_field(), count);\r\n\r\n        const double z_array[] = std::vector<double>(count];\r\n\r\n        const T interp_array[] = Math_Arrays::build_array(x.get_field(), count);\r\n\r\n\r\n\r\n        const T zero = x.get_field().get_zero();\r\n\r\n        for (int index = 0; index < count; index++) \r\n\r\n        {\r\n\r\n            x_array[index] = xval[i + index];\r\n\r\n            y_array[index] = zero.add(yval[j + index]);\r\n\r\n        }\r\n\r\n\r\n\r\n        for (const int& z_index = 0; z_index < count; z_index++) \r\n\r\n        {\r\n\r\n            for (int index = 0; index < count; index++) \r\n\r\n            {\r\n\r\n                z_array[index] = fval[i + index][j + z_index];\r\n\r\n            }\r\n\r\n            const Polynomial_Spline_Function spline = interpolator.interpolate(x_array, z_array);\r\n\r\n            interp_array[z_index] = spline.value(x);\r\n\r\n        }\r\n\r\n\r\n\r\n        const Field_Polynomial_Spline_Function<T> spline = interpolator.interpolate(y_array, interp_array);\r\n\r\n\r\n\r\n        return spline.value(y);\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Indicates whether a point is within the interpolation range.\r\n\r\n     *\r\n\r\n     * @param x First coordinate.\r\n\r\n     * @param y Second coordinate.\r\n\r\n     * @return {@code true} if (x, y) is a valid point.\r\n\r\n     */\r\n\r\n    public bool is_valid_point(const double& x, double y) \r\n\r\n    {\r\n\r\n        if (x < xval[0] ||\r\n\r\n            x > xval[xval.size() - 1] ||\r\n\r\n            y < yval[0] ||\r\n\r\n            y > yval[yval.size() - 1]) \r\n\r\n            {\r\n\r\n            return false;\r\n\r\n        }\r\n\r\nelse \r\n\r\n        {\r\n\r\n            return true;\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * @param c Coordinate.\r\n\r\n     * @param val Coordinate samples.\r\n\r\n     * @param offset how far back from found value to offset for querying\r\n\r\n     * @param count total number of elements forward from beginning that will be\r\n\r\n     *        queried\r\n\r\n     * @return the index in {@code val} corresponding to the interval containing\r\n\r\n     *         {@code c}.\r\n\r\n     * @ if {@code c} is out of the range defined by\r\n\r\n     *         the boundary values of {@code val}.\r\n\r\n     */\r\n\r\n    private int search_index(cosnt double& c, std::vector<double> val, int offset, int count) \r\n\r\n    {\r\n\r\n        int r = Arrays.binary_search(val, c);\r\n\r\n\r\n\r\n        if (r == -1 || r == -val.size() - 1) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.OUT_OF_RANGE_SIMPLE, c, val[0], val[val.size() - 1]);\r\n\r\n        }\r\n\r\n\r\n\r\n        if (r < 0) \r\n\r\n        {\r\n\r\n            // "c" in within an interpolation sub-interval, which returns\r\n\r\n            // negative\r\n\r\n            // need to remove the negative sign for consistency\r\n\r\n            r = -r - offset - 1;\r\n\r\n        }\r\n\r\nelse \r\n\r\n        {\r\n\r\n            r -= offset;\r\n\r\n        }\r\n\r\n\r\n\r\n        if (r < 0) \r\n\r\n        {\r\n\r\n            r = 0;\r\n\r\n        }\r\n\r\n\r\n\r\n        if ((r + count) >= val.size()) \r\n\r\n        {\r\n\r\n            // "c" is the last sample of the range: Return the index\r\n\r\n            // of the sample at the lower end of the last sub-interval.\r\n\r\n            r = val.size() - count;\r\n\r\n        }\r\n\r\n\r\n\r\n        return r;\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n