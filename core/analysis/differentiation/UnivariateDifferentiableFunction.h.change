/*\r\n\r\n\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n\r\n\r\n *\r\n\r\n\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n\r\n\r\n *\r\n\r\n\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n\r\n\r\n * limitations under the License.\r\n\r\n\r\n\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n\r\n\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n\r\n\r\n */\r\n\r\n\r\n\r\n#include "../UnivariateFunction.h"\r\n\r\n\r\n\r\n#include "Derivative.h"\r\n\r\n\r\n\r\n#include <type_traits>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/** Interface for univariate functions derivatives.\r\n\r\n\r\n\r\n * <p>This interface represents a simple function which computes\r\n\r\n\r\n\r\n * both the value and the first derivative of a mathematical function.\r\n\r\n\r\n\r\n * The derivative is computed with respect to the input variable.</p>\r\n\r\n\r\n\r\n * @see Univariate_Differentiable_Function\r\n\r\n\r\n\r\n * @see Univariate_Function_differentiator\r\n\r\n\r\n\r\n */\r\n\r\n\r\n\r\nclass Univariate_Differentiable_Function : public Univariate_Function\r\n\r\n\r\n\r\n{\r\n\r\n\r\n\r\npublic:\r\n\r\n\r\n\r\n    /**\r\n\r\n\r\n\r\n     * Compute the value for the function.\r\n\r\n\r\n\r\n     * @param x the point for which the function value should be computed\r\n\r\n\r\n\r\n     * @param <T> the type of the field elements\r\n\r\n\r\n\r\n     * @return the value\r\n\r\n\r\n\r\n     * @exception  if {@code x} does not\r\n\r\n\r\n\r\n     * satisfy the function's constraints (argument out of bound, or unsupported\r\n\r\n\r\n\r\n     * derivative order for example)\r\n\r\n\r\n\r\n     */\r\n\r\n\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Derivative<T>, T>::value>::type* = nullptr>\r\n\r\n\r\n\r\n    T value(T x);\r\n\r\n\r\n\r\n};\r\n\r\n