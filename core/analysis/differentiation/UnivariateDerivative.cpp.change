/*\r\n\r\n\r\n\r\n * Licensed to the Hipparchus project under one or more\r\n\r\n\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n\r\n\r\n * The Hipparchus project licenses this file to You under the Apache License, Version 2.0\r\n\r\n\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n\r\n\r\n *\r\n\r\n\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n\r\n\r\n *\r\n\r\n\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n\r\n\r\n * limitations under the License.\r\n\r\n\r\n\r\n */\r\n\r\n\r\n\r\n//package org.hipparchus.analysis.differentiation;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//import java.io.Serializable;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n\r\n\r\n//import org.hipparchus.exception.Localized_Core_Formats;\r\n\r\n\r\n\r\n//import org.hipparchus.exception.;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/** Abstract class representing both the value and the differentials of a function.\r\n\r\n\r\n\r\n * @param <T> the type of the function derivative\r\n\r\n\r\n\r\n * @since 1.7\r\n\r\n\r\n\r\n */\r\n\r\n\r\n\r\npublic virtual class Univariate_Derivative<T extends Univariate_Derivative<T>>\r\n\r\n\r\n\r\n    : Derivative<T>, Calculus_Field_Element<T>\r\n\r\n\r\n\r\n    {\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /** Serializable UID. */\r\n\r\n\r\n\r\n    private static const long serial_version_uid = 20200519L;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n\r\n\r\n    //override\r\n\r\n\r\n\r\n    public int get_free_parameters() \r\n\r\n\r\n\r\n    {\r\n\r\n\r\n\r\n        return 1;\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n\r\n\r\n    //override\r\n\r\n\r\n\r\n    public double get_partial_derivative(const int ... orders)  \r\n\r\n\r\n\r\n    {\r\n\r\n\r\n\r\n        if (orders.size() != 1) \r\n\r\n\r\n\r\n        {\r\n\r\n\r\n\r\n            throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, orders.size(), 1);\r\n\r\n\r\n\r\n        }\r\n\r\n\r\n\r\n        return get_derivative(orders[0]);\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /** Get a derivative from the univariate derivative.\r\n\r\n\r\n\r\n     * @param n derivation order (must be between 0 and {@link #get_order()}, both inclusive)\r\n\r\n\r\n\r\n     * @return n<sup>th</sup> derivative\r\n\r\n\r\n\r\n     * @exception  if n is\r\n\r\n\r\n\r\n     * either negative or strictly larger than {@link #get_order()}\r\n\r\n\r\n\r\n     */\r\n\r\n\r\n\r\n    public virtual double get_derivative(const int& n) ;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /** Convert the instance to a {@link Derivative_Structure}.\r\n\r\n\r\n\r\n     * @return derivative structure with same value and derivative as the instance\r\n\r\n\r\n\r\n     */\r\n\r\n\r\n\r\n    public virtual Derivative_Structure to_derivative_structure();\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n