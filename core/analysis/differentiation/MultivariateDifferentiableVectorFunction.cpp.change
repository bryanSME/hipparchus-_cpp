/*\r\n\r\n\r\n\r\n * Licensed to the Apache Software Foundation (ASF) under one or more\r\n\r\n\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n\r\n\r\n * The ASF licenses this file to You under the Apache License, Version 2.0\r\n\r\n\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n\r\n\r\n *\r\n\r\n\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n\r\n\r\n *\r\n\r\n\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n\r\n\r\n * limitations under the License.\r\n\r\n\r\n\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n\r\n\r\n\r\n * This is not the original file distributed by the Apache Software Foundation\r\n\r\n\r\n\r\n * It has been modified by the Hipparchus project\r\n\r\n\r\n\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//package org.hipparchus.analysis.differentiation;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//import org.hipparchus.analysis.MultivariateVector_function;\r\n\r\n\r\n\r\n//import org.hipparchus.exception.;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n\r\n\r\n\r\n * Extension of {@link MultivariateVector_function} representing a\r\n\r\n\r\n\r\n * multivariate differentiable vectorial function.\r\n\r\n\r\n\r\n */\r\n\r\n\r\n\r\nclass MultivariateDifferentiableVector_function\r\n\r\n\r\n\r\n    extends MultivariateVector_function \r\n\r\n\r\n\r\n    {\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n\r\n\r\n\r\n     * Compute the value for the function at the given point.\r\n\r\n\r\n\r\n     * @param point point at which the function must be evaluated\r\n\r\n\r\n\r\n     * @return function value for the given point\r\n\r\n\r\n\r\n     * @exception  if {@code point} does not\r\n\r\n\r\n\r\n     * satisfy the function's constraints (wrong dimension, argument out of bound, * or unsupported derivative order for example)\r\n\r\n\r\n\r\n     */\r\n\r\n\r\n\r\n    Derivative_Structure[] value(Derivative_Structure[] point)\r\n\r\n\r\n\r\n        ;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n