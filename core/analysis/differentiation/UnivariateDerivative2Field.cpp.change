/*\r\n\r\n\r\n\r\n * Licensed to the Hipparchus project under one or more\r\n\r\n\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n\r\n\r\n * The Hipparchus project licenses this file to You under the Apache License, Version 2.0\r\n\r\n\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n\r\n\r\n *\r\n\r\n\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n\r\n\r\n *\r\n\r\n\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n\r\n\r\n * limitations under the License.\r\n\r\n\r\n\r\n */\r\n\r\n\r\n\r\n//package org.hipparchus.analysis.differentiation;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//import java.io.Serializable;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//import org.hipparchus.Field;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/** Field for {@link Univariate_Derivative_2} instances.\r\n\r\n\r\n\r\n * <p>\r\n\r\n\r\n\r\n * This class is a singleton.\r\n\r\n\r\n\r\n * </p>\r\n\r\n\r\n\r\n * @since 1.7\r\n\r\n\r\n\r\n */\r\n\r\n\r\n\r\nclass Univariate_Derivative_2_Field : Field<Univariate_Derivative_2>\r\n\r\n\r\n\r\n{\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /** Serializable version identifier. */\r\n\r\n\r\n\r\n    private static const long serial_version_uid = 20200520L;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /** Zero constant. */\r\n\r\n\r\n\r\n    private const Univariate_Derivative_2 zero;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /** One constant. */\r\n\r\n\r\n\r\n    private const Univariate_Derivative_2 one;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /** Associated factory for conversions to {@link Derivative_Structure}. */\r\n\r\n\r\n\r\n    private const DS_Factory factory;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /** Private constructor for the singleton.\r\n\r\n\r\n\r\n     */\r\n\r\n\r\n\r\n    private Univariate_Derivative_2_Field() \r\n\r\n\r\n\r\n    {\r\n\r\n\r\n\r\n        zero    = Univariate_Derivative_2(0.0, 0.0, 0.0);\r\n\r\n\r\n\r\n        one     = Univariate_Derivative_2(1.0, 0.0, 0.0);\r\n\r\n\r\n\r\n        factory = DS_Factory(1, 2);\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /** Get the unique instance.\r\n\r\n\r\n\r\n     * @return the unique instance\r\n\r\n\r\n\r\n     */\r\n\r\n\r\n\r\n    public static Univariate_Derivative_2_Field get_instance() \r\n\r\n\r\n\r\n    {\r\n\r\n\r\n\r\n        return Lazy_Holder.INSTANCE;\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n\r\n\r\n    //override\r\n\r\n\r\n\r\n    public Univariate_Derivative_2 get_one() \r\n\r\n\r\n\r\n    {\r\n\r\n\r\n\r\n        return one;\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n\r\n\r\n    //override\r\n\r\n\r\n\r\n    public Univariate_Derivative_2 get_zero() \r\n\r\n\r\n\r\n    {\r\n\r\n\r\n\r\n        return zero;\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /** Get the factory for converting to {@link Derivative_Structure}.\r\n\r\n\r\n\r\n     * <p>\r\n\r\n\r\n\r\n     * This factory is used only for conversions. {@code Univariate_Derivative_2} by\r\n\r\n\r\n\r\n     * itself does not rely at all on {@link DS_Factory}, {@link DS_Compiler}\r\n\r\n\r\n\r\n     * or {@link Derivative_Structure} for its computation. For this reason, * the factory here is hidden and this method is //package private, so\r\n\r\n\r\n\r\n     * only {@link Univariate_Derivative_2#to_derivative_structure()} can call it on an\r\n\r\n\r\n\r\n     * existing {@link Univariate_Derivative_2} instance\r\n\r\n\r\n\r\n     * </p>\r\n\r\n\r\n\r\n     * @return factory for conversions\r\n\r\n\r\n\r\n     */\r\n\r\n\r\n\r\n    DS_Factory get_conversion_factory() \r\n\r\n\r\n\r\n    {\r\n\r\n\r\n\r\n        return factory;\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n\r\n\r\n    //override\r\n\r\n\r\n\r\n    public Class<Univariate_Derivative_2> get_runtime_class() \r\n\r\n\r\n\r\n    {\r\n\r\n\r\n\r\n        return Univariate_Derivative_2.class;\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n\r\n\r\n    //override\r\n\r\n\r\n\r\n    public bool equals(const Object& other) \r\n\r\n\r\n\r\n    {\r\n\r\n\r\n\r\n        return this == other;\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n\r\n\r\n    //override\r\n\r\n\r\n\r\n    public int hash_code() \r\n\r\n\r\n\r\n    {\r\n\r\n\r\n\r\n        return 0x71f43303;\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    // CHECKSTYLE: stop Hide_Utility_Class_Constructor\r\n\r\n\r\n\r\n    /** Holder for the instance.\r\n\r\n\r\n\r\n     * <p>We use here the Initialization On Demand Holder Idiom.</p>\r\n\r\n\r\n\r\n     */\r\n\r\n\r\n\r\n    private static class Lazy_Holder \r\n\r\n\r\n\r\n    {\r\n\r\n\r\n\r\n        /** Cached field instance. */\r\n\r\n\r\n\r\n        private static const Univariate_Derivative_2_Field INSTANCE = Univariate_Derivative_2_Field();\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    // CHECKSTYLE: resume Hide_Utility_Class_Constructor\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /** Handle deserialization of the singleton.\r\n\r\n\r\n\r\n     * @return the singleton instance\r\n\r\n\r\n\r\n     */\r\n\r\n\r\n\r\n    private Object read_resolve() \r\n\r\n\r\n\r\n    {\r\n\r\n\r\n\r\n        // return the singleton instance\r\n\r\n\r\n\r\n        return Lazy_Holder.INSTANCE;\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n