/*\r\n\r\n * Licensed to the Hipparchus project under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The Hipparchus project licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n//package org.hipparchus.special.elliptic.jacobi;\r\n\r\n\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n\r\n\r\n/** Values of {@link Field_Jacobi_Theta Jacobi theta} functions.\r\n\r\n * <p>\r\n\r\n * This is a container for the four Jacobi theta functions\r\n\r\n * \xce\xb8\xe2\x82\x81(z|\xcf\x84), \xce\xb8\xe2\x82\x82(z|\xcf\x84), \xce\xb8\xe2\x82\x83(z|\xcf\x84), and \xce\xb8\xe2\x82\x84(z|\xcf\x84).\r\n\r\n * </p>\r\n\r\n * @param <T> the type of the field elements\r\n\r\n * @see Field_Jacobi_Theta\r\n\r\n * @since 2.0\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\nclass Field_Theta \r\n\r\n{\r\n\r\n\r\n\r\n    /** Value of the \xce\xb8\xe2\x82\x81(z|\xcf\x84) function. */\r\n\r\n    private const T theta1;\r\n\r\n\r\n\r\n    /** Value of the \xce\xb8\xe2\x82\x82(z|\xcf\x84) function. */\r\n\r\n    private const T theta2;\r\n\r\n\r\n\r\n    /** Value of the \xce\xb8\xe2\x82\x83(z|\xcf\x84) function. */\r\n\r\n    private const T theta3;\r\n\r\n\r\n\r\n    /** Value of the \xce\xb8\xe2\x82\x84(z|\xcf\x84) function. */\r\n\r\n    private const T theta4;\r\n\r\n\r\n\r\n    /** Simple constructor.\r\n\r\n     * @param theta1 value of the \xce\xb8\xe2\x82\x81(z|\xcf\x84) function\r\n\r\n     * @param theta2 value of the \xce\xb8\xe2\x82\x82(z|\xcf\x84) function\r\n\r\n     * @param theta3 value of the \xce\xb8\xe2\x82\x83(z|\xcf\x84) function\r\n\r\n     * @param theta4 value of the \xce\xb8\xe2\x82\x84(z|\xcf\x84) function\r\n\r\n     */\r\n\r\n    Field_Theta(const T theta1, const T theta2, const T theta3, const T theta4) \r\n\r\n    {\r\n\r\n        this.theta1 = theta1;\r\n\r\n        this.theta2 = theta2;\r\n\r\n        this.theta3 = theta3;\r\n\r\n        this.theta4 = theta4;\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get the value of the \xce\xb8\xe2\x82\x81(z|\xcf\x84) function.\r\n\r\n     * @return \xce\xb8\xe2\x82\x81(z|\xcf\x84)\r\n\r\n     */\r\n\r\n    public T theta1() \r\n\r\n    {\r\n\r\n        return theta1;\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get the value of the \xce\xb8\xe2\x82\x82(z|\xcf\x84) function.\r\n\r\n     * @return \xce\xb8\xe2\x82\x82(z|\xcf\x84)\r\n\r\n     */\r\n\r\n    public T theta2() \r\n\r\n    {\r\n\r\n        return theta2;\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get the value of the \xce\xb8\xe2\x82\x83(z|\xcf\x84) function.\r\n\r\n     * @return \xce\xb8\xe2\x82\x83(z|\xcf\x84)\r\n\r\n     */\r\n\r\n    public T theta3() \r\n\r\n    {\r\n\r\n        return theta3;\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get the value of the \xce\xb8\xe2\x82\x84(z|\xcf\x84) function.\r\n\r\n     * @return \xce\xb8\xe2\x82\x84(z|\xcf\x84)\r\n\r\n     */\r\n\r\n    public T theta4() \r\n\r\n    {\r\n\r\n        return theta4;\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n