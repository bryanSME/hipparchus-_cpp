/*\r\n\r\n * Licensed to the Hipparchus project under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The Hipparchus project licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n//package org.hipparchus.special.elliptic.jacobi;\r\n\r\n\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n//import org.hipparchus.util.FastMath;\r\n\r\n//import org.hipparchus.util.Field_Sin_Cos;\r\n\r\n\r\n\r\n/** Algorithm for computing the principal Jacobi functions for parameters slightly above zero.\r\n\r\n * <p>\r\n\r\n * The algorithm for evaluating the functions is based on approximation\r\n\r\n * in terms of circular functions. It is given in Abramowitz and Stegun, * sections 16.13.\r\n\r\n * </p>\r\n\r\n * @param <T> the type of the field elements\r\n\r\n * @since 2.0\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\nclass Field_Near_Zero_Parameter extends Field_Jacobi_Elliptic<T> \r\n\r\n{\r\n\r\npublic:\r\n\r\n    /** Simple constructor.\r\n\r\n     * @param m parameter of the Jacobi elliptic function (must be zero or slightly positive here)\r\n\r\n     */\r\n\r\n    Field_Near_Zero_Parameter(const T& m) \r\n\r\n    {\r\n\r\n        super(m);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n    //override\r\n\r\n    Field_Copolar_N<T> values_n(const T& u) \r\n\r\n    {\r\n\r\n        const Field_Sin_Cos<T> sc = Sin_Cos(u);\r\n\r\n        const T factor = get_m().multiply(u.subtract(sc.sin().multiply(sc.cos()))).multiply(0.25);\r\n\r\n        return Field_Copolar_N<>(\r\n\r\n            sc.sin().subtract(factor.multiply(sc.cos())),             // equation 16.13.1\r\n\r\n            sc.cos().add(factor.multiply(sc.sin())),                             // equation 16.13.2\r\n\r\n            get_m().multiply(sc.sin()).multiply(sc.sin()).multiply(-0.5).add(1)); // equation 16.13.3\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n