/*\r\n\r\n * Licensed to the Hipparchus project under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The Hipparchus project licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n//package org.hipparchus.special.elliptic.jacobi;\r\n\r\n\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n//import org.hipparchus.complex.Field_std::complex<double>;\r\n\r\n//import org.hipparchus.special.elliptic.legendre.Legendre_Elliptic_Integral;\r\n\r\n//import org.hipparchus.util.FastMath;\r\n\r\n\r\n\r\n/** Algorithm for computing the principal Jacobi functions for complex parameter m.\r\n\r\n * @param <T> the type of the field elements\r\n\r\n * @since 2.0\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\nclass Field_std::complex<double>_Parameter extends Field_Jacobi_Elliptic<Field_Complex<T>> \r\n\r\n{\r\n\r\n\r\n\r\n    /** Jacobi \xce\xb8 functions. */\r\n\r\n    private const Field_Jacobi_Theta<Field_Complex<T>> jacobi_theta;\r\n\r\n\r\n\r\n    /** Quarter period K. */\r\n\r\n    private const Field_Complex<T> big_k;\r\n\r\n\r\n\r\n    /** Quarter period iK'. */\r\n\r\n    private const Field_Complex<T> i_big_k_prime;\r\n\r\n\r\n\r\n    /** Real periodic factor for K. */\r\n\r\n    private const T rK;\r\n\r\n\r\n\r\n    /** Imaginary periodic factor for K. */\r\n\r\n    private const T iK;\r\n\r\n\r\n\r\n    /** Real periodic factor for iK'. */\r\n\r\n    private const T r_k_prime;\r\n\r\n\r\n\r\n    /** Imaginary periodic factor for iK'. */\r\n\r\n    private const T i_k_prime;\r\n\r\n\r\n\r\n    /** Value of Jacobi \xce\xb8 functions at origin. */\r\n\r\n    private const Field_Theta<Field_Complex<T>> t0;\r\n\r\n\r\n\r\n    /** Scaling factor. */\r\n\r\n    private const Field_Complex<T> scaling;\r\n\r\n\r\n\r\n    /** Simple constructor.\r\n\r\n     * @param m parameter of the Jacobi elliptic function\r\n\r\n     */\r\n\r\n    Field_std::complex<double>_Parameter(const Field_Complex<T> m) \r\n\r\n    {\r\n\r\n\r\n\r\n        super(m);\r\n\r\n\r\n\r\n        // compute nome\r\n\r\n         const Field_Complex<T> q = Legendre_Elliptic_Integral.nome(m);\r\n\r\n\r\n\r\n        // compute periodic factors such that\r\n\r\n        // z = 4K [rK Re(z) + iK Im(z)] + 4K' [rK' Re(z) + iK' Im(z)]\r\n\r\n        big_k            = Legendre_Elliptic_Integral.big_k(m);\r\n\r\n        i_big_k_prime      = Legendre_Elliptic_Integral.big_k_prime(m).multiply_plus_i();\r\n\r\n        const T inverse = big_k.get_real_part().multiply(i_big_k_prime.get_imaginary_part()).\r\n\r\n                          subtract(big_k.get_imaginary_part().multiply(i_big_k_prime.get_real_part())).\r\n\r\n                          multiply(4).reciprocal();\r\n\r\n        this.rK         = i_big_k_prime.get_imaginary_part().multiply(inverse);\r\n\r\n        this.iK         = i_big_k_prime.get_real_part().multiply(inverse).negate();\r\n\r\n        this.r_k_prime    = big_k.get_imaginary_part().multiply(inverse).negate();\r\n\r\n        this.i_k_prime    = big_k.get_real_part().multiply(inverse);\r\n\r\n\r\n\r\n        // prepare underlying Jacobi \xce\xb8 functions\r\n\r\n        this.jacobi_theta = Field_Jacobi_Theta<>(q);\r\n\r\n        this.t0          = jacobi_theta.values(m.get_field().get_zero());\r\n\r\n        this.scaling     = big_k.reciprocal().multiply(m.get_pi().multiply(0.5));\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    /** {@inherit_doc}\r\n\r\n     * <p>\r\n\r\n     * The algorithm for evaluating the functions is based on {@link Field_Jacobi_Theta\r\n\r\n     * Jacobi theta functions}.\r\n\r\n     * </p>\r\n\r\n     */\r\n\r\n    //override\r\n\r\n    public Field_Copolar_N<Field_Complex<T>> values_n(Field_Complex<T> u) \r\n\r\n    {\r\n\r\n\r\n\r\n        // perform argument reduction\r\n\r\n        const T cK      = rK.multiply(u.get_real_part()).add(iK.multiply(u.get_imaginary_part()));\r\n\r\n        const T c_k_prime = r_k_prime.multiply(u.get_real_part()).add(i_k_prime.multiply(u.get_imaginary_part()));\r\n\r\n        const Field_Complex<T> reduced_u = u.linear_combination(1.0,                                  u, -4 * FastMath.rint(cK.get_real()),      big_k, -4 * FastMath.rint(c_k_prime.get_real()), i_big_k_prime);\r\n\r\n\r\n\r\n        // evaluate Jacobi \xce\xb8 functions at argument\r\n\r\n        const Field_Theta<Field_Complex<T>> t_z = jacobi_theta.values(reduced_u.multiply(scaling));\r\n\r\n\r\n\r\n        // convert to Jacobi elliptic functions\r\n\r\n        const Field_Complex<T> sn = t0.theta3().multiply(t_z.theta1()).divide(t0.theta2().multiply(t_z.theta4()));\r\n\r\n        const Field_Complex<T> cn = t0.theta4().multiply(t_z.theta2()).divide(t0.theta2().multiply(t_z.theta4()));\r\n\r\n        const Field_Complex<T> dn = t0.theta4().multiply(t_z.theta3()).divide(t0.theta3().multiply(t_z.theta4()));\r\n\r\n\r\n\r\n        return Field_Copolar_N<>(sn, cn, dn);\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n