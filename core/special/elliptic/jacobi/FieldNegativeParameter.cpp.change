/*\r\n\r\n * Licensed to the Hipparchus project under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The Hipparchus project licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n//package org.hipparchus.special.elliptic.jacobi;\r\n\r\n\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n//import org.hipparchus.util.FastMath;\r\n\r\n\r\n\r\n/** Algorithm for computing the principal Jacobi functions for negative parameter m.\r\n\r\n * <p>\r\n\r\n * The rules for negative parameter change are given in Abramowitz and Stegun, section 16.10.\r\n\r\n * </p>\r\n\r\n * @param <T> the type of the field elements\r\n\r\n * @since 2.0\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\nclass Field_Negative_Parameter extends Field_Jacobi_Elliptic<T> \r\n\r\n{\r\n\r\n\r\n\r\n    /** Algorithm to use for the positive parameter. */\r\n\r\n    private const Field_Jacobi_Elliptic<T> algorithm;\r\n\r\n\r\n\r\n    /** Input scaling factor. */\r\n\r\n    private const T input_scale;\r\n\r\n\r\n\r\n    /** output scaling factor. */\r\n\r\n    private const T output_scale;\r\n\r\n\r\n\r\n    /** Simple constructor.\r\n\r\n     * @param m parameter of the Jacobi elliptic function (must be negative here)\r\n\r\n     */\r\n\r\n    Field_Negative_Parameter(const T m) \r\n\r\n    {\r\n\r\n        super(m);\r\n\r\n        const T om_m = m.get_field().get_one().subtract(m);\r\n\r\n        algorithm   = Jacobi_Elliptic_Builder.build(m.negate().divide(om_m));\r\n\r\n        input_scale  = std::sqrt(om_m);\r\n\r\n        output_scale = input_scale.reciprocal();\r\n\r\n    }\r\n\r\n\r\n\r\n    /** {@inherit_doc} */\r\n\r\n    //override\r\n\r\n    public Field_Copolar_N<T> values_n(const T u) \r\n\r\n    {\r\n\r\n        const FieldCopolar_D<T> trio_d = FieldCopolar_D<>(algorithm.values_n(u.multiply(input_scale)));\r\n\r\n        return Field_Copolar_N<>(output_scale.multiply(trio_d.sd()), trio_d.cd(), trio_d.nd());\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n