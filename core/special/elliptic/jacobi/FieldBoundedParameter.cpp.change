/*\r\n\r\n * Licensed to the Hipparchus project under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The Hipparchus project licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n//package org.hipparchus.special.elliptic.jacobi;\r\n\r\n\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n//import org.hipparchus.special.elliptic.legendre.Legendre_Elliptic_Integral;\r\n\r\n\r\n\r\n/** Algorithm for computing the principal Jacobi functions for parameter m in [0; 1].\r\n\r\n * @param <T> the type of the field elements\r\n\r\n * @since 2.0\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\nclass FieldBounded_Parameter extends Field_Jacobi_Elliptic<T> \r\n\r\n{\r\n\r\n\r\n\r\n    /** Jacobi \xce\xb8 functions. */\r\n\r\n    private const Field_Jacobi_Theta<T> jacobi_theta;\r\n\r\n\r\n\r\n    /** Value of Jacobi \xce\xb8 functions at origin. */\r\n\r\n    private const Field_Theta<T> t0;\r\n\r\n\r\n\r\n    /** Scaling factor. */\r\n\r\n    private const T scaling;\r\n\r\n\r\n\r\n    /** Simple constructor.\r\n\r\n     * @param m parameter of the Jacobi elliptic function\r\n\r\n     */\r\n\r\n    FieldBounded_Parameter(const T m) \r\n\r\n    {\r\n\r\n\r\n\r\n        super(m);\r\n\r\n\r\n\r\n        // compute nome\r\n\r\n        const T q   = Legendre_Elliptic_Integral.nome(m);\r\n\r\n\r\n\r\n        // prepare underlying Jacobi \xce\xb8 functions\r\n\r\n        this.jacobi_theta = Field_Jacobi_Theta<>(q);\r\n\r\n        this.t0          = jacobi_theta.values(m.get_field().get_zero());\r\n\r\n        this.scaling     = Legendre_Elliptic_Integral.big_k(m).reciprocal().multiply(m.get_pi().multiply(0.5));\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    /** {@inherit_doc}\r\n\r\n     * <p>\r\n\r\n     * The algorithm for evaluating the functions is based on {@link Field_Jacobi_Theta\r\n\r\n     * Jacobi theta functions}.\r\n\r\n     * </p>\r\n\r\n     */\r\n\r\n    //override\r\n\r\n    public Field_Copolar_N<T> values_n(T u) \r\n\r\n    {\r\n\r\n\r\n\r\n        // evaluate Jacobi \xce\xb8 functions at argument\r\n\r\n        const Field_Theta<T> t_z = jacobi_theta.values(u.multiply(scaling));\r\n\r\n\r\n\r\n        // convert to Jacobi elliptic functions\r\n\r\n        const T sn = t0.theta3().multiply(t_z.theta1()).divide(t0.theta2().multiply(t_z.theta4()));\r\n\r\n        const T cn = t0.theta4().multiply(t_z.theta2()).divide(t0.theta2().multiply(t_z.theta4()));\r\n\r\n        const T dn = t0.theta4().multiply(t_z.theta3()).divide(t0.theta3().multiply(t_z.theta4()));\r\n\r\n\r\n\r\n        return Field_Copolar_N<>(sn, cn, dn);\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n