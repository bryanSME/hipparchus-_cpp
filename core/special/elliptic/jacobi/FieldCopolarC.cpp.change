/*\r\n\r\n * Licensed to the Hipparchus project under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The Hipparchus project licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n//package org.hipparchus.special.elliptic.jacobi;\r\n\r\n\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n\r\n\r\n/** Copolar trio with pole at point c in Glaisher\xe2\x80\x99s Notation.\r\n\r\n * <p>\r\n\r\n * This is a container for the three subsidiary Jacobi elliptic functions\r\n\r\n * {@code dc(u|m)}, {@code nc(u|m)}, and {@code sc(u|m)}.\r\n\r\n * </p>\r\n\r\n * @param <T> the type of the field elements\r\n\r\n * @since 2.0\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\nclass FieldCopolar_C \r\n\r\n{\r\n\r\n\r\n\r\n    /** Value of the dc function. */\r\n\r\n    private const T dc;\r\n\r\n\r\n\r\n    /** Value of the nc function. */\r\n\r\n    private const T nc;\r\n\r\n\r\n\r\n    /** Value of the sc function. */\r\n\r\n    private const T sc;\r\n\r\n\r\n\r\n    /** Simple constructor.\r\n\r\n     * @param trio_n copolar trio with pole at point n in Glaisher\xe2\x80\x99s Notation\r\n\r\n     */\r\n\r\n    FieldCopolar_C(const Field_Copolar_N<T> trio_n) \r\n\r\n    {\r\n\r\n        this.nc = trio_n.cn().reciprocal();\r\n\r\n        this.sc = nc.multiply(trio_n.sn());\r\n\r\n        this.dc = nc.multiply(trio_n.dn());\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get the value of the dc function.\r\n\r\n     * @return dc(u|m)\r\n\r\n     */\r\n\r\n    public T dc() \r\n\r\n    {\r\n\r\n        return dc;\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get the value of the nc function.\r\n\r\n     * @return nc(u|m)\r\n\r\n     */\r\n\r\n    public T nc() \r\n\r\n    {\r\n\r\n        return nc;\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get the value of the sc function.\r\n\r\n     * @return sc(u|m)\r\n\r\n     */\r\n\r\n    public T sc() \r\n\r\n    {\r\n\r\n        return sc;\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n