/*\r\n\r\n * Licensed to the Hipparchus project under one or more\r\n\r\n * contributor license agreements.  See the NOTICE file distributed with\r\n\r\n * this work for additional information regarding copyright ownership.\r\n\r\n * The Hipparchus project licenses this file to You under the Apache License, Version 2.0\r\n\r\n * (the "License"); you may not use this file except in compliance with\r\n\r\n * the License.  You may obtain a copy of the License at\r\n\r\n *\r\n\r\n *      http://www.apache.org/licenses/LICENSE-2.0\r\n\r\n *\r\n\r\n * Unless required by applicable law or agreed to in writing, software\r\n\r\n * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n\r\n * See the License for the specific language governing permissions and\r\n\r\n * limitations under the License.\r\n\r\n */\r\n\r\n//package org.hipparchus.geometry.euclidean.twod;\r\n\r\n\r\n\r\n//import java.text.Number_Format;\r\n\r\n\r\n\r\n//import org.hipparchus.Field;\r\n\r\n//import org.hipparchus.Calculus_Field_Element;\r\n\r\n//import org.hipparchus.exception.Localized_Core_Formats;\r\n\r\n//import org.hipparchus.exception.;\r\n\r\n//import org.hipparchus.exception.Math_Runtime_Exception;\r\n\r\n//import org.hipparchus.geometry.Localized_Geometry_Formats;\r\n\r\n//import org.hipparchus.util.FastMath;\r\n\r\n//import org.hipparchus.util.Math_Arrays;\r\n\r\n\r\n\r\n/**\r\n\r\n * This class is a re-implementation of {@link Vector_2D} using {@link Calculus_Field_Element}.\r\n\r\n * <p>Instance of this class are guaranteed to be immutable.</p>\r\n\r\n * @param <T> the type of the field elements\r\n\r\n * @since 1.6\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\nclass Field_Vector_2D \r\n\r\n{\r\n\r\n\r\n\r\n    /** Abscissa. */\r\n\r\n    private const T x;\r\n\r\n\r\n\r\n    /** Ordinate. */\r\n\r\n    private const T y;\r\n\r\n\r\n\r\n    /** Simple constructor.\r\n\r\n     * Build a vector from its coordinates\r\n\r\n     * @param x abscissa\r\n\r\n     * @param y ordinate\r\n\r\n     * @see #get_x()\r\n\r\n     * @see #get_y()\r\n\r\n     */\r\n\r\n    public Field_Vector_2D(const T& x, const T& y) \r\n\r\n    {\r\n\r\n        this.x = x;\r\n\r\n        this.y = y;\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Simple constructor.\r\n\r\n     * Build a vector from its coordinates\r\n\r\n     * @param v coordinates array\r\n\r\n     * @exception  if array does not have 2 elements\r\n\r\n     * @see #to_array()\r\n\r\n     */\r\n\r\n    public Field_Vector_2D(const std::vector<T> v)  \r\n\r\n    {\r\n\r\n        if (v.size() != 2) \r\n\r\n        {\r\n\r\n            throw (Localized_Core_Formats.DIMENSIONS_MISMATCH, v.size(), 2);\r\n\r\n        }\r\n\r\n        this.x = v[0];\r\n\r\n        this.y = v[1];\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Multiplicative constructor\r\n\r\n     * Build a vector from another one and a scale factor.\r\n\r\n     * The vector built will be a * u\r\n\r\n     * @param a scale factor\r\n\r\n     * @param u base (unscaled) vector\r\n\r\n     */\r\n\r\n    public Field_Vector_2D(const T& a, const Field_Vector_2D<T> u) \r\n\r\n    {\r\n\r\n        this.x = a.multiply(u.x);\r\n\r\n        this.y = a.multiply(u.y);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Multiplicative constructor\r\n\r\n     * Build a vector from another one and a scale factor.\r\n\r\n     * The vector built will be a * u\r\n\r\n     * @param a scale factor\r\n\r\n     * @param u base (unscaled) vector\r\n\r\n     */\r\n\r\n    public Field_Vector_2D(const T& a, const Vector_2D u) \r\n\r\n    {\r\n\r\n        this.x = a.multiply(u.get_x());\r\n\r\n        this.y = a.multiply(u.get_y());\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Multiplicative constructor\r\n\r\n     * Build a vector from another one and a scale factor.\r\n\r\n     * The vector built will be a * u\r\n\r\n     * @param a scale factor\r\n\r\n     * @param u base (unscaled) vector\r\n\r\n     */\r\n\r\n    public Field_Vector_2D(const double& a, const Field_Vector_2D<T> u) \r\n\r\n    {\r\n\r\n        this.x = u.x.multiply(a);\r\n\r\n        this.y = u.y.multiply(a);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Linear constructor\r\n\r\n     * Build a vector from two other ones and corresponding scale factors.\r\n\r\n     * The vector built will be a1 * u1 + a2 * u2\r\n\r\n     * @param a1 first scale factor\r\n\r\n     * @param u1 first base (unscaled) vector\r\n\r\n     * @param a2 second scale factor\r\n\r\n     * @param u2 second base (unscaled) vector\r\n\r\n     */\r\n\r\n    public Field_Vector_2D(const T a1, const Field_Vector_2D<T> u1, const T a2, const Field_Vector_2D<T> u2) \r\n\r\n    {\r\n\r\n        const T prototype = a1;\r\n\r\n        this.x = prototype.linear_combination(a1, u1.get_x(), a2, u2.get_x());\r\n\r\n        this.y = prototype.linear_combination(a1, u1.get_y(), a2, u2.get_y());\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Linear constructor.\r\n\r\n     * Build a vector from two other ones and corresponding scale factors.\r\n\r\n     * The vector built will be a1 * u1 + a2 * u2\r\n\r\n     * @param a1 first scale factor\r\n\r\n     * @param u1 first base (unscaled) vector\r\n\r\n     * @param a2 second scale factor\r\n\r\n     * @param u2 second base (unscaled) vector\r\n\r\n     */\r\n\r\n    public Field_Vector_2D(const T a1, const Vector_2D u1, const T a2, const Vector_2D u2) \r\n\r\n    {\r\n\r\n        const T prototype = a1;\r\n\r\n        this.x = prototype.linear_combination(u1.get_x(), a1, u2.get_x(), a2);\r\n\r\n        this.y = prototype.linear_combination(u1.get_y(), a1, u2.get_y(), a2);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Linear constructor.\r\n\r\n     * Build a vector from two other ones and corresponding scale factors.\r\n\r\n     * The vector built will be a1 * u1 + a2 * u2\r\n\r\n     * @param a1 first scale factor\r\n\r\n     * @param u1 first base (unscaled) vector\r\n\r\n     * @param a2 second scale factor\r\n\r\n     * @param u2 second base (unscaled) vector\r\n\r\n     */\r\n\r\n    public Field_Vector_2D(const double& a1, const Field_Vector_2D<T> u1, const double& a2, const Field_Vector_2D<T> u2) \r\n\r\n    {\r\n\r\n        const T prototype = u1.get_x();\r\n\r\n        this.x = prototype.linear_combination(a1, u1.get_x(), a2, u2.get_x());\r\n\r\n        this.y = prototype.linear_combination(a1, u1.get_y(), a2, u2.get_y());\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Linear constructor.\r\n\r\n     * Build a vector from three other ones and corresponding scale factors.\r\n\r\n     * The vector built will be a1 * u1 + a2 * u2 + a3 * u3\r\n\r\n     * @param a1 first scale factor\r\n\r\n     * @param u1 first base (unscaled) vector\r\n\r\n     * @param a2 second scale factor\r\n\r\n     * @param u2 second base (unscaled) vector\r\n\r\n     * @param a3 third scale factor\r\n\r\n     * @param u3 third base (unscaled) vector\r\n\r\n     */\r\n\r\n    public Field_Vector_2D(const T a1, const Field_Vector_2D<T> u1, const T a2, const Field_Vector_2D<T> u2, const T a3, const Field_Vector_2D<T> u3) \r\n\r\n    {\r\n\r\n        const T prototype = a1;\r\n\r\n        this.x = prototype.linear_combination(a1, u1.get_x(), a2, u2.get_x(), a3, u3.get_x());\r\n\r\n        this.y = prototype.linear_combination(a1, u1.get_y(), a2, u2.get_y(), a3, u3.get_y());\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Linear constructor.\r\n\r\n     * Build a vector from three other ones and corresponding scale factors.\r\n\r\n     * The vector built will be a1 * u1 + a2 * u2 + a3 * u3\r\n\r\n     * @param a1 first scale factor\r\n\r\n     * @param u1 first base (unscaled) vector\r\n\r\n     * @param a2 second scale factor\r\n\r\n     * @param u2 second base (unscaled) vector\r\n\r\n     * @param a3 third scale factor\r\n\r\n     * @param u3 third base (unscaled) vector\r\n\r\n     */\r\n\r\n    public Field_Vector_2D(const T a1, const Vector_2D u1, const T a2, const Vector_2D u2, const T a3, const Vector_2D u3) \r\n\r\n    {\r\n\r\n        const T prototype = a1;\r\n\r\n        this.x = prototype.linear_combination(u1.get_x(), a1, u2.get_x(), a2, u3.get_x(), a3);\r\n\r\n        this.y = prototype.linear_combination(u1.get_y(), a1, u2.get_y(), a2, u3.get_y(), a3);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Linear constructor.\r\n\r\n     * Build a vector from three other ones and corresponding scale factors.\r\n\r\n     * The vector built will be a1 * u1 + a2 * u2 + a3 * u3\r\n\r\n     * @param a1 first scale factor\r\n\r\n     * @param u1 first base (unscaled) vector\r\n\r\n     * @param a2 second scale factor\r\n\r\n     * @param u2 second base (unscaled) vector\r\n\r\n     * @param a3 third scale factor\r\n\r\n     * @param u3 third base (unscaled) vector\r\n\r\n     */\r\n\r\n    public Field_Vector_2D(const double& a1, const Field_Vector_2D<T> u1, const double& a2, const Field_Vector_2D<T> u2, const double& a3, const Field_Vector_2D<T> u3) \r\n\r\n    {\r\n\r\n        const T prototype = u1.get_x();\r\n\r\n        this.x = prototype.linear_combination(a1, u1.get_x(), a2, u2.get_x(), a3, u3.get_x());\r\n\r\n        this.y = prototype.linear_combination(a1, u1.get_y(), a2, u2.get_y(), a3, u3.get_y());\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Linear constructor.\r\n\r\n     * Build a vector from four other ones and corresponding scale factors.\r\n\r\n     * The vector built will be a1 * u1 + a2 * u2 + a3 * u3 + a4 * u4\r\n\r\n     * @param a1 first scale factor\r\n\r\n     * @param u1 first base (unscaled) vector\r\n\r\n     * @param a2 second scale factor\r\n\r\n     * @param u2 second base (unscaled) vector\r\n\r\n     * @param a3 third scale factor\r\n\r\n     * @param u3 third base (unscaled) vector\r\n\r\n     * @param a4 fourth scale factor\r\n\r\n     * @param u4 fourth base (unscaled) vector\r\n\r\n     */\r\n\r\n    public Field_Vector_2D(const T a1, const Field_Vector_2D<T> u1, const T a2, const Field_Vector_2D<T> u2, const T a3, const Field_Vector_2D<T> u3, const T a4, const Field_Vector_2D<T> u4) \r\n\r\n    {\r\n\r\n        const T prototype = a1;\r\n\r\n        this.x = prototype.linear_combination(a1, u1.get_x(), a2, u2.get_x(), a3, u3.get_x(), a4, u4.get_x());\r\n\r\n        this.y = prototype.linear_combination(a1, u1.get_y(), a2, u2.get_y(), a3, u3.get_y(), a4, u4.get_y());\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Linear constructor.\r\n\r\n     * Build a vector from four other ones and corresponding scale factors.\r\n\r\n     * The vector built will be a1 * u1 + a2 * u2 + a3 * u3 + a4 * u4\r\n\r\n     * @param a1 first scale factor\r\n\r\n     * @param u1 first base (unscaled) vector\r\n\r\n     * @param a2 second scale factor\r\n\r\n     * @param u2 second base (unscaled) vector\r\n\r\n     * @param a3 third scale factor\r\n\r\n     * @param u3 third base (unscaled) vector\r\n\r\n     * @param a4 fourth scale factor\r\n\r\n     * @param u4 fourth base (unscaled) vector\r\n\r\n     */\r\n\r\n    public Field_Vector_2D(const T a1, const Vector_2D u1, const T a2, const Vector_2D u2, const T a3, const Vector_2D u3, const T a4, const Vector_2D u4) \r\n\r\n    {\r\n\r\n        const T prototype = a1;\r\n\r\n        this.x = prototype.linear_combination(u1.get_x(), a1, u2.get_x(), a2, u3.get_x(), a3, u4.get_x(), a4);\r\n\r\n        this.y = prototype.linear_combination(u1.get_y(), a1, u2.get_y(), a2, u3.get_y(), a3, u4.get_y(), a4);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Linear constructor.\r\n\r\n     * Build a vector from four other ones and corresponding scale factors.\r\n\r\n     * The vector built will be a1 * u1 + a2 * u2 + a3 * u3 + a4 * u4\r\n\r\n     * @param a1 first scale factor\r\n\r\n     * @param u1 first base (unscaled) vector\r\n\r\n     * @param a2 second scale factor\r\n\r\n     * @param u2 second base (unscaled) vector\r\n\r\n     * @param a3 third scale factor\r\n\r\n     * @param u3 third base (unscaled) vector\r\n\r\n     * @param a4 fourth scale factor\r\n\r\n     * @param u4 fourth base (unscaled) vector\r\n\r\n     */\r\n\r\n    public Field_Vector_2D(const double& a1, const Field_Vector_2D<T> u1, const double& a2, const Field_Vector_2D<T> u2, const double& a3, const Field_Vector_2D<T> u3, const double& a4, const Field_Vector_2D<T> u4) \r\n\r\n    {\r\n\r\n        const T prototype = u1.get_x();\r\n\r\n        this.x = prototype.linear_combination(a1, u1.get_x(), a2, u2.get_x(), a3, u3.get_x(), a4, u4.get_x());\r\n\r\n        this.y = prototype.linear_combination(a1, u1.get_y(), a2, u2.get_y(), a3, u3.get_y(), a4, u4.get_y());\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Build a {@link Field_Vector_2D} from a {@link Vector_2D}.\r\n\r\n     * @param field field for the components\r\n\r\n     * @param v vector to convert\r\n\r\n     */\r\n\r\n    public Field_Vector_2D(const Field<T> field, const Vector_2D v) \r\n\r\n    {\r\n\r\n        this.x = field.get_zero().add(v.get_x());\r\n\r\n        this.y = field.get_zero().add(v.get_y());\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get null vector (coordinates: 0, 0).\r\n\r\n     * @param field field for the components\r\n\r\n     * @return a vector\r\n\r\n     * @param <T> the type of the field elements\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n    public static  Field_Vector_2D<T> get_zero(const Field<T> field) \r\n\r\n    {\r\n\r\n        return Field_Vector_2D<>(field, Vector_2D.ZERO);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get first canonical vector (coordinates: 1, 0).\r\n\r\n     * @param field field for the components\r\n\r\n     * @return a vector\r\n\r\n     * @param <T> the type of the field elements\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n    public static  Field_Vector_2D<T> get_plus_i(const Field<T> field) \r\n\r\n    {\r\n\r\n        return Field_Vector_2D<>(field, Vector_2D.PLUS_I);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get opposite of the first canonical vector (coordinates: -1).\r\n\r\n     * @param field field for the components\r\n\r\n     * @return a vector\r\n\r\n     * @param <T> the type of the field elements\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n    public static  Field_Vector_2D<T> get_minus_i(const Field<T> field) \r\n\r\n    {\r\n\r\n        return Field_Vector_2D<>(field, Vector_2D.MINUS_I);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get second canonical vector (coordinates: 0, 1).\r\n\r\n     * @param field field for the components\r\n\r\n     * @return a vector\r\n\r\n     * @param <T> the type of the field elements\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n    public static  Field_Vector_2D<T> get_plus_j(const Field<T> field) \r\n\r\n    {\r\n\r\n        return Field_Vector_2D<>(field, Vector_2D.PLUS_J);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get opposite of the second canonical vector (coordinates: 0, -1).\r\n\r\n     * @param field field for the components\r\n\r\n     * @return a vector\r\n\r\n     * @param <T> the type of the field elements\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n    public static  Field_Vector_2D<T> get_minus_j(const Field<T> field) \r\n\r\n    {\r\n\r\n        return Field_Vector_2D<>(field, Vector_2D.MINUS_J);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get a vector with all coordinates set to NaN.\r\n\r\n     * @param field field for the components\r\n\r\n     * @return a vector\r\n\r\n     * @param <T> the type of the field elements\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n    public static  Field_Vector_2D<T> get_nan(const Field<T> field) \r\n\r\n    {\r\n\r\n        return Field_Vector_2D<>(field, Vector_2D.NaN);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get a vector with all coordinates set to positive infinity.\r\n\r\n     * @param field field for the components\r\n\r\n     * @return a vector\r\n\r\n     * @param <T> the type of the field elements\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n    public static  Field_Vector_2D<T> get_positive_infinity(const Field<T> field) \r\n\r\n    {\r\n\r\n        return Field_Vector_2D<>(field, Vector_2D.POSITIVE_INFINITY);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get a vector with all coordinates set to negative infinity.\r\n\r\n     * @param field field for the components\r\n\r\n     * @return a vector\r\n\r\n     * @param <T> the type of the field elements\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n    public static  Field_Vector_2D<T> get_negative_infinity(const Field<T> field) \r\n\r\n    {\r\n\r\n        return Field_Vector_2D<>(field, Vector_2D.NEGATIVE_INFINITY);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get the abscissa of the vector.\r\n\r\n     * @return abscissa of the vector\r\n\r\n     * @see #Field_Vector_2D(Calculus_Field_Element, Calculus_Field_Element)\r\n\r\n     */\r\n\r\n    public T get_x() \r\n\r\n    {\r\n\r\n        return x;\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get the ordinate of the vector.\r\n\r\n     * @return ordinate of the vector\r\n\r\n    * @see #Field_Vector_2D(Calculus_Field_Element, Calculus_Field_Element)\r\n\r\n     */\r\n\r\n    public T get_y() \r\n\r\n    {\r\n\r\n        return y;\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get the vector coordinates as a dimension 2 array.\r\n\r\n     * @return vector coordinates\r\n\r\n     * @see #Field_Vector_2D(Calculus_Field_Element[])\r\n\r\n     */\r\n\r\n    public std::vector<T> to_array() \r\n\r\n    {\r\n\r\n        const std::vector<T> array = Math_Arrays::build_array(x.get_field(), 2);\r\n\r\n        array[0] = x;\r\n\r\n        array[1] = y;\r\n\r\n        return array;\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Convert to a constant vector without extra field parts.\r\n\r\n     * @return a constant vector\r\n\r\n     */\r\n\r\n    public Vector_2D to_vector_2d() \r\n\r\n    {\r\n\r\n        return Vector_2D(x.get_real(), y.get_real());\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get the L<sub>1</sub> norm for the vector.\r\n\r\n     * @return L<sub>1</sub> norm for the vector\r\n\r\n     */\r\n\r\n    public T get_norm1() \r\n\r\n    {\r\n\r\n        return x.abs().add(y.abs());\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get the L<sub>2</sub> norm for the vector.\r\n\r\n     * @return Euclidean norm for the vector\r\n\r\n     */\r\n\r\n    public T get_norm() \r\n\r\n    {\r\n\r\n        // there are no cancellation problems here, so we use the straightforward formula\r\n\r\n        return x.multiply(x).add(y.multiply(y)).sqrt();\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get the square of the norm for the vector.\r\n\r\n     * @return square of the Euclidean norm for the vector\r\n\r\n     */\r\n\r\n    public T get_norm_sq() \r\n\r\n    {\r\n\r\n        // there are no cancellation problems here, so we use the straightforward formula\r\n\r\n        return x.multiply(x).add(y.multiply(y));\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get the L<sub>&infin;</sub> norm for the vector.\r\n\r\n     * @return L<sub>&infin;</sub> norm for the vector\r\n\r\n     */\r\n\r\n    public T get_norm_inf() \r\n\r\n    {\r\n\r\n        return std::max(std::abs(x), std::abs(y));\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Add a vector to the instance.\r\n\r\n     * @param v vector to add\r\n\r\n     * @return a vector\r\n\r\n     */\r\n\r\n    public Field_Vector_2D<T> add(const Field_Vector_2D<T> v) \r\n\r\n    {\r\n\r\n        return Field_Vector_2D<>(x.add(v.x), y.add(v.y));\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Add a vector to the instance.\r\n\r\n     * @param v vector to add\r\n\r\n     * @return a vector\r\n\r\n     */\r\n\r\n    public Field_Vector_2D<T> add(const Vector_2D v) \r\n\r\n    {\r\n\r\n        return Field_Vector_2D<>(x.add(v.get_x()), y.add(v.get_y()));\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Add a scaled vector to the instance.\r\n\r\n     * @param factor scale factor to apply to v before adding it\r\n\r\n     * @param v vector to add\r\n\r\n     * @return a vector\r\n\r\n     */\r\n\r\n    public Field_Vector_2D<T> add(const T factor, const Field_Vector_2D<T> v) \r\n\r\n    {\r\n\r\n        return Field_Vector_2D<>(x.get_field().get_one(), this, factor, v);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Add a scaled vector to the instance.\r\n\r\n     * @param factor scale factor to apply to v before adding it\r\n\r\n     * @param v vector to add\r\n\r\n     * @return a vector\r\n\r\n     */\r\n\r\n    public Field_Vector_2D<T> add(const T factor, const Vector_2D v) \r\n\r\n    {\r\n\r\n        return Field_Vector_2D<>(x.add(factor.multiply(v.get_x())), y.add(factor.multiply(v.get_y())));\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Add a scaled vector to the instance.\r\n\r\n     * @param factor scale factor to apply to v before adding it\r\n\r\n     * @param v vector to add\r\n\r\n     * @return a vector\r\n\r\n     */\r\n\r\n    public Field_Vector_2D<T> add(const double factor, const Field_Vector_2D<T> v) \r\n\r\n    {\r\n\r\n        return Field_Vector_2D<>(1.0, this, factor, v);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Add a scaled vector to the instance.\r\n\r\n     * @param factor scale factor to apply to v before adding it\r\n\r\n     * @param v vector to add\r\n\r\n     * @return a vector\r\n\r\n     */\r\n\r\n    public Field_Vector_2D<T> add(const double factor, const Vector_2D v) \r\n\r\n    {\r\n\r\n        return Field_Vector_2D<>(x.add(factor * v.get_x()), y.add(factor * v.get_y()));\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Subtract a vector from the instance.\r\n\r\n     * @param v vector to subtract\r\n\r\n     * @return a vector\r\n\r\n     */\r\n\r\n    public Field_Vector_2D<T> subtract(const Field_Vector_2D<T> v) \r\n\r\n    {\r\n\r\n        return Field_Vector_2D<>(x.subtract(v.x), y.subtract(v.y));\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Subtract a vector from the instance.\r\n\r\n     * @param v vector to subtract\r\n\r\n     * @return a vector\r\n\r\n     */\r\n\r\n    public Field_Vector_2D<T> subtract(const Vector_2D v) \r\n\r\n    {\r\n\r\n        return Field_Vector_2D<>(x.subtract(v.get_x()), y.subtract(v.get_y()));\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Subtract a scaled vector from the instance.\r\n\r\n     * @param factor scale factor to apply to v before subtracting it\r\n\r\n     * @param v vector to subtract\r\n\r\n     * @return a vector\r\n\r\n     */\r\n\r\n    public Field_Vector_2D<T> subtract(const T factor, const Field_Vector_2D<T> v) \r\n\r\n    {\r\n\r\n        return Field_Vector_2D<>(x.get_field().get_one(), this, factor.negate(), v);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Subtract a scaled vector from the instance.\r\n\r\n     * @param factor scale factor to apply to v before subtracting it\r\n\r\n     * @param v vector to subtract\r\n\r\n     * @return a vector\r\n\r\n     */\r\n\r\n    public Field_Vector_2D<T> subtract(const T factor, const Vector_2D v) \r\n\r\n    {\r\n\r\n        return Field_Vector_2D<>(x.subtract(factor.multiply(v.get_x())), y.subtract(factor.multiply(v.get_y())));\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Subtract a scaled vector from the instance.\r\n\r\n     * @param factor scale factor to apply to v before subtracting it\r\n\r\n     * @param v vector to subtract\r\n\r\n     * @return a vector\r\n\r\n     */\r\n\r\n    public Field_Vector_2D<T> subtract(const double factor, const Field_Vector_2D<T> v) \r\n\r\n    {\r\n\r\n        return Field_Vector_2D<>(1.0, this, -factor, v);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Subtract a scaled vector from the instance.\r\n\r\n     * @param factor scale factor to apply to v before subtracting it\r\n\r\n     * @param v vector to subtract\r\n\r\n     * @return a vector\r\n\r\n     */\r\n\r\n    public Field_Vector_2D<T> subtract(const double factor, const Vector_2D v) \r\n\r\n    {\r\n\r\n        return Field_Vector_2D<>(x.subtract(factor * v.get_x()), y.subtract(factor * v.get_y()));\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get a normalized vector aligned with the instance.\r\n\r\n     * @return a normalized vector\r\n\r\n     * @exception Math_Runtime_Exception if the norm is zero\r\n\r\n     */\r\n\r\n    public Field_Vector_2D<T> normalize() Math_Runtime_Exception \r\n\r\n    {\r\n\r\n        const T s = get_norm();\r\n\r\n        if (s.get_real() == 0) \r\n\r\n        {\r\n\r\n            throw Math_Runtime_Exception(Localized_Geometry_Formats.CANNOT_NORMALIZE_A_ZERO_NORM_VECTOR);\r\n\r\n        }\r\n\r\n        return scalar_multiply(s.reciprocal());\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Compute the angular separation between two vectors.\r\n\r\n     * <p>This method computes the angular separation between two\r\n\r\n     * vectors using the dot product for well separated vectors and the\r\n\r\n     * cross product for almost aligned vectors. This allows to have a\r\n\r\n     * good accuracy in all cases, even for vectors very close to each\r\n\r\n     * other.</p>\r\n\r\n     * @param v1 first vector\r\n\r\n     * @param v2 second vector\r\n\r\n     * @param <T> the type of the field elements\r\n\r\n     * @return angular separation between v1 and v2\r\n\r\n     * @exception Math_Runtime_Exception if either vector has a null norm\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n    public static  T angle(const Field_Vector_2D<T> v1, const Field_Vector_2D<T> v2)\r\n\r\n        Math_Runtime_Exception \r\n\r\n        {\r\n\r\n\r\n\r\n        const T norm_product = v1.get_norm().multiply(v2.get_norm());\r\n\r\n        if (norm_product.get_real() == 0) \r\n\r\n        {\r\n\r\n            throw Math_Runtime_Exception(Localized_Core_Formats.ZERO_NORM);\r\n\r\n        }\r\n\r\n\r\n\r\n        const T dot = v1.dot_product(v2);\r\n\r\n        const double threshold = norm_product.get_real() * 0.9999;\r\n\r\n        if (std::abs(dot.get_real()) > threshold) \r\n\r\n        {\r\n\r\n            // the vectors are almost aligned, compute using the sine\r\n\r\n            const T n = std::abs(dot.linear_combination(v1.x, v2.y, v1.y.negate(), v2.x));\r\n\r\n            if (dot.get_real() >= 0) \r\n\r\n            {\r\n\r\n                return std::asin(n.divide(norm_product));\r\n\r\n            }\r\n\r\n            return std::asin(n.divide(norm_product)).negate().add(dot.get_pi());\r\n\r\n        }\r\n\r\n\r\n\r\n        // the vectors are sufficiently separated to use the cosine\r\n\r\n        return std::acos(dot.divide(norm_product));\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Compute the angular separation between two vectors.\r\n\r\n     * <p>This method computes the angular separation between two\r\n\r\n     * vectors using the dot product for well separated vectors and the\r\n\r\n     * cross product for almost aligned vectors. This allows to have a\r\n\r\n     * good accuracy in all cases, even for vectors very close to each\r\n\r\n     * other.</p>\r\n\r\n     * @param v1 first vector\r\n\r\n     * @param v2 second vector\r\n\r\n     * @param <T> the type of the field elements\r\n\r\n     * @return angular separation between v1 and v2\r\n\r\n     * @exception Math_Runtime_Exception if either vector has a null norm\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n    public static  T angle(const Field_Vector_2D<T> v1, const Vector_2D v2)\r\n\r\n        Math_Runtime_Exception \r\n\r\n        {\r\n\r\n\r\n\r\n        const T norm_product = v1.get_norm().multiply(v2.get_norm());\r\n\r\n        if (norm_product.get_real() == 0) \r\n\r\n        {\r\n\r\n            throw Math_Runtime_Exception(Localized_Core_Formats.ZERO_NORM);\r\n\r\n        }\r\n\r\n\r\n\r\n        const T dot = v1.dot_product(v2);\r\n\r\n        const double threshold = norm_product.get_real() * 0.9999;\r\n\r\n        if (std::abs(dot.get_real()) > threshold) \r\n\r\n        {\r\n\r\n            // the vectors are almost aligned, compute using the sine\r\n\r\n            const T n = std::abs(dot.linear_combination(v2.get_y(), v1.x, v2.get_x(), v1.y.negate()));\r\n\r\n            if (dot.get_real() >= 0) \r\n\r\n            {\r\n\r\n                return std::asin(n.divide(norm_product));\r\n\r\n            }\r\n\r\n            return std::asin(n.divide(norm_product)).negate().add(dot.get_pi());\r\n\r\n        }\r\n\r\n\r\n\r\n        // the vectors are sufficiently separated to use the cosine\r\n\r\n        return std::acos(dot.divide(norm_product));\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Compute the angular separation between two vectors.\r\n\r\n     * <p>This method computes the angular separation between two\r\n\r\n     * vectors using the dot product for well separated vectors and the\r\n\r\n     * cross product for almost aligned vectors. This allows to have a\r\n\r\n     * good accuracy in all cases, even for vectors very close to each\r\n\r\n     * other.</p>\r\n\r\n     * @param v1 first vector\r\n\r\n     * @param v2 second vector\r\n\r\n     * @param <T> the type of the field elements\r\n\r\n     * @return angular separation between v1 and v2\r\n\r\n     * @exception Math_Runtime_Exception if either vector has a null norm\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n    public static  T angle(const Vector_2D v1, const Field_Vector_2D<T> v2)\r\n\r\n        Math_Runtime_Exception \r\n\r\n        {\r\n\r\n        return angle(v2, v1);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get the opposite of the instance.\r\n\r\n     * @return a vector which is opposite to the instance\r\n\r\n     */\r\n\r\n    public Field_Vector_2D<T> negate() \r\n\r\n    {\r\n\r\n        return Field_Vector_2D<>(x.negate(), y.negate());\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Multiply the instance by a scalar.\r\n\r\n     * @param a scalar\r\n\r\n     * @return a vector\r\n\r\n     */\r\n\r\n    public Field_Vector_2D<T> scalar_multiply(const T a) \r\n\r\n    {\r\n\r\n        return Field_Vector_2D<>(x.multiply(a), y.multiply(a));\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Multiply the instance by a scalar.\r\n\r\n     * @param a scalar\r\n\r\n     * @return a vector\r\n\r\n     */\r\n\r\n    public Field_Vector_2D<T> scalar_multiply(const double& a) \r\n\r\n    {\r\n\r\n        return Field_Vector_2D<>(x.multiply(a), y.multiply(a));\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Returns true if any coordinate of this vector is NaN; false otherwise\r\n\r\n     * @return  true if any coordinate of this vector is NaN; false otherwise\r\n\r\n     */\r\n\r\n    public bool is_nan() \r\n\r\n    {\r\n\r\n        return std::isnan(x.get_real()) || std::isnan(y.get_real());\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Returns true if any coordinate of this vector is infinite and none are NaN;\r\n\r\n     * false otherwise\r\n\r\n     * @return  true if any coordinate of this vector is infinite and none are NaN;\r\n\r\n     * false otherwise\r\n\r\n     */\r\n\r\n    public bool is_infinite() \r\n\r\n    {\r\n\r\n        return !is_nan() && (Double.std::isinfinite(x.get_real()) || Double.std::isinfinite(y.get_real()));\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Test for the equality of two 2D vectors.\r\n\r\n     * <p>\r\n\r\n     * If all coordinates of two 2D vectors are exactly the same, and none of their\r\n\r\n     * {@link Calculus_Field_Element#get_real() real part} are <code>NaN</code>, the\r\n\r\n     * two 2D vectors are considered to be equal.\r\n\r\n     * </p>\r\n\r\n     * <p>\r\n\r\n     * <code>NaN</code> coordinates are considered to affect globally the vector\r\n\r\n     * and be equals to each other - i.e, if either (or all) real part of the\r\n\r\n     * coordinates of the 3D vector are <code>NaN</code>, the 2D vector is <code>NaN</code>.\r\n\r\n     * </p>\r\n\r\n     *\r\n\r\n     * @param other Object to test for equality to this\r\n\r\n     * @return true if two 2D vector objects are equal, false if\r\n\r\n     *         object is null, not an instance of Field_Vector_2D, or\r\n\r\n     *         not equal to this Field_Vector_2D instance\r\n\r\n     *\r\n\r\n     */\r\n\r\n    //override\r\n\r\n    public bool equals(Object other) \r\n\r\n    {\r\n\r\n\r\n\r\n        if (this == other) \r\n\r\n        {\r\n\r\n            return true;\r\n\r\n        }\r\n\r\n\r\n\r\n        if (other instanceof Field_Vector_2D) \r\n\r\n        {\r\n\r\n            //@Suppress_Warnings("unchecked")\r\n\r\n            const Field_Vector_2D<T> rhs = (Field_Vector_2D<T>) other;\r\n\r\n            if (rhs.is_nan()) \r\n\r\n            {\r\n\r\n                return this.is_nan();\r\n\r\n            }\r\n\r\n\r\n\r\n            return x.equals(rhs.x) && y.equals(rhs.y);\r\n\r\n\r\n\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Get a hash_code for the 3D vector.\r\n\r\n     * <p>\r\n\r\n     * All NaN values have the same hash code.</p>\r\n\r\n     *\r\n\r\n     * @return a hash code value for this object\r\n\r\n     */\r\n\r\n    //override\r\n\r\n    public int hash_code() \r\n\r\n    {\r\n\r\n        if (is_nan()) \r\n\r\n        {\r\n\r\n            return 542;\r\n\r\n        }\r\n\r\n        return 122 * (76 * x.hash_code() +  y.hash_code());\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Compute the distance between the instance and another vector according to the L<sub>1</sub> norm.\r\n\r\n     * <p>Calling this method is equivalent to calling:\r\n\r\n     * <code>q.subtract(p).get_norm1()</code> except that no intermediate\r\n\r\n     * vector is built</p>\r\n\r\n     * @param v second vector\r\n\r\n     * @return the distance between the instance and p according to the L<sub>1</sub> norm\r\n\r\n     */\r\n\r\n    public T distance1(const Field_Vector_2D<T> v) \r\n\r\n    {\r\n\r\n        const T dx = v.x.subtract(x).abs();\r\n\r\n        const T dy = v.y.subtract(y).abs();\r\n\r\n        return dx.add(dy);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Compute the distance between the instance and another vector according to the L<sub>1</sub> norm.\r\n\r\n     * <p>Calling this method is equivalent to calling:\r\n\r\n     * <code>q.subtract(p).get_norm1()</code> except that no intermediate\r\n\r\n     * vector is built</p>\r\n\r\n     * @param v second vector\r\n\r\n     * @return the distance between the instance and p according to the L<sub>1</sub> norm\r\n\r\n     */\r\n\r\n    public T distance1(const Vector_2D v) \r\n\r\n    {\r\n\r\n        const T dx = x.subtract(v.get_x()).abs();\r\n\r\n        const T dy = y.subtract(v.get_y()).abs();\r\n\r\n        return dx.add(dy);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Compute the distance between the instance and another vector according to the L<sub>2</sub> norm.\r\n\r\n     * <p>Calling this method is equivalent to calling:\r\n\r\n     * <code>q.subtract(p).get_norm()</code> except that no intermediate\r\n\r\n     * vector is built</p>\r\n\r\n     * @param v second vector\r\n\r\n     * @return the distance between the instance and p according to the L<sub>2</sub> norm\r\n\r\n     */\r\n\r\n    public T distance(const Field_Vector_2D<T> v) \r\n\r\n    {\r\n\r\n        const T dx = v.x.subtract(x);\r\n\r\n        const T dy = v.y.subtract(y);\r\n\r\n        return dx.multiply(dx).add(dy.multiply(dy)).sqrt();\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Compute the distance between the instance and another vector according to the L<sub>2</sub> norm.\r\n\r\n     * <p>Calling this method is equivalent to calling:\r\n\r\n     * <code>q.subtract(p).get_norm()</code> except that no intermediate\r\n\r\n     * vector is built</p>\r\n\r\n     * @param v second vector\r\n\r\n     * @return the distance between the instance and p according to the L<sub>2</sub> norm\r\n\r\n     */\r\n\r\n    public T distance(const Vector_2D v) \r\n\r\n    {\r\n\r\n        const T dx = x.subtract(v.get_x());\r\n\r\n        const T dy = y.subtract(v.get_y());\r\n\r\n        return dx.multiply(dx).add(dy.multiply(dy)).sqrt();\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Compute the distance between the instance and another vector according to the L<sub>&infin;</sub> norm.\r\n\r\n     * <p>Calling this method is equivalent to calling:\r\n\r\n     * <code>q.subtract(p).get_norm_inf()</code> except that no intermediate\r\n\r\n     * vector is built</p>\r\n\r\n     * @param v second vector\r\n\r\n     * @return the distance between the instance and p according to the L<sub>&infin;</sub> norm\r\n\r\n     */\r\n\r\n    public T distance_inf(const Field_Vector_2D<T> v) \r\n\r\n    {\r\n\r\n        const T dx = std::abs(x.subtract(v.x));\r\n\r\n        const T dy = std::abs(y.subtract(v.y));\r\n\r\n        return std::max(dx, dy);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Compute the distance between the instance and another vector according to the L<sub>&infin;</sub> norm.\r\n\r\n     * <p>Calling this method is equivalent to calling:\r\n\r\n     * <code>q.subtract(p).get_norm_inf()</code> except that no intermediate\r\n\r\n     * vector is built</p>\r\n\r\n     * @param v second vector\r\n\r\n     * @return the distance between the instance and p according to the L<sub>&infin;</sub> norm\r\n\r\n     */\r\n\r\n    public T distance_inf(const Vector_2D v) \r\n\r\n    {\r\n\r\n        const T dx = std::abs(x.subtract(v.get_x()));\r\n\r\n        const T dy = std::abs(y.subtract(v.get_y()));\r\n\r\n        return std::max(dx, dy);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Compute the square of the distance between the instance and another vector.\r\n\r\n     * <p>Calling this method is equivalent to calling:\r\n\r\n     * <code>q.subtract(p).get_norm_sq()</code> except that no intermediate\r\n\r\n     * vector is built</p>\r\n\r\n     * @param v second vector\r\n\r\n     * @return the square of the distance between the instance and p\r\n\r\n     */\r\n\r\n    public T distance_sq(const Field_Vector_2D<T> v) \r\n\r\n    {\r\n\r\n        const T dx = v.x.subtract(x);\r\n\r\n        const T dy = v.y.subtract(y);\r\n\r\n        return dx.multiply(dx).add(dy.multiply(dy));\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Compute the square of the distance between the instance and another vector.\r\n\r\n     * <p>Calling this method is equivalent to calling:\r\n\r\n     * <code>q.subtract(p).get_norm_sq()</code> except that no intermediate\r\n\r\n     * vector is built</p>\r\n\r\n     * @param v second vector\r\n\r\n     * @return the square of the distance between the instance and p\r\n\r\n     */\r\n\r\n    public T distance_sq(const Vector_2D v) \r\n\r\n    {\r\n\r\n        const T dx = x.subtract(v.get_x());\r\n\r\n        const T dy = y.subtract(v.get_y());\r\n\r\n        return dx.multiply(dx).add(dy.multiply(dy));\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    /** Compute the dot-product of the instance and another vector.\r\n\r\n     * <p>\r\n\r\n     * The implementation uses specific multiplication and addition\r\n\r\n     * algorithms to preserve accuracy and reduce cancellation effects.\r\n\r\n     * It should be very accurate even for nearly orthogonal vectors.\r\n\r\n     * </p>\r\n\r\n     * @see Math_Arrays#linear_combination(double, double, double, double, double, double)\r\n\r\n     * @param v second vector\r\n\r\n     * @return the dot product this.v\r\n\r\n     */\r\n\r\n    public T dot_product(const Field_Vector_2D<T> v) \r\n\r\n    {\r\n\r\n        return x.linear_combination(x, v.get_x(), y, v.get_y());\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Compute the dot-product of the instance and another vector.\r\n\r\n     * <p>\r\n\r\n     * The implementation uses specific multiplication and addition\r\n\r\n     * algorithms to preserve accuracy and reduce cancellation effects.\r\n\r\n     * It should be very accurate even for nearly orthogonal vectors.\r\n\r\n     * </p>\r\n\r\n     * @see Math_Arrays#linear_combination(double, double, double, double, double, double)\r\n\r\n     * @param v second vector\r\n\r\n     * @return the dot product this.v\r\n\r\n     */\r\n\r\n    public T dot_product(const Vector_2D v) \r\n\r\n    {\r\n\r\n        return x.linear_combination(v.get_x(), x, v.get_y(), y);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Compute the cross-product of the instance and the given points.\r\n\r\n     * <p>\r\n\r\n     * The cross product can be used to determine the location of a point\r\n\r\n     * with regard to the line formed by (p1, p2) and is calculated as:\r\n\r\n     * \\[\r\n\r\n     *    P = (x_2 - x_1)(y_3 - y_1) - (y_2 - y_1)(x_3 - x_1)\r\n\r\n     * \\]\r\n\r\n     * with \\(p3 = (x_3, y_3)\\) being this instance.\r\n\r\n     * <p>\r\n\r\n     * If the result is 0, the points are collinear, i.e. lie on a single straight line L;\r\n\r\n     * if it is positive, this point lies to the left, otherwise to the right of the line\r\n\r\n     * formed by (p1, p2).\r\n\r\n     *\r\n\r\n     * @param p1 first point of the line\r\n\r\n     * @param p2 second point of the line\r\n\r\n     * @return the cross-product\r\n\r\n     *\r\n\r\n     * @see <a href="http://en.wikipedia.org/wiki/Cross_product">Cross product (Wikipedia)</a>\r\n\r\n     */\r\n\r\n    public T cross_product(const Field_Vector_2D<T> p1, const Field_Vector_2D<T> p2) \r\n\r\n    {\r\n\r\n        const T x1  = p2.get_x().subtract(p1.get_x());\r\n\r\n        const T y1  = get_y().subtract(p1.get_y());\r\n\r\n        const T mx2 = p1.get_x().subtract(get_x());\r\n\r\n        const T y2  = p2.get_y().subtract(p1.get_y());\r\n\r\n        return x1.linear_combination(x1, y1, mx2, y2);\r\n\r\n    }\r\n\r\n\r\n\r\n    /**\r\n\r\n     * Compute the cross-product of the instance and the given points.\r\n\r\n     * <p>\r\n\r\n     * The cross product can be used to determine the location of a point\r\n\r\n     * with regard to the line formed by (p1, p2) and is calculated as:\r\n\r\n     * \\[\r\n\r\n     *    P = (x_2 - x_1)(y_3 - y_1) - (y_2 - y_1)(x_3 - x_1)\r\n\r\n     * \\]\r\n\r\n     * with \\(p3 = (x_3, y_3)\\) being this instance.\r\n\r\n     * <p>\r\n\r\n     * If the result is 0, the points are collinear, i.e. lie on a single straight line L;\r\n\r\n     * if it is positive, this point lies to the left, otherwise to the right of the line\r\n\r\n     * formed by (p1, p2).\r\n\r\n     *\r\n\r\n     * @param p1 first point of the line\r\n\r\n     * @param p2 second point of the line\r\n\r\n     * @return the cross-product\r\n\r\n     *\r\n\r\n     * @see <a href="http://en.wikipedia.org/wiki/Cross_product">Cross product (Wikipedia)</a>\r\n\r\n     */\r\n\r\n    public T cross_product(const Vector_2D& p1, const Vector_2D& p2) \r\n\r\n    {\r\n\r\n        const double x1  = p2.get_x() - p1.get_x();\r\n\r\n        const T      y1  = get_y().subtract(p1.get_y());\r\n\r\n        const T      x2 = get_x().subtract(p1.get_x());\r\n\r\n        const double y2  = p2.get_y() - p1.get_y();\r\n\r\n        return y1.linear_combination(x1, y1, -y2, x2);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Compute the distance between two vectors according to the L<sub>2</sub> norm.\r\n\r\n     * <p>Calling this method is equivalent to calling:\r\n\r\n     * <code>p1.subtract(p2).get_norm()</code> except that no intermediate\r\n\r\n     * vector is built</p>\r\n\r\n     * @param p1 first vector\r\n\r\n     * @param p2 second vector\r\n\r\n     * @param <T> the type of the field elements\r\n\r\n     * @return the distance between p1 and p2 according to the L<sub>2</sub> norm\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n    public static  T  distance1(const Field_Vector_2D<T> p1, const Field_Vector_2D<T> p2) \r\n\r\n    {\r\n\r\n        return p1.distance1(p2);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Compute the distance between two vectors according to the L<sub>2</sub> norm.\r\n\r\n     * <p>Calling this method is equivalent to calling:\r\n\r\n     * <code>p1.subtract(p2).get_norm()</code> except that no intermediate\r\n\r\n     * vector is built</p>\r\n\r\n     * @param p1 first vector\r\n\r\n     * @param p2 second vector\r\n\r\n     * @param <T> the type of the field elements\r\n\r\n     * @return the distance between p1 and p2 according to the L<sub>2</sub> norm\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n    public static  T  distance1(const Field_Vector_2D<T> p1, const Vector_2D& p2) \r\n\r\n    {\r\n\r\n        return p1.distance1(p2);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Compute the distance between two vectors according to the L<sub>2</sub> norm.\r\n\r\n     * <p>Calling this method is equivalent to calling:\r\n\r\n     * <code>p1.subtract(p2).get_norm()</code> except that no intermediate\r\n\r\n     * vector is built</p>\r\n\r\n     * @param p1 first vector\r\n\r\n     * @param p2 second vector\r\n\r\n     * @param <T> the type of the field elements\r\n\r\n     * @return the distance between p1 and p2 according to the L<sub>2</sub> norm\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n    public static  T  distance1(const Vector_2D& p1, const Field_Vector_2D<T> p2) \r\n\r\n    {\r\n\r\n        return p2.distance1(p1);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Compute the distance between two vectors according to the L<sub>2</sub> norm.\r\n\r\n     * <p>Calling this method is equivalent to calling:\r\n\r\n     * <code>p1.subtract(p2).get_norm()</code> except that no intermediate\r\n\r\n     * vector is built</p>\r\n\r\n     * @param p1 first vector\r\n\r\n     * @param p2 second vector\r\n\r\n     * @param <T> the type of the field elements\r\n\r\n     * @return the distance between p1 and p2 according to the L<sub>2</sub> norm\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n    public static  T distance(const Field_Vector_2D<T> p1, const Field_Vector_2D<T> p2) \r\n\r\n    {\r\n\r\n        return p1.distance(p2);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Compute the distance between two vectors according to the L<sub>2</sub> norm.\r\n\r\n     * <p>Calling this method is equivalent to calling:\r\n\r\n     * <code>p1.subtract(p2).get_norm()</code> except that no intermediate\r\n\r\n     * vector is built</p>\r\n\r\n     * @param p1 first vector\r\n\r\n     * @param p2 second vector\r\n\r\n     * @param <T> the type of the field elements\r\n\r\n     * @return the distance between p1 and p2 according to the L<sub>2</sub> norm\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n    public static  T distance(const Field_Vector_2D<T> p1, const Vector_2D& p2) \r\n\r\n    {\r\n\r\n        return p1.distance(p2);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Compute the distance between two vectors according to the L<sub>2</sub> norm.\r\n\r\n     * <p>Calling this method is equivalent to calling:\r\n\r\n     * <code>p1.subtract(p2).get_norm()</code> except that no intermediate\r\n\r\n     * vector is built</p>\r\n\r\n     * @param p1 first vector\r\n\r\n     * @param p2 second vector\r\n\r\n     * @param <T> the type of the field elements\r\n\r\n     * @return the distance between p1 and p2 according to the L<sub>2</sub> norm\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n    public static  T distance( const Vector_2D& p1, const Field_Vector_2D<T> p2) \r\n\r\n    {\r\n\r\n        return p2.distance(p1);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Compute the distance between two vectors according to the L<sub>&infin;</sub> norm.\r\n\r\n     * <p>Calling this method is equivalent to calling:\r\n\r\n     * <code>p1.subtract(p2).get_norm_inf()</code> except that no intermediate\r\n\r\n     * vector is built</p>\r\n\r\n     * @param p1 first vector\r\n\r\n     * @param p2 second vector\r\n\r\n     * @param <T> the type of the field elements\r\n\r\n     * @return the distance between p1 and p2 according to the L<sub>&infin;</sub> norm\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n    public static  T distance_inf(const Field_Vector_2D<T> p1, const Field_Vector_2D<T> p2) \r\n\r\n    {\r\n\r\n        return p1.distance_inf(p2);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Compute the distance between two vectors according to the L<sub>&infin;</sub> norm.\r\n\r\n     * <p>Calling this method is equivalent to calling:\r\n\r\n     * <code>p1.subtract(p2).get_norm_inf()</code> except that no intermediate\r\n\r\n     * vector is built</p>\r\n\r\n     * @param p1 first vector\r\n\r\n     * @param p2 second vector\r\n\r\n     * @param <T> the type of the field elements\r\n\r\n     * @return the distance between p1 and p2 according to the L<sub>&infin;</sub> norm\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n    public static  T distance_inf(const Field_Vector_2D<T> p1, const Vector_2D& p2) \r\n\r\n    {\r\n\r\n        return p1.distance_inf(p2);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Compute the distance between two vectors according to the L<sub>&infin;</sub> norm.\r\n\r\n     * <p>Calling this method is equivalent to calling:\r\n\r\n     * <code>p1.subtract(p2).get_norm_inf()</code> except that no intermediate\r\n\r\n     * vector is built</p>\r\n\r\n     * @param p1 first vector\r\n\r\n     * @param p2 second vector\r\n\r\n     * @param <T> the type of the field elements\r\n\r\n     * @return the distance between p1 and p2 according to the L<sub>&infin;</sub> norm\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n    public static  T distance_inf(const Vector_2D& p1, const Field_Vector_2D<T> p2) \r\n\r\n    {\r\n\r\n        return p2.distance_inf(p1);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Compute the square of the distance between two vectors.\r\n\r\n     * <p>Calling this method is equivalent to calling:\r\n\r\n     * <code>p1.subtract(p2).get_norm_sq()</code> except that no intermediate\r\n\r\n     * vector is built</p>\r\n\r\n     * @param p1 first vector\r\n\r\n     * @param p2 second vector\r\n\r\n     * @param <T> the type of the field elements\r\n\r\n     * @return the square of the distance between p1 and p2\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n    public static  T distance_sq(const Field_Vector_2D<T> p1, const Field_Vector_2D<T> p2) \r\n\r\n    {\r\n\r\n        return p1.distance_sq(p2);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Compute the square of the distance between two vectors.\r\n\r\n     * <p>Calling this method is equivalent to calling:\r\n\r\n     * <code>p1.subtract(p2).get_norm_sq()</code> except that no intermediate\r\n\r\n     * vector is built</p>\r\n\r\n     * @param p1 first vector\r\n\r\n     * @param p2 second vector\r\n\r\n     * @param <T> the type of the field elements\r\n\r\n     * @return the square of the distance between p1 and p2\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n    public static  T distance_sq(const Field_Vector_2D<T> p1, const Vector_2D& p2) \r\n\r\n    {\r\n\r\n        return p1.distance_sq(p2);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Compute the square of the distance between two vectors.\r\n\r\n     * <p>Calling this method is equivalent to calling:\r\n\r\n     * <code>p1.subtract(p2).get_norm_sq()</code> except that no intermediate\r\n\r\n     * vector is built</p>\r\n\r\n     * @param p1 first vector\r\n\r\n     * @param p2 second vector\r\n\r\n     * @param <T> the type of the field elements\r\n\r\n     * @return the square of the distance between p1 and p2\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n    public static  T distance_sq(const Vector_2D& p1, const Field_Vector_2D<T> p2) \r\n\r\n    {\r\n\r\n        return p2.distance_sq(p1);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Compute the orientation of a triplet of points.\r\n\r\n     * @param p first vector of the triplet\r\n\r\n     * @param q second vector of the triplet\r\n\r\n     * @param r third vector of the triplet\r\n\r\n     * @param <T> the type of the field elements\r\n\r\n     * @return a positive value if (p, q, r) defines a counterclockwise oriented\r\n\r\n     * triangle, a negative value if (p, q, r) defines a clockwise oriented\r\n\r\n     * triangle, and 0 if (p, q, r) are collinear or some points are equal\r\n\r\n     * @since 1.2\r\n\r\n    template<typename T, typename std::enable_if<std::is_base_of<Calculus_Field_Element, T>::value>::type* = nullptr>\r\n    public static  T orientation(const Field_Vector_2D<T> p, const Field_Vector_2D<T> q, const Field_Vector_2D<T> r) \r\n\r\n    {\r\n\r\n        const T prototype = p.get_x();\r\n\r\n        const std::vector<T> a = Math_Arrays::build_array(prototype.get_field(), 6);\r\n\r\n        a[0] = p.get_x();\r\n\r\n        a[1] = p.get_x().negate();\r\n\r\n        a[2] = q.get_x();\r\n\r\n        a[3] = q.get_x().negate();\r\n\r\n        a[4] = r.get_x();\r\n\r\n        a[5] = r.get_x().negate();\r\n\r\n        const std::vector<T> b = Math_Arrays::build_array(prototype.get_field(), 6);\r\n\r\n        b[0] = q.get_y();\r\n\r\n        b[1] = r.get_y();\r\n\r\n        b[2] = r.get_y();\r\n\r\n        b[3] = p.get_y();\r\n\r\n        b[4] = p.get_y();\r\n\r\n        b[5] = q.get_y();\r\n\r\n        return prototype.linear_combination(a, b);\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get a string representation of this vector.\r\n\r\n     * @return a string representation of this vector\r\n\r\n     */\r\n\r\n    //override\r\n\r\n    public std::string to_string() const \r\n\r\n    {\r\n\r\n        return Vector_2D_Format.get_vector_2d_format().format(to_vector_2d());\r\n\r\n    }\r\n\r\n\r\n\r\n    /** Get a string representation of this vector.\r\n\r\n     * @param format the custom format for components\r\n\r\n     * @return a string representation of this vector\r\n\r\n     */\r\n\r\n    public std::string to_string(const Number_Format format) \r\n\r\n    {\r\n\r\n        return Vector_2D_Format(format).format(to_vector_2d());\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n